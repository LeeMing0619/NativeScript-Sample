(global.webpackJsonp=global.webpackJsonp||[]).push([["vendor"],{"../node_modules/css-loader/dist/runtime/api.js":function(e,t,o){"use strict";(function(t){e.exports=function(e){var t=[]
t.toString=function(){return this.map(function(t){var o=function(e,t){var o=e[1]||"",r=e[3]
if(!r)return o
if(t&&"function"==typeof btoa){var n=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,"+s,"/*# "+u+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"})
return[o].concat(i).concat([n]).join("\n")}var a,s,u
return[o].join("\n")}(t,e)
return t[2]?"@media "+t[2]+"{"+o+"}":o}).join("")}
t.i=function(e,o){"string"==typeof e&&(e=[[null,e,""]])
for(var r={},n=0;n<this.length;n++){var i=this[n][0]
null!=i&&(r[i]=!0)}for(n=0;n<e.length;n++){var a=e[n]
if(null==a[0]||!r[a[0]]){o&&!a[2]?a[2]=o:o&&(a[2]="("+a[2]+") and ("+o+")")
t.push(a)}}}
return t}
if(t._isModuleLoadedForUI&&t._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/css-loader/dist/runtime/api.js")){e.hot.accept()
e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/css-loader/dist/runtime/api.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/nativescript-dev-webpack/hmr/hmr-update.js":function(e,t,o){"use strict";(function(r){Object.defineProperty(t,"__esModule",{value:!0})
const n=o("../node_modules/nativescript-dev-webpack/hot.js"),i=o("../node_modules/tns-core-modules/file-system/file-system.js")
t.hmrUpdate=function(){const e=i.knownFolders.currentApp(),t=o.h()
return n(t,t=>e.getFile(t))}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/nativescript-dev-webpack/hmr/hmr-update.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/nativescript-dev-webpack/hmr/hmr-update.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/nativescript-dev-webpack/hmr/index.js":function(e,t,o){"use strict";(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/nativescript-dev-webpack/hmr/hmr-update.js")
t.hmrUpdate=n.hmrUpdate
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/nativescript-dev-webpack/hmr/index.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/nativescript-dev-webpack/hmr/index.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/nativescript-dev-webpack/hot.js":function(e,t,o){(function(t){const r={info:e=>console.info(`HMR: ${e}`),warn:e=>console.warn(`HMR: ${e}`),error:e=>console.error(`HMR: ${e}`)},n="Application needs to be restarted in order to apply the changes.",i={ignoreUnaccepted:!1,ignoreDeclined:!1,ignoreErrored:!1,onUnaccepted(e){const t=[].concat(e.chain),o=t[t.length-1]
0===o&&t.pop()
r.warn("Ignored an update to unaccepted module: ")
t.forEach(e=>r.warn(`         ➭ ${e}`))},onDeclined(e){r.warn("Ignored an update to declined module:")
e.chain.forEach(e=>r.warn(`         ➭ ${e}`))},onErrored(e){r.warn(`Ignored an error while updating module ${e.moduleId} <${e.type}>`)
r.warn(e.error)}}
let a,s
function u(){return a.indexOf(o.h())>=0}function l(t){return e.hot.check().then(o=>{if(!o){r.warn(`Cannot find update. ${n}`)
return null}return e.hot.apply(i).then(e=>{let n
u()||(n=l(t))
!function(e,t){const o=e.filter(e=>t&&t.indexOf(e)<0)
if(o.length>0){r.warn("The following modules could not be updated:")
for(const e of o)r.warn(`          ⦻ ${e}`)}if((t||[]).length){r.info("The following modules were updated:")
for(const e of t)r.info(`         ↻ ${e}`)
const e=t.every(e=>"number"==typeof e)
e&&r.info("Please consider using the NamedModulesPlugin for module names.")}else r.info("No Modules Updated.")}(o,e)
u()&&r.info(`Successfully applied update with hmr hash ${s}. App is up to date.`)
return n||null}).catch(t=>{const o=e.hot.status()
if(["abort","fail"].indexOf(o)>=0){r.error(`Cannot apply update with hmr hash ${s}.`)
r.error(t.message||t.stack)}else r.error(`Update failed: ${t.message||t.stack}`)})}).catch(t=>{const o=e.hot.status()
if(["abort","fail"].indexOf(o)>=0){r.error(`Cannot check for update. ${n}`)
r.error(t.message||t.stack)}else r.error(`Update check failed: ${t.message||t.stack}`)})}r.info("Hot Module Replacement Enabled. Waiting for signal.")
function c(t,o){a=t
if(!u()){const t=e.hot.status()
if("idle"===t){r.info(`Checking for updates to the bundle with hmr hash ${s}.`)
return l(o)}["abort","fail"].indexOf(t)>=0&&r.warn(`Cannot apply update. A previous update ${t}ed. ${n}`)}}e.exports=function(e,t){s=e
return function e(t,o){const r=o(`${t}.hot-update.json`)
return r.readText().then(r=>{if(r){const t=JSON.parse(r),n=t.h
return e(n,o)}return Promise.resolve(t)}).catch(e=>Promise.reject(e))}(e,t).then(t=>{if(t!=e)return c(t,{})})}
if(t._isModuleLoadedForUI&&t._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/nativescript-dev-webpack/hot.js")){e.hot.accept()
e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/nativescript-dev-webpack/hot.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/nativescript-dev-webpack/load-application-css-regular.js":function(e,t,o){(function(t){const r=o("../node_modules/nativescript-dev-webpack/load-application-css.js")
e.exports=function(){r(function(){const e=o("./ sync ^\\.\\/app\\.(css|scss|less|sass)$")
t.registerWebpackModules(e)})}
if(t._isModuleLoadedForUI&&t._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/nativescript-dev-webpack/load-application-css-regular.js")){e.hot.accept()
e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/nativescript-dev-webpack/load-application-css-regular.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/nativescript-dev-webpack/load-application-css.js":function(e,t,o){(function(t){e.exports=function(e){const t=o("../node_modules/tns-core-modules/application/application.js")
o("../node_modules/tns-core-modules/ui/styling/style-scope.js")
e()
t.loadAppCss()}
if(t._isModuleLoadedForUI&&t._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/nativescript-dev-webpack/load-application-css.js")){e.hot.accept()
e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/nativescript-dev-webpack/load-application-css.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/nativescript-localstorage/localstorage.js":function(e,t,o){"use strict";(function(t){const r=o("../node_modules/tns-core-modules/file-system/file-system-access.js").FileSystemAccess
t.Storage||(t.Storage=function(){})
if(!t.localStorage){let e={},o=null
const n=function(){let t=new r,o=t.getDocumentsFolderPath()+"/localStorage.db"
try{t.writeText(o,JSON.stringify(e))}catch(e){console.log("localStorage: unable to write storage, error: ",e)}},i=function(){null!==o&&clearTimeout(o)
o=setTimeout(n,250)},a=function(){let t,o=new r,n=o.getDocumentsFolderPath()+"/localStorage.db"
if(o.fileExists(n))try{let r=o.readText(n)
t=JSON.parse(r)
e=t}catch(e){console.log("localStorage: error reading storage, Error: ",e)}}
a()
t.localStorage={getItem:function(t){return e.hasOwnProperty(t)?e[t]:null},key:function(t){const o=Object.keys(e)
return t>=o.length?null:o[t]},setItemObject:function(t,o){e[t]=o
i()},setItem:function(t,o){e[t]=null==o?null===o?"null":"undefined":o.toString()
i()},removeItem:function(t){if(e[t]){delete e[t]
i()}},clear:function(){e={}
i()}}
Object.defineProperty(t.localStorage,"length",{get:function(){return Object.keys(e).length},enumerable:!0,configurable:!0})}if(!t.sessionStorage){let e={}
t.sessionStorage={getItem:function(t){return e.hasOwnProperty(t)?e[t]:null},key:function(t){const o=Object.keys(e)
return t>=o.length?null:o[t]},setItemObject:function(t,o){e[t]=o},setItem:function(t,o){e[t]=null==o?null===o?"null":"undefined":o.toString()},removeItem:function(t){e[t]&&delete e[t]},clear:function(){e={}}}
Object.defineProperty(t.sessionStorage,"length",{get:function(){return Object.keys(e).length},enumerable:!0,configurable:!0})}e.exports=t.localStorage
if(t._isModuleLoadedForUI&&t._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/nativescript-localstorage/localstorage.js")){e.hot.accept()
e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/nativescript-localstorage/localstorage.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/nativescript-mapbox/mapbox.common.js":function(e,t,o){"use strict";(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/ui/core/view/view.js"),a=o("../node_modules/tns-core-modules/ui/content-view/content-view.js")
!function(e){e[e.DARK="dark"]="DARK"
e[e.OUTDOORS="outdoors"]="OUTDOORS"
e[e.LIGHT="light"]="LIGHT"
e[e.SATELLITE="satellite"]="SATELLITE"
e[e.SATELLITE_STREETS="satellite_streets"]="SATELLITE_STREETS"
e[e.STREETS="streets"]="STREETS"
e[e.TRAFFIC_DAY="traffic_day"]="TRAFFIC_DAY"
e[e.TRAFFIC_NIGHT="traffic_night"]="TRAFFIC_NIGHT"}(n=t.MapStyle||(t.MapStyle={}))
var s=function(){function e(){}e.merge=function(e,t){var o={}
for(var r in e)r in t&&"object"==typeof e[r]&&null!==r?o[r]=this.merge(e[r],t[r]):o[r]=e[r]
for(var r in t)r in o||(o[r]=t[r])
return o}
e.prototype.requestFineLocationPermission=function(){return new Promise(function(e){e()})}
e.prototype.hasFineLocationPermission=function(){return new Promise(function(e){e(!0)})}
e.defaults={style:n.STREETS.toString(),mapStyle:n.STREETS.toString(),margins:{left:0,right:0,top:0,bottom:0},zoomLevel:0,showUserLocation:!1,hideLogo:!1,hideAttribution:!0,hideCompass:!1,disableRotation:!1,disableScroll:!1,disableZoom:!1,disableTilt:!1,delay:0}
return e}()
t.MapboxCommon=s
var u=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.addMarkers=function(e){return this.mapbox.addMarkers(e,this.getNativeMapView())}
t.prototype.removeMarkers=function(e){return this.mapbox.removeMarkers(e,this.getNativeMapView())}
t.prototype.setOnMapClickListener=function(e){return this.mapbox.setOnMapClickListener(e,this.getNativeMapView())}
t.prototype.setOnMapLongClickListener=function(e){return this.mapbox.setOnMapLongClickListener(e,this.getNativeMapView())}
t.prototype.setOnScrollListener=function(e,t){return this.mapbox.setOnScrollListener(e,this.getNativeMapView())}
t.prototype.setOnFlingListener=function(e,t){return this.mapbox.setOnFlingListener(e,this.getNativeMapView())}
t.prototype.setOnCameraMoveListener=function(e,t){return this.mapbox.setOnCameraMoveListener(e,this.getNativeMapView())}
t.prototype.setOnCameraMoveCancelListener=function(e,t){return this.mapbox.setOnCameraMoveCancelListener(e,this.getNativeMapView())}
t.prototype.setOnCameraIdleListener=function(e,t){return this.mapbox.setOnCameraIdleListener(e,this.getNativeMapView())}
t.prototype.getViewport=function(){return this.mapbox.getViewport(this.getNativeMapView())}
t.prototype.setViewport=function(e){return this.mapbox.setViewport(e,this.getNativeMapView())}
t.prototype.setMapStyle=function(e){return this.mapbox.setMapStyle(e,this.getNativeMapView())}
t.prototype.getCenter=function(){return this.mapbox.getCenter(this.getNativeMapView())}
t.prototype.setCenter=function(e){return this.mapbox.setCenter(e,this.getNativeMapView())}
t.prototype.getZoomLevel=function(){return this.mapbox.getZoomLevel(this.getNativeMapView())}
t.prototype.setZoomLevel=function(e){return this.mapbox.setZoomLevel(e,this.getNativeMapView())}
t.prototype.getTilt=function(){return this.mapbox.getTilt(this.getNativeMapView())}
t.prototype.setTilt=function(e){return this.mapbox.setTilt(e,this.getNativeMapView())}
t.prototype.getUserLocation=function(){return this.mapbox.getUserLocation(this.getNativeMapView())}
t.prototype.trackUser=function(e){return this.mapbox.trackUser(e,this.getNativeMapView())}
t.prototype.queryRenderedFeatures=function(e){return this.mapbox.queryRenderedFeatures(e,this.getNativeMapView())}
t.prototype.addPolygon=function(e){return this.mapbox.addPolygon(e,this.getNativeMapView())}
t.prototype.removePolygons=function(e){return this.mapbox.removePolygons(e,this.getNativeMapView())}
t.prototype.addPolyline=function(e){return this.mapbox.addPolyline(e,this.getNativeMapView())}
t.prototype.removePolylines=function(e){return this.mapbox.removePolylines(e,this.getNativeMapView())}
t.prototype.animateCamera=function(e){return this.mapbox.animateCamera(e,this.getNativeMapView())}
t.prototype.destroy=function(){return this.mapbox.destroy(this.getNativeMapView())}
return t}(a.ContentView)
t.MapboxViewCommonBase=u
t.zoomLevelProperty=new i.Property({name:"zoomLevel"})
t.zoomLevelProperty.register(u)
t.accessTokenProperty=new i.Property({name:"accessToken"})
t.accessTokenProperty.register(u)
t.mapStyleProperty=new i.Property({name:"mapStyle"})
t.mapStyleProperty.register(u)
t.latitudeProperty=new i.Property({name:"latitude"})
t.latitudeProperty.register(u)
t.longitudeProperty=new i.Property({name:"longitude"})
t.longitudeProperty.register(u)
t.showUserLocationProperty=new i.Property({name:"showUserLocation",defaultValue:s.defaults.showUserLocation,valueConverter:i.booleanConverter})
t.showUserLocationProperty.register(u)
t.hideLogoProperty=new i.Property({name:"hideLogo",defaultValue:s.defaults.hideLogo,valueConverter:i.booleanConverter})
t.hideLogoProperty.register(u)
t.hideAttributionProperty=new i.Property({name:"hideAttribution",defaultValue:s.defaults.hideAttribution,valueConverter:i.booleanConverter})
t.hideAttributionProperty.register(u)
t.hideCompassProperty=new i.Property({name:"hideCompass",defaultValue:s.defaults.hideCompass,valueConverter:i.booleanConverter})
t.hideCompassProperty.register(u)
t.disableZoomProperty=new i.Property({name:"disableZoom",defaultValue:s.defaults.disableZoom,valueConverter:i.booleanConverter})
t.disableZoomProperty.register(u)
t.disableRotationProperty=new i.Property({name:"disableRotation",defaultValue:s.defaults.disableRotation,valueConverter:i.booleanConverter})
t.disableRotationProperty.register(u)
t.disableScrollProperty=new i.Property({name:"disableScroll",defaultValue:s.defaults.disableScroll,valueConverter:i.booleanConverter})
t.disableScrollProperty.register(u)
t.disableTiltProperty=new i.Property({name:"disableTilt",defaultValue:s.defaults.disableTilt,valueConverter:i.booleanConverter})
t.disableTiltProperty.register(u)
t.delayProperty=new i.Property({name:"delay"})
t.delayProperty.register(u)
var l=function(e){__extends(o,e)
function o(){var t=null!==e&&e.apply(this,arguments)||this
t.config={}
return t}o.prototype[t.zoomLevelProperty.setNative]=function(e){this.config.zoomLevel=+e}
o.prototype[t.mapStyleProperty.setNative]=function(e){this.config.style=e
this.config.mapStyle=e}
o.prototype[t.accessTokenProperty.setNative]=function(e){this.config.accessToken=e}
o.prototype[t.delayProperty.setNative]=function(e){this.config.delay=parseInt(""+e)}
o.prototype[t.latitudeProperty.setNative]=function(e){this.config.center=this.config.center||{}
this.config.center.lat=+e}
o.prototype[t.longitudeProperty.setNative]=function(e){this.config.center=this.config.center||{}
this.config.center.lng=+e}
o.prototype[t.showUserLocationProperty.setNative]=function(e){this.config.showUserLocation=e}
o.prototype[t.hideLogoProperty.setNative]=function(e){this.config.hideLogo=e}
o.prototype[t.hideAttributionProperty.setNative]=function(e){this.config.hideAttribution=e}
o.prototype[t.hideCompassProperty.setNative]=function(e){this.config.hideCompass=e}
o.prototype[t.disableZoomProperty.setNative]=function(e){this.config.disableZoom=e}
o.prototype[t.disableRotationProperty.setNative]=function(e){this.config.disableRotation=e}
o.prototype[t.disableScrollProperty.setNative]=function(e){this.config.disableScroll=e}
o.prototype[t.disableTiltProperty.setNative]=function(e){this.config.disableTilt=e}
o.mapReadyEvent="mapReady"
o.locationPermissionGrantedEvent="locationPermissionGranted"
o.locationPermissionDeniedEvent="locationPermissionDenied"
return o}(u)
t.MapboxViewBase=l
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/nativescript-mapbox/mapbox.common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/nativescript-mapbox/mapbox.common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/nativescript-mapbox/mapbox.js":function(e,t,o){"use strict";(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/utils/utils.js"),i=o("../node_modules/tns-core-modules/application/application.js"),a=o("../node_modules/tns-core-modules/ui/frame/frame.js"),s=o("../node_modules/tns-core-modules/file-system/file-system.js"),u=o("../node_modules/tns-core-modules/color/color.js"),l=o("../node_modules/tns-core-modules/http/http.js"),c=o("../node_modules/nativescript-mapbox/mapbox.common.js")
t.MapStyle=c.MapStyle
var d,p={},f=[],h=[],m=[],y=[],g=null,v=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.getNativeMapView=function(){return this.mapView}
t.prototype.createNativeView=function(){var e=this,t=new android.widget.FrameLayout(this._context)
setTimeout(function(){e.initMap()},0)
return t}
t.prototype.disposeNativeView=function(){g&&g.onStop()}
t.prototype.initMap=function(){var e=this
if(!this.mapView&&this.config.accessToken){this.mapbox=new j
var t=j.merge(this.config,j.defaults)
com.mapbox.mapboxsdk.Mapbox.getInstance(this._context,t.accessToken)
setTimeout(function(){e.mapView=new com.mapbox.mapboxsdk.maps.MapView(e._context,_(t))
e.mapView.onCreate(null)
e.mapView.getMapAsync(new com.mapbox.mapboxsdk.maps.OnMapReadyCallback({onMapReady:function(o){e.mapView.mapboxMap=o
m=[]
h=[]
f=[]
t.showUserLocation&&e.mapbox.requestFineLocationPermission().then(function(){setTimeout(function(){P(e.mapView,o)},1e3)
e.notify({eventName:c.MapboxViewBase.locationPermissionGrantedEvent,object:e,map:e,android:e.mapView})}).catch(function(t){e.notify({eventName:c.MapboxViewBase.locationPermissionDeniedEvent,object:e,map:e,android:e.mapView})})
e.notify({eventName:c.MapboxViewBase.mapReadyEvent,object:e,map:e,android:e.mapView})}}))
e.nativeView.addView(e.mapView)},t.delay?t.delay:0)}}
return t}(c.MapboxViewBase)
t.MapboxView=v
var b=function(e){var t=com.mapbox.mapboxsdk.constants.Style
if(/^mapbox:\/\/styles/.test(e)||/^http:\/\//.test(e)||/^https:\/\//.test(e))return e
if(/^~\//.test(e)){e=e.replace(/^~\//,"asset://app/")
return e}return e===c.MapStyle.LIGHT||e===c.MapStyle.LIGHT.toString()?t.LIGHT:e===c.MapStyle.DARK||e===c.MapStyle.DARK.toString()?t.DARK:e===c.MapStyle.OUTDOORS||e===c.MapStyle.OUTDOORS.toString()?t.OUTDOORS:e===c.MapStyle.SATELLITE||e===c.MapStyle.SATELLITE.toString()?t.SATELLITE:e===c.MapStyle.SATELLITE_STREETS||e===c.MapStyle.SATELLITE_STREETS.toString()?t.SATELLITE_STREETS:e===c.MapStyle.TRAFFIC_DAY||e===c.MapStyle.TRAFFIC_DAY.toString()?t.TRAFFIC_DAY:e===c.MapStyle.TRAFFIC_NIGHT||e===c.MapStyle.TRAFFIC_NIGHT.toString()?t.TRAFFIC_NIGHT:t.MAPBOX_STREETS},_=function(e){var t=(new com.mapbox.mapboxsdk.maps.MapboxMapOptions).styleUrl(b(e.style)).compassEnabled(!e.hideCompass).rotateGesturesEnabled(!e.disableRotation).scrollGesturesEnabled(!e.disableScroll).tiltGesturesEnabled(!e.disableTilt).zoomGesturesEnabled(!e.disableZoom).attributionEnabled(!e.hideAttribution).logoEnabled(!e.hideLogo)
e.zoomLevel&&!e.center&&(e.center={lat:48.858093,lng:2.294694})
if(e.center&&e.center.lat&&e.center.lng){var o=(new com.mapbox.mapboxsdk.camera.CameraPosition.Builder).zoom(e.zoomLevel).target(new com.mapbox.mapboxsdk.geometry.LatLng(e.center.lat,e.center.lng))
t.camera(o.build())}return t},w=function(){var e=android.os.Build.VERSION.SDK_INT<23
e||(e=android.content.pm.PackageManager.PERMISSION_GRANTED===android.support.v4.content.ContextCompat.checkSelfPermission(i.android.foregroundActivity,android.Manifest.permission.ACCESS_FINE_LOCATION))
return e},P=function(e,t){g=new com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerPlugin(e,t)},C=function(e){for(var t in f){var o=f[t]
if(o.lat==e.getPosition().getLatitude()&&o.lng==e.getPosition().getLongitude()&&o.title==e.getTitle()&&o.subtitle==e.getSnippet())return o}},S=function(e){return new Promise(function(t,o){if(y[e.icon]){e.iconDownloaded=y[e.icon]
t(e)}else l.getImage(e.icon).then(function(o){e.iconDownloaded=o.android
y[e.icon]=e.iconDownloaded
t(e)},function(o){console.log("Download failed for ' "+e.icon+"' with error: "+o)
t(e)})})},T=function(e,t){if(e)if(Array.isArray(e)){var o=t||p
if(o&&o.mapboxMap){o.mapboxMap.setOnMarkerClickListener(new com.mapbox.mapboxsdk.maps.MapboxMap.OnMarkerClickListener({onMarkerClick:function(e){var t=C(e)
t&&t.onTap&&t.onTap(t)
return!1}}))
o.mapboxMap.setOnInfoWindowClickListener(new com.mapbox.mapboxsdk.maps.MapboxMap.OnInfoWindowClickListener({onInfoWindowClick:function(e){var t=C(e)
t&&t.onCalloutTap&&t.onCalloutTap(t)
return!0}}))
var r=com.mapbox.mapboxsdk.annotations.IconFactory.getInstance(i.android.context);(function(e){for(var t=[],o=[],r=0;r<e.length;r++){var n=e[r]
if(n.icon&&n.icon.startsWith("http")){var i=S(n).then(function(e){o.push(e)})
t.push(i)}else o.push(n)}return Promise.all(t).then(function(e){return o})})(e).then(function(e){var t=function(t){var i=e[t]
f.push(i)
var a=new com.mapbox.mapboxsdk.annotations.MarkerOptions
a.setTitle(i.title)
a.setSnippet(i.subtitle)
a.setPosition(new com.mapbox.mapboxsdk.geometry.LatLng(parseFloat(i.lat),parseFloat(i.lng)))
if(i.icon)if(i.icon.startsWith("res://")){var u=i.icon.substring(6),l=n.ad.getApplicationContext().getResources(),c=l.getIdentifier(u,"drawable",n.ad.getApplication().getPackageName())
0===c?console.log("No icon found for this device density for icon ' "+i.icon+"'. Falling back to the default icon."):a.setIcon(r.fromResource(c))}else i.icon.startsWith("http")?null!==i.iconDownloaded&&a.setIcon(r.fromBitmap(i.iconDownloaded)):console.log("Please use res://resourcename, http(s)://imageurl or iconPath to use a local path")
else if(i.iconPath){var d=s.knownFolders.currentApp().path+"/"+i.iconPath
s.File.exists(d)?a.setIcon(r.fromPath(d)):console.log("Marker icon not found, using the default instead. Requested full path: '\" + "+d+"'.")}i.android=o.mapboxMap.addMarker(a)
i.selected&&o.mapboxMap.selectMarker(i.android)
i.update=function(e){for(var t in f){var r=f[t]
if(i.id===r.id){void 0!==e.onTap&&(r.onTap=e.onTap)
void 0!==e.onCalloutTap&&(r.onCalloutTap=e.onCalloutTap)
if(void 0!==e.title){r.title=e.title
r.android.setTitle(e.title)}if(void 0!==e.subtitle){r.subtitle=e.title
r.android.setSnippet(e.subtitle)}if(e.lat&&e.lng){r.lat=e.lat
r.lng=e.lng
r.android.setPosition(new com.mapbox.mapboxsdk.geometry.LatLng(parseFloat(e.lat),parseFloat(e.lng)))}e.selected&&o.mapboxMap.selectMarker(r.android)}}}}
for(var i in e)t(i)})}}else console.log("markers must be passed as an Array: [{title:'foo'}]")
else console.log("No markers passed")},x=function(e){var t=e.getMetadata(),o=new java.lang.String(t,"UTF-8"),r=new org.json.JSONObject(o)
return r.getString("name")},I=function(){p.offlineManager||(p.offlineManager=com.mapbox.mapboxsdk.offline.OfflineManager.getInstance(i.android.context))
return p.offlineManager},j=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.hasFineLocationPermission=function(){return new Promise(function(e,t){try{e(w())}catch(e){console.log("Error in mapbox.hasFineLocationPermission: "+e)
t(e)}})}
t.prototype.requestFineLocationPermission=function(){return new Promise(function(e,t){if(w())e()
else{var o=function(r){if(111===r.requestCode){for(var n=0;n<r.permissions.length;n++)if(r.grantResults[n]===android.content.pm.PackageManager.PERMISSION_DENIED){t("Permission denied")
return}i.android.off(i.AndroidApplication.activityRequestPermissionsEvent,o)
e()}}
i.android.on(i.AndroidApplication.activityRequestPermissionsEvent,o)
android.support.v4.app.ActivityCompat.requestPermissions(i.android.foregroundActivity,[android.Manifest.permission.ACCESS_FINE_LOCATION],111)}})}
t.prototype.show=function(e){var o=this
return new Promise(function(r,s){try{setTimeout(function(){var u=t.merge(e,t.defaults)
if(void 0!==u.accessToken){if(p.mapView){var l=p.mapView.getParent()
null!==l&&l.removeView(p.mapView)}d=u.accessToken
com.mapbox.mapboxsdk.Mapbox.getInstance(i.android.context,d)
var c=_(u)
p.mapView=new com.mapbox.mapboxsdk.maps.MapView(i.android.context,c)
p.mapView.onCreate(null)
p.mapView.getMapAsync(new com.mapbox.mapboxsdk.maps.OnMapReadyCallback({onMapReady:function(e){p.mapboxMap=e
p.mapView.mapboxMap=e
h=[]
m=[]
f=[]
T(u.markers,p.mapView)
u.showUserLocation&&o.requestFineLocationPermission().then(function(){P(p.mapView,e)})
r({android:p.mapView})}}))
var y=a.topmost(),g=i.android.currentContext,v=new android.widget.FrameLayout(g),b=n.layout.getDisplayDensity(),w=u.margins.left*b,C=u.margins.right*b,S=u.margins.top*b,x=u.margins.bottom*b,I=y.currentPage.android.getWidth(),j=y.currentPage.android.getHeight(),L=new android.widget.FrameLayout.LayoutParams(I-w-C,j-S-x)
L.setMargins(w,S,C,x)
p.mapView.setLayoutParams(L)
v.addView(p.mapView)
y.currentPage.android.getParent()?y.currentPage.android.getParent().addView(v):y.currentPage.android.addView(v)}else s("Please set the 'accessToken' parameter")},200)}catch(e){console.log("Error in mapbox.show: "+e)
s(e)}})}
t.prototype.hide=function(){return new Promise(function(e,t){try{if(p.mapView){var o=p.mapView.getParent()
null!==o&&o.setVisibility(android.view.View.INVISIBLE)}e()}catch(e){console.log("Error in mapbox.hide: "+e)
t(e)}})}
t.prototype.unhide=function(){return new Promise(function(e,t){try{if(p.mapView){p.mapView.getParent().setVisibility(android.view.View.VISIBLE)
e()}else t("No map found")}catch(e){console.log("Error in mapbox.unhide: "+e)
t(e)}})}
t.prototype.destroy=function(e){return new Promise(function(t,o){var r=e||p
if(r.mapView){var n=r.mapView.getParent()
null!==n&&n.removeView(r.mapView)
g&&g.onStop()
r.mapView=null
r.mapboxMap=null
p={}}t()})}
t.prototype.setMapStyle=function(e,t){return new Promise(function(o,r){try{var n=t||p,i=b(e)
n.mapboxMap.setStyleUrl(i)
o()}catch(e){console.log("Error in mapbox.setMapStyle: "+e)
r(e)}})}
t.prototype.addMarkers=function(e,t){return new Promise(function(o,r){try{T(e,t)
o()}catch(e){console.log("Error in mapbox.addMarkers: "+e)
r(e)}})}
t.prototype.removeMarkers=function(e,t){return new Promise(function(o,r){try{!function(e,t){var o=t||p
if(o&&o.mapboxMap){for(var r in f){var n=f[r];(!e||n&&n.id&&e.indexOf(n.id)>-1)&&n&&n.android&&o.mapboxMap.removeAnnotation(n.android)}f=e?f.filter(function(t){return-1===e.indexOf(t.id)}):[]}}(e,t)
o()}catch(e){console.log("Error in mapbox.removeMarkers: "+e)
r(e)}})}
t.prototype.setCenter=function(e,t){return new Promise(function(o,r){try{var n=t||p,i=(new com.mapbox.mapboxsdk.camera.CameraPosition.Builder).target(new com.mapbox.mapboxsdk.geometry.LatLng(e.lat,e.lng)).build()
!0===e.animated?n.mapboxMap.animateCamera(com.mapbox.mapboxsdk.camera.CameraUpdateFactory.newCameraPosition(i),1e3,null):n.mapboxMap.setCameraPosition(i)
o()}catch(e){console.log("Error in mapbox.setCenter: "+e)
r(e)}})}
t.prototype.getCenter=function(e){return new Promise(function(t,o){try{var r=e||p,n=r.mapboxMap.getCameraPosition().target
t({lat:n.getLatitude(),lng:n.getLongitude()})}catch(e){console.log("Error in mapbox.getCenter: "+e)
o(e)}})}
t.prototype.setZoomLevel=function(e,t){return new Promise(function(o,r){try{var n=t||p,i=void 0===e.animated||e.animated,a=e.level
if(a>=0&&a<=20){var s=com.mapbox.mapboxsdk.camera.CameraUpdateFactory.zoomTo(a)
i?n.mapboxMap.easeCamera(s):n.mapboxMap.moveCamera(s)
o()}else r("invalid zoomlevel, use any double value from 0 to 20 (like 8.3)")}catch(e){console.log("Error in mapbox.setZoomLevel: "+e)
r(e)}})}
t.prototype.getZoomLevel=function(e){return new Promise(function(t,o){try{var r=e||p,n=r.mapboxMap.getCameraPosition().zoom
t(n)}catch(e){console.log("Error in mapbox.getZoomLevel: "+e)
o(e)}})}
t.prototype.setTilt=function(e,t){return new Promise(function(o,r){try{var n=t||p,i=e.tilt?e.tilt:30,a=(new com.mapbox.mapboxsdk.camera.CameraPosition.Builder).tilt(i),s=com.mapbox.mapboxsdk.camera.CameraUpdateFactory.newCameraPosition(a.build()),u=e.duration?e.duration:5e3
n.mapboxMap.easeCamera(s,u)
setTimeout(function(){o()},u)}catch(e){console.log("Error in mapbox.setTilt: "+e)
r(e)}})}
t.prototype.getTilt=function(e){return new Promise(function(t,o){try{var r=e||p,n=r.mapboxMap.getCameraPosition().tilt
t(n)}catch(e){console.log("Error in mapbox.getTilt: "+e)
o(e)}})}
t.prototype.getUserLocation=function(){return new Promise(function(e,t){try{var o=g?g.getLocationEngine().getLastLocation():null
null===o?t("Location not available"):e({location:{lat:o.getLatitude(),lng:o.getLongitude()},speed:o.getSpeed()})}catch(e){console.log("Error in mapbox.getUserLocation: "+e)
t(e)}})}
t.prototype.queryRenderedFeatures=function(e,t){return new Promise(function(o,r){try{var n=t||p,i=e.point
if(void 0===i){r("Please set the 'point' parameter")
return}var a=new com.mapbox.mapboxsdk.geometry.LatLng(e.point.lat,e.point.lng),s=n.mapboxMap.getProjection().toScreenLocation(a)
if(n.mapboxMap.queryRenderedFeatures){for(var u=n.mapboxMap.queryRenderedFeatures(s,null,e.layerIds),l=[],c=0;c<u.size();c++){var d=u.get(c)
l.push({id:d.id(),type:d.type(),properties:JSON.parse(d.properties().toString())})}o(l)}else r("Feature not supported by this Mapbox version")}catch(e){console.log("Error in mapbox.queryRenderedFeatures: "+e)
r(e)}})}
t.prototype.addPolygon=function(e,o){return new Promise(function(r,n){try{var i=o||p,a=e.points
if(void 0===a){n("Please set the 'points' parameter")
return}var s=new com.mapbox.mapboxsdk.annotations.PolygonOptions
for(var u in a){var l=a[u]
s.add(new com.mapbox.mapboxsdk.geometry.LatLng(l.lat,l.lng))}s.fillColor(t.getAndroidColor(e.fillColor))
s.alpha(void 0===e.fillOpacity?1:e.fillOpacity)
e.strokeColor&&s.strokeColor(t.getAndroidColor(e.strokeColor))
m.push({id:e.id||(new Date).getTime(),android:i.mapboxMap.addPolygon(s)})
r()}catch(e){console.log("Error in mapbox.addPolygon: "+e)
n(e)}})}
t.prototype.addPolyline=function(e,o){return new Promise(function(r,n){try{var i=o||p,a=e.points
if(void 0===a){n("Please set the 'points' parameter")
return}var s=new com.mapbox.mapboxsdk.annotations.PolylineOptions
s.width(e.width||5)
s.color(t.getAndroidColor(e.color))
s.alpha(void 0===e.opacity?1:e.opacity)
for(var u in a){var l=a[u]
s.add(new com.mapbox.mapboxsdk.geometry.LatLng(l.lat,l.lng))}h.push({id:e.id||(new Date).getTime(),android:i.mapboxMap.addPolyline(s)})
r()}catch(e){console.log("Error in mapbox.addPolyline: "+e)
n(e)}})}
t.prototype.removePolygons=function(e,t){return new Promise(function(o,r){try{var n=t||p
for(var i in m){var a=m[i];(!e||a.id&&e.indexOf(a.id)>-1)&&n.mapboxMap.removePolygon(a.android)}o()}catch(e){console.log("Error in mapbox.removePolygons: "+e)
r(e)}})}
t.prototype.removePolylines=function(e,t){return new Promise(function(o,r){try{var n=t||p
for(var i in h){var a=h[i];(!e||a.id&&e.indexOf(a.id)>-1)&&n.mapboxMap.removePolyline(a.android)}o()}catch(e){console.log("Error in mapbox.removePolylines: "+e)
r(e)}})}
t.prototype.animateCamera=function(e,t){return new Promise(function(o,r){try{var n=t||p,i=e.target
if(void 0===i){r("Please set the 'target' parameter")
return}var a=new com.mapbox.mapboxsdk.camera.CameraPosition.Builder(n.mapboxMap.getCameraPosition()).target(new com.mapbox.mapboxsdk.geometry.LatLng(i.lat,i.lng))
e.bearing&&a.bearing(e.bearing)
e.tilt&&a.tilt(e.tilt)
e.zoomLevel&&a.zoom(e.zoomLevel)
var s=e.duration?e.duration:1e4
n.mapboxMap.animateCamera(com.mapbox.mapboxsdk.camera.CameraUpdateFactory.newCameraPosition(a.build()),s,null)
setTimeout(function(){o()},s)}catch(e){console.log("Error in mapbox.animateCamera: "+e)
r(e)}})}
t.prototype.setOnMapClickListener=function(e,t){return new Promise(function(o,r){try{var n=t||p
if(!n){r("No map has been loaded")
return}n.mapboxMap.addOnMapClickListener(new com.mapbox.mapboxsdk.maps.MapboxMap.OnMapClickListener({onMapClick:function(t){e({lat:t.getLatitude(),lng:t.getLongitude()})}}))
o()}catch(e){console.log("Error in mapbox.setOnMapClickListener: "+e)
r(e)}})}
t.prototype.setOnMapLongClickListener=function(e,t){return new Promise(function(o,r){try{var n=t||p
if(!n){r("No map has been loaded")
return}n.mapboxMap.addOnMapLongClickListener(new com.mapbox.mapboxsdk.maps.MapboxMap.OnMapLongClickListener({onMapLongClick:function(t){e({lat:t.getLatitude(),lng:t.getLongitude()})}}))
o()}catch(e){console.log("Error in mapbox.setOnMapLongClickListener: "+e)
r(e)}})}
t.prototype.setOnScrollListener=function(e,t){return new Promise(function(o,r){try{var n=t||p
if(!n){r("No map has been loaded")
return}n.mapboxMap.addOnMoveListener(new com.mapbox.mapboxsdk.maps.MapboxMap.OnMoveListener({onMoveBegin:function(e){},onMove:function(t){var o=n.mapboxMap.getCameraPosition().target
e({lat:o.getLatitude(),lng:o.getLongitude()})},onMoveEnd:function(e){}}))
o()}catch(e){console.log("Error in mapbox.setOnScrollListener: "+e)
r(e)}})}
t.prototype.setOnFlingListener=function(e,t){return new Promise(function(o,r){try{var n=t||p
if(!n){r("No map has been loaded")
return}n.mapboxMap.addOnFlingListener(new com.mapbox.mapboxsdk.maps.MapboxMap.OnFlingListener({onFling:function(){e()}}))
o()}catch(e){console.log("Error in mapbox.setOnFlingListener: "+e)
r(e)}})}
t.prototype.setOnCameraMoveListener=function(e,t){return new Promise(function(o,r){try{var n=t||p
if(!n){r("No map has been loaded")
return}n.mapboxMap.addOnCameraMoveListener(new com.mapbox.mapboxsdk.maps.MapboxMap.OnCameraMoveListener({onCameraMove:function(){e()}}))
o()}catch(e){console.log("Error in mapbox.setOnCameraMoveListener: "+e)
r(e)}})}
t.prototype.setOnCameraMoveCancelListener=function(e,t){return new Promise(function(o,r){try{var n=t||p
if(!n){r("No map has been loaded")
return}n.mapboxMap.addOnCameraMoveCancelListener(new com.mapbox.mapboxsdk.maps.MapboxMap.OnCameraMoveCanceledListener({onCameraMoveCanceled:function(){e()}}))
o()}catch(e){console.log("Error in mapbox.setOnCameraMoveCancelListener: "+e)
r(e)}})}
t.prototype.setOnCameraIdleListener=function(e,t){return new Promise(function(o,r){try{var n=t||p
if(!n){r("No map has been loaded")
return}n.mapboxMap.addOnCameraIdleListener(new com.mapbox.mapboxsdk.maps.MapboxMap.OnCameraIdleListener({onCameraIdle:function(){e()}}))
o()}catch(e){console.log("Error in mapbox.setOnCameraIdleListener: "+e)
r(e)}})}
t.prototype.getViewport=function(e){return new Promise(function(t,o){try{var r=e||p
if(!r){o("No map has been loaded")
return}var n=r.mapboxMap.getProjection().getVisibleRegion().latLngBounds
t({bounds:{north:n.getLatNorth(),east:n.getLonEast(),south:n.getLatSouth(),west:n.getLonWest()},zoomLevel:r.mapboxMap.getCameraPosition().zoom})}catch(e){console.log("Error in mapbox.getViewport: "+e)
o(e)}})}
t.prototype.setViewport=function(e,t){return new Promise(function(o,r){try{var n=t||p
if(!n){r("No map has been loaded")
return}var i=(new com.mapbox.mapboxsdk.geometry.LatLngBounds.Builder).include(new com.mapbox.mapboxsdk.geometry.LatLng(e.bounds.north,e.bounds.east)).include(new com.mapbox.mapboxsdk.geometry.LatLng(e.bounds.south,e.bounds.west)).build(),a=void 0===e.animated||e.animated,s=a?1e3:0
n.mapboxMap.easeCamera(com.mapbox.mapboxsdk.camera.CameraUpdateFactory.newLatLngBounds(i,25),s)
setTimeout(function(){o()},s)}catch(e){console.log("Error in mapbox.setViewport: "+e)
r(e)}})}
t.prototype.downloadOfflineRegion=function(e){return new Promise(function(t,o){try{var r=b(e.style),a=(new com.mapbox.mapboxsdk.geometry.LatLngBounds.Builder).include(new com.mapbox.mapboxsdk.geometry.LatLng(e.bounds.north,e.bounds.east)).include(new com.mapbox.mapboxsdk.geometry.LatLng(e.bounds.south,e.bounds.west)).build(),s=n.layout.getDisplayDensity(),u=new com.mapbox.mapboxsdk.offline.OfflineTilePyramidRegionDefinition(r,a,e.minZoom,e.maxZoom,s),l='{name:"'+e.name+'"}',c=new java.lang.String(l),p=c.getBytes()
if(!d&&!e.accessToken){o("First show a map, or pass in an 'accessToken' param")
return}if(!d){d=e.accessToken
com.mapbox.mapboxsdk.Mapbox.getInstance(i.android.context,d)}I().createOfflineRegion(u,p,new com.mapbox.mapboxsdk.offline.OfflineManager.CreateOfflineRegionCallback({onError:function(e){o(e)},onCreate:function(r){r.setDownloadState(com.mapbox.mapboxsdk.offline.OfflineRegion.STATE_ACTIVE)
r.setObserver(new com.mapbox.mapboxsdk.offline.OfflineRegion.OfflineRegionObserver({onStatusChanged:function(o){var r=o.getRequiredResourceCount()>=0?100*o.getCompletedResourceCount()/o.getRequiredResourceCount():0
e.onProgress&&e.onProgress({name:e.name,completedSize:o.getCompletedResourceSize(),completed:o.getCompletedResourceCount(),expected:o.getRequiredResourceCount(),percentage:Math.round(100*r)/100,complete:o.isComplete()})
o.isComplete()?t():o.isRequiredResourceCountPrecise()},onError:function(e){o(e.getMessage()+", reason: "+e.getReason())},mapboxTileCountLimitExceeded:function(e){console.log("dl mapboxTileCountLimitExceeded: "+e)}}))}}))}catch(e){console.log("Error in mapbox.downloadOfflineRegion: "+e)
o(e)}})}
t.prototype.listOfflineRegions=function(e){return new Promise(function(t,o){try{if(!d&&!e.accessToken){o("First show a map, or pass in an 'accessToken' param")
return}if(!d){d=e.accessToken
com.mapbox.mapboxsdk.Mapbox.getInstance(i.android.context,d)}I().listOfflineRegions(new com.mapbox.mapboxsdk.offline.OfflineManager.ListOfflineRegionsCallback({onError:function(e){o(e)},onList:function(e){var o=[]
if(null!==e)for(var r=0;r<e.length;r++){var n=e[r],i=x(n),a=n.getDefinition(),s=a.getBounds()
o.push({name:i,style:a.getStyleURL(),minZoom:a.getMinZoom(),maxZoom:a.getMaxZoom(),bounds:{north:s.getLatNorth(),east:s.getLonEast(),south:s.getLatSouth(),west:s.getLonWest()}})}t(o)}}))}catch(e){console.log("Error in mapbox.listOfflineRegions: "+e)
o(e)}})}
t.prototype.deleteOfflineRegion=function(e){return new Promise(function(t,o){try{if(!e||!e.name){o("Pass in the 'name' param")
return}I().listOfflineRegions(new com.mapbox.mapboxsdk.offline.OfflineManager.ListOfflineRegionsCallback({onError:function(e){o(e)},onList:function(r){var n=!1
if(null!==r)for(var i=0;i<r.length;i++){var a=r[i],s=x(a)
if(s===e.name){n=!0
a.delete(new com.mapbox.mapboxsdk.offline.OfflineRegion.OfflineRegionDeleteCallback({onError:function(e){o(e)},onDelete:function(){t()}}))}}n||o("Region not found")}}))}catch(e){console.log("Error in mapbox.listOfflineRegions: "+e)
o(e)}})}
t.prototype.addExtrusion=function(e,t){return new Promise(function(e,o){try{var r=t||p,n=new com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer("3d-buildings","composite")
n.setSourceLayer("building")
n.setFilter(com.mapbox.mapboxsdk.style.expressions.Expression.eq(com.mapbox.mapboxsdk.style.expressions.Expression.get("extrude"),"true"))
n.setMinZoom(15)
n.setProperties(com.mapbox.mapboxsdk.style.layers.PropertyFactory.fillExtrusionColor(android.graphics.Color.LTGRAY),com.mapbox.mapboxsdk.style.layers.PropertyFactory.fillExtrusionHeight(com.mapbox.mapboxsdk.style.functions.Function.property("height",new com.mapbox.mapboxsdk.style.functions.stops.IdentityStops)),com.mapbox.mapboxsdk.style.layers.PropertyFactory.fillExtrusionBase(com.mapbox.mapboxsdk.style.functions.Function.property("min_height",new com.mapbox.mapboxsdk.style.functions.stops.IdentityStops)),com.mapbox.mapboxsdk.style.layers.PropertyFactory.fillExtrusionOpacity(new java.lang.Float(.6)))
r.mapboxMap.addLayer(n)
e()}catch(e){console.log("Error in mapbox.addExtrusion: "+e)
o(e)}})}
t.prototype.addGeoJsonClustered=function(e,t){return new Promise(function(o,r){try{var n=t||p
n.mapboxMap.addSource(new com.mapbox.mapboxsdk.style.sources.GeoJsonSource(e.name,new java.net.URL(e.data),(new com.mapbox.mapboxsdk.style.sources.GeoJsonOptions).withCluster(!0).withClusterMaxZoom(e.clusterMaxZoom||13).withClusterRadius(e.clusterRadius||40)))
var i=[]
if(e.clusters)for(var a=0;a<e.clusters.length;a++)i.push([e.clusters[a].points,new u.Color(e.clusters[a].color).android])
else{i.push([150,new u.Color("red").android])
i.push([20,new u.Color("green").android])
i.push([0,new u.Color("blue").android])}var s=new com.mapbox.mapboxsdk.style.layers.SymbolLayer("unclustered-points",e.name)
s.setProperties([com.mapbox.mapboxsdk.style.layers.PropertyFactory.circleColor(new u.Color("red").android),com.mapbox.mapboxsdk.style.layers.PropertyFactory.circleRadius(new java.lang.Float(16)),com.mapbox.mapboxsdk.style.layers.PropertyFactory.circleBlur(new java.lang.Float(.2))])
console.log(com.mapbox.mapboxsdk.style.expressions.Expression.get("cluster"))
s.setFilter(com.mapbox.mapboxsdk.style.expressions.Expression.neq(com.mapbox.mapboxsdk.style.expressions.Expression.get("cluster"),!0))
n.mapboxMap.addLayer(s)
for(a=0;a<i.length;a++){var l=new com.mapbox.mapboxsdk.style.layers.CircleLayer("cluster-"+a,e.name)
l.setProperties([com.mapbox.mapboxsdk.style.layers.PropertyFactory.circleColor(i[a][1]),com.mapbox.mapboxsdk.style.layers.PropertyFactory.circleRadius(new java.lang.Float(22)),com.mapbox.mapboxsdk.style.layers.PropertyFactory.circleBlur(new java.lang.Float(.2))])
var c=com.mapbox.mapboxsdk.style.expressions.Expression.toNumber(com.mapbox.mapboxsdk.style.expressions.Expression.get("point_count"))
l.setFilter(0===a?com.mapbox.mapboxsdk.style.expressions.Expression.gte(c,com.mapbox.mapboxsdk.style.expressions.Expression.literal(java.lang.Integer.valueOf(i[a][0]))):com.mapbox.mapboxsdk.style.expressions.Expression.all([com.mapbox.mapboxsdk.style.expressions.Expression.gte(c,com.mapbox.mapboxsdk.style.expressions.Expression.literal(java.lang.Integer.valueOf(i[a][0]))),com.mapbox.mapboxsdk.style.expressions.Expression.lt(c,com.mapbox.mapboxsdk.style.expressions.Expression.literal(java.lang.Integer.valueOf(i[a-1][0])))]))
n.mapboxMap.addLayer(l)}var d=new com.mapbox.mapboxsdk.style.layers.SymbolLayer("count",e.name)
d.setProperties([com.mapbox.mapboxsdk.style.layers.PropertyFactory.textField(com.mapbox.mapboxsdk.style.expressions.Expression.get("point_count")),com.mapbox.mapboxsdk.style.layers.PropertyFactory.textSize(new java.lang.Float(12)),com.mapbox.mapboxsdk.style.layers.PropertyFactory.textColor(new u.Color("white").android)])
n.mapboxMap.addLayer(d)
o()}catch(e){console.log("Error in mapbox.addGeoJsonClustered: "+e)
r(e)}})}
t.prototype.trackUser=function(e,t){return new Promise(function(o,r){try{var n=t||p
if(!n){r("No map has been loaded")
return}if(!g){r("The map is not currently showing the user location")
return}g.setRenderMode((i=e.mode,a=com.mapbox.mapboxsdk.plugins.locationlayer.modes.RenderMode,"FOLLOW_WITH_HEADING"===i?a.COMPASS:"FOLLOW_WITH_COURSE"===i?a.GPS:a.NORMAL))
g.setCameraMode(function(e){var t=com.mapbox.mapboxsdk.plugins.locationlayer.modes.CameraMode
return"FOLLOW"===e?t.TRACKING:"FOLLOW_WITH_HEADING"===e?t.TRACKING_COMPASS:"FOLLOW_WITH_COURSE"===e?t.TRACKING_COMPASS:t.NONE}(e.mode))
o()}catch(e){console.log("Error in mapbox.trackUser: "+e)
r(e)}var i,a})}
t.getAndroidColor=function(e){var t
t=e&&u.Color.isValid(e)?new u.Color(""+e).android:new u.Color("#000").android
return t}
return t}(c.MapboxCommon)
t.Mapbox=j
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/nativescript-mapbox/mapbox.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/nativescript-mapbox/mapbox.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/application/application-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
o("../node_modules/tns-core-modules/globals/globals.js")
var n=o("../node_modules/tns-core-modules/data/observable/observable.js")
t.Observable=n.Observable
var i=o("../node_modules/tns-core-modules/profiling/profiling.js"),a=new n.Observable,s=!1
a.on("launch",function e(){s=!0
a.off("launch",e)})
i.level()>0&&a.on("displayed",function(){var e=i.uptime(),t=i.time(),o=t-e
i.trace("Displayed in "+e.toFixed(2)+"ms",o,t)})
t.hasLaunched=function(){return s}
t.launchEvent="launch"
t.suspendEvent="suspend"
t.displayedEvent="displayed"
t.resumeEvent="resume"
t.exitEvent="exit"
t.lowMemoryEvent="lowMemory"
t.uncaughtErrorEvent="uncaughtError"
t.discardedErrorEvent="discardedError"
t.orientationChangedEvent="orientationChanged"
var u,l="./app.css",c={}
t.getResources=function(){return c}
t.setResources=function(e){c=e}
t.android=void 0
t.ios=void 0
t.on=a.on.bind(a)
t.off=a.off.bind(a)
t.notify=a.notify.bind(a)
t.hasListeners=a.hasListeners.bind(a)
t.setApplication=function(e){u=e}
t.livesync=function(e,t){a.notify({eventName:"livesync",object:u})
var o=r.__onLiveSyncCore,n=!1
if(t&&t.path){var i=d(),s=i.substring(0,i.lastIndexOf(".")+1)
n=["css","scss"].some(function(e){return t.path===s.concat(e)})}n&&e?e._onCssStateChange():o&&o(t)}
t.setCssFileName=function(e){l=e
a.notify({eventName:"cssChanged",object:u,cssFile:e})}
function d(){return l}t.getCssFileName=d
t.loadAppCss=function(){try{a.notify({eventName:"loadAppCss",object:u,cssFile:d()})}catch(e){throw new Error("The file "+d()+" couldn't be loaded! You may need to register it inside ./app/vendor.ts.")}}
t.addCss=function(e){a.notify({eventName:"cssChanged",object:u,cssText:e})}
r.__onUncaughtError=function(e){a.notify({eventName:t.uncaughtErrorEvent,object:u,android:e,ios:e,error:e})}
r.__onDiscardedError=function(e){a.notify({eventName:t.discardedErrorEvent,object:u,error:e})}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/application/application-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/application/application-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/application/application.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/application/application-common.js"),i=o("../node_modules/tns-core-modules/profiling/profiling.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/application/application-common.js"))
var a="activityCreated",s="activityDestroyed",u="activityStarted",l="activityPaused",c="activityResumed",d="activityStopped",p="saveActivityState",f=function(e){__extends(t,e)
function t(){var t=null!==e&&e.apply(this,arguments)||this
t.callbacks={}
t._registeredReceivers={}
t._pendingReceiverRegistrations=new Array
return t}t.prototype.init=function(e){if(this.nativeApp!==e){if(this.nativeApp)throw new Error("application.android already initialized.")
this.nativeApp=e
this.packageName=e.getPackageName()
this.context=e.getApplicationContext()
this.callbacks.lifecycleCallbacks=(t=i.profile("setThemeOnLaunch",function(e){var t=e.getPackageManager().getActivityInfo(e.getComponentName(),android.content.pm.PackageManager.GET_META_DATA)
if(t.metaData){var o=t.metaData.getInt("SET_THEME_ON_LAUNCH",-1);-1!==o&&e.setTheme(o)}}),o=i.profile("notifyActivityCreated",function(e,t){m.notify({eventName:a,object:m,activity:e,bundle:t})}),f=i.profile("subscribeForGlobalLayout",function(e){var t=e.getWindow().getDecorView().getRootView()
r.onGlobalLayoutListener=new android.view.ViewTreeObserver.OnGlobalLayoutListener({onGlobalLayout:function(){n.notify({eventName:n.displayedEvent,object:m,activity:e})
var o=t.getViewTreeObserver()
o.removeOnGlobalLayoutListener(r.onGlobalLayoutListener)}})
t.getViewTreeObserver().addOnGlobalLayoutListener(r.onGlobalLayoutListener)}),h=new android.app.Application.ActivityLifecycleCallbacks({onActivityCreated:i.profile("onActivityCreated",function(e,r){t(e)
m.startActivity||(m.startActivity=e)
o(e,r)
n.hasListeners(n.displayedEvent)&&f(e)}),onActivityDestroyed:i.profile("onActivityDestroyed",function(e){e===m.foregroundActivity&&(m.foregroundActivity=void 0)
e===m.startActivity&&(m.startActivity=void 0)
m.notify({eventName:s,object:m,activity:e})
gc()}),onActivityPaused:i.profile("onActivityPaused",function(e){if(e.isNativeScriptActivity){m.paused=!0
n.notify({eventName:n.suspendEvent,object:m,android:e})}m.notify({eventName:l,object:m,activity:e})}),onActivityResumed:i.profile("onActivityResumed",function(e){m.foregroundActivity=e
m.notify({eventName:c,object:m,activity:e})}),onActivitySaveInstanceState:i.profile("onActivitySaveInstanceState",function(e,t){m.notify({eventName:p,object:m,activity:e,bundle:t})}),onActivityStarted:i.profile("onActivityStarted",function(e){m.notify({eventName:u,object:m,activity:e})}),onActivityStopped:i.profile("onActivityStopped",function(e){m.notify({eventName:d,object:m,activity:e})})}),h)
var t,o,f,h,y
this.callbacks.componentCallbacks=(y=new android.content.ComponentCallbacks2({onLowMemory:i.profile("onLowMemory",function(){gc()
java.lang.System.gc()
n.notify({eventName:n.lowMemoryEvent,object:this,android:this})}),onTrimMemory:i.profile("onTrimMemory",function(e){}),onConfigurationChanged:i.profile("onConfigurationChanged",function(e){var t=e.orientation
if(t!==b){b=t
var o
switch(t){case android.content.res.Configuration.ORIENTATION_LANDSCAPE:o="landscape"
break
case android.content.res.Configuration.ORIENTATION_PORTRAIT:o="portrait"
break
default:o="unknown"}n.notify({eventName:n.orientationChangedEvent,android:m.nativeApp,newValue:o,object:m})}})}),y)
this.nativeApp.registerActivityLifecycleCallbacks(this.callbacks.lifecycleCallbacks)
this.nativeApp.registerComponentCallbacks(this.callbacks.componentCallbacks)
this._registerPendingReceivers()}}
t.prototype._registerPendingReceivers=function(){var e=this
this._pendingReceiverRegistrations.forEach(function(t){return t(e.context)})
this._pendingReceiverRegistrations.length=0}
t.prototype.registerBroadcastReceiver=function(e,t){!function(){if(_)return
var e=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o._onReceiveCallback=t
return r.__native(o)}t.prototype.onReceive=function(e,t){this._onReceiveCallback&&this._onReceiveCallback(e,t)}
return t}(android.content.BroadcastReceiver)
_=e}()
var o=this,n=function(r){var n=new _(t)
r.registerReceiver(n,new android.content.IntentFilter(e))
o._registeredReceivers[e]=n}
this.context?n(this.context):this._pendingReceiverRegistrations.push(n)}
t.prototype.unregisterBroadcastReceiver=function(e){var t=this._registeredReceivers[e]
if(t){this.context.unregisterReceiver(t)
this._registeredReceivers[e]=void 0
delete this._registeredReceivers[e]}}
t.activityCreatedEvent=a
t.activityDestroyedEvent=s
t.activityStartedEvent=u
t.activityPausedEvent=l
t.activityResumedEvent=c
t.activityStoppedEvent=d
t.saveActivityStateEvent=p
t.activityResultEvent="activityResult"
t.activityBackPressedEvent="activityBackPressed"
t.activityNewIntentEvent="activityNewIntent"
t.activityRequestPermissionsEvent="activityRequestPermissions"
return t}(n.Observable)
t.AndroidApplication=f
var h,m=new f
t.android=m
n.setApplication(m)
var y=!1,g={value:!0}
function v(e){if(y)throw new Error("Application is already started.")
y=!0
h="string"==typeof e?{moduleName:e}:e
if(!m.nativeApp){var t=C()
m.init(t)}}t._start=v
t._shouldCreateRootFrame=function(){return g.value}
t.run=function(e){g.value=!1
v(e)}
var b,_,w="_callbacks"
t._resetRootView=function(e){var t=m.foregroundActivity
if(!t)throw new Error("Cannot find android activity.")
g.value=!1
h="string"==typeof e?{moduleName:e}:e
var o=t[w]
if(!o)throw new Error("Cannot find android activity callbacks.")
o.resetActivityContent(t)}
t.getMainEntry=function(){return h}
function P(){var e=m.foregroundActivity||m.startActivity
if(e){var t=e[w]
return t?t.getRootView():void 0}}t.getRootView=P
function C(){var e=m.nativeApp
if(!e){!e&&com.tns.NativeScriptApplication&&(e=com.tns.NativeScriptApplication.getInstance())
if(!e){var t=java.lang.Class.forName("android.app.ActivityThread")
if(t){var o=t.getMethod("currentApplication",null)
o&&(e=o.invoke(null,null))}}if(!e)throw new Error("Failed to retrieve native Android Application object. If you have a custom android.app.Application type implemented make sure that you've called the '<application-module>.android.init' method.")}return e}t.getNativeApplication=C
r.__onLiveSync=function(e){if(!m||!m.paused){var t=P()
n.livesync(t,e)}}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/application/application.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/application/application.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/bundle-entry-points.js":function(e,t,o){(function(t){o("../node_modules/tns-core-modules/globals/globals.js")
t.registerModule("text/formatted-string",function(){return o("../node_modules/tns-core-modules/text/formatted-string.js")})
t.registerModule("text/span",function(){return o("../node_modules/tns-core-modules/text/span.js")})
t.registerModule("ui/action-bar",function(){return o("../node_modules/tns-core-modules/ui/action-bar/action-bar.js")})
t.registerModule("ui/activity-indicator",function(){return o("../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator.js")})
t.registerModule("ui/border",function(){return o("../node_modules/tns-core-modules/ui/border/border.js")})
t.registerModule("ui/bottom-navigation",function(){return o("../node_modules/tns-core-modules/ui/bottom-navigation/bottom-navigation.js")})
t.registerModule("ui/button",function(){return o("../node_modules/tns-core-modules/ui/button/button.js")})
t.registerModule("ui/content-view",function(){return o("../node_modules/tns-core-modules/ui/content-view/content-view.js")})
t.registerModule("ui/date-picker",function(){return o("../node_modules/tns-core-modules/ui/date-picker/date-picker.js")})
t.registerModule("ui/frame",function(){return o("../node_modules/tns-core-modules/ui/frame/frame.js")})
t.registerModule("ui/html-view",function(){return o("../node_modules/tns-core-modules/ui/html-view/html-view.js")})
t.registerModule("ui/image",function(){return o("../node_modules/tns-core-modules/ui/image/image.js")})
t.registerModule("ui/label",function(){return o("../node_modules/tns-core-modules/ui/label/label.js")})
t.registerModule("ui/layouts/absolute-layout",function(){return o("../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout.js")})
t.registerModule("ui/layouts/dock-layout",function(){return o("../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout.js")})
t.registerModule("ui/layouts/grid-layout",function(){return o("../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout.js")})
t.registerModule("ui/layouts/stack-layout",function(){return o("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js")})
t.registerModule("ui/layouts/flexbox-layout",function(){return o("../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout.js")})
t.registerModule("ui/layouts/wrap-layout",function(){return o("../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout.js")})
t.registerModule("ui/list-picker",function(){return o("../node_modules/tns-core-modules/ui/list-picker/list-picker.js")})
t.registerModule("ui/page",function(){return o("../node_modules/tns-core-modules/ui/page/page.js")})
t.registerModule("ui/placeholder",function(){return o("../node_modules/tns-core-modules/ui/placeholder/placeholder.js")})
t.registerModule("ui/progress",function(){return o("../node_modules/tns-core-modules/ui/progress/progress.js")})
t.registerModule("ui/proxy-view-container",function(){return o("../node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js")})
t.registerModule("ui/repeater",function(){return o("../node_modules/tns-core-modules/ui/repeater/repeater.js")})
t.registerModule("ui/scroll-view",function(){return o("../node_modules/tns-core-modules/ui/scroll-view/scroll-view.js")})
t.registerModule("ui/search-bar",function(){return o("../node_modules/tns-core-modules/ui/search-bar/search-bar.js")})
t.registerModule("ui/segmented-bar",function(){return o("../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar.js")})
t.registerModule("ui/slider",function(){return o("../node_modules/tns-core-modules/ui/slider/slider.js")})
t.registerModule("ui/switch",function(){return o("../node_modules/tns-core-modules/ui/switch/switch.js")})
t.registerModule("ui/tab-view",function(){return o("../node_modules/tns-core-modules/ui/tab-view/tab-view.js")})
t.registerModule("ui/tab-navigation-base/tab-strip",function(){return o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-strip/tab-strip.js")})
t.registerModule("ui/tab-navigation-base/tab-strip-item",function(){return o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-strip-item/tab-strip-item.js")})
t.registerModule("ui/tab-navigation-base/tab-content-item",function(){return o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-content-item/tab-content-item.js")})
t.registerModule("ui/tabs",function(){return o("../node_modules/tns-core-modules/ui/tabs/tabs.js")})
t.registerModule("ui/web-view",function(){return o("../node_modules/tns-core-modules/ui/web-view/web-view.js")})
t.registerModule("ui/text-field",function(){return o("../node_modules/tns-core-modules/ui/text-field/text-field.js")})
t.registerModule("ui/text-view",function(){return o("../node_modules/tns-core-modules/ui/text-view/text-view.js")})
t.registerModule("ui/time-picker",function(){return o("../node_modules/tns-core-modules/ui/time-picker/time-picker.js")})
t.registerModule("ui/list-view",function(){return o("../node_modules/tns-core-modules/ui/list-view/list-view.js")})
if(t._isModuleLoadedForUI&&t._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/bundle-entry-points.js")){e.hot.accept()
e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/bundle-entry-points.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/color/color-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/utils/types.js"),i=o("../node_modules/tns-core-modules/color/known-colors.js"),a=/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i,s=function(){function e(){if(1===arguments.length){var e=arguments[0]
if(n.isString(e))if(u(e))this._argb=function(e){var t=e.toLowerCase(),o=t.replace("rgba(","").replace("rgb(","").replace(")","").trim().split(","),r=255,n=255,i=255,a=255
o[0]&&(r=parseInt(o[0].trim()))
o[1]&&(n=parseInt(o[1].trim()))
o[2]&&(i=parseInt(o[2].trim()))
o[3]&&(a=Math.round(255*parseFloat(o[3].trim())))
return 16777216*(255&a)+65536*(255&r)+256*(255&n)+1*(255&i)}(e)
else if(i.isKnownName(e)){var t=i.getKnownColor(e)
this._name=e
this._argb=this._argbFromString(t)}else{if(!a.test(e))throw new Error("Invalid color: "+e)
t=this._normalizeHex(e)
this._argb=this._argbFromString(t)}else{if(!n.isNumber(e))throw new Error("Expected 1 or 4 constructor parameters.")
this._argb=e>>>0}}else{if(4!==arguments.length)throw new Error("Expected 1 or 4 constructor parameters.")
this._argb=16777216*(255&arguments[0])+65536*(255&arguments[1])+256*(255&arguments[2])+1*(255&arguments[3])}}Object.defineProperty(e.prototype,"a",{get:function(){return this._argb/16777216&255},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"r",{get:function(){return this._argb/65536&255},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"g",{get:function(){return this._argb/256&255},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"b",{get:function(){return this._argb/1&255},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"argb",{get:function(){return this._argb},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"hex",{get:function(){return 255===this.a?("#"+this._componentToHex(this.r)+this._componentToHex(this.g)+this._componentToHex(this.b)).toUpperCase():("#"+this._componentToHex(this.a)+this._componentToHex(this.r)+this._componentToHex(this.g)+this._componentToHex(this.b)).toUpperCase()},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"name",{get:function(){return this._name},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"ios",{get:function(){},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"android",{get:function(){},enumerable:!0,configurable:!0})
e.prototype._argbFromString=function(e){"#"===e.charAt(0)&&(e=e.substr(1))
3===e.length?e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]:4===e.length&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]+e[3]+e[3])
var t=parseInt(e,16)
6===e.length&&(t=4278190080+(16777215&t))
return t}
e.prototype.equals=function(e){return e&&this.argb===e.argb}
e.equals=function(e,t){return!e&&!t||!(!e||!t)&&e.equals(t)}
e.isValid=function(t){return!!(n.isNullOrUndefined(t)||t instanceof e)||!!n.isString(t)&&(!!i.isKnownName(t)||(a.test(t)||u(t)))}
e.prototype._componentToHex=function(e){var t=e.toString(16)
1===t.length&&(t="0"+t)
return t}
e.prototype._normalizeHex=function(e){"#"===e.charAt(0)&&4===e.length&&(e=e.charAt(0)+e.charAt(1)+e.charAt(1)+e.charAt(2)+e.charAt(2)+e.charAt(3)+e.charAt(3))
return e}
e.prototype.toString=function(){return this.hex}
return e}()
t.Color=s
function u(e){var t=e.toLowerCase()
return(0===t.indexOf("rgb(")||0===t.indexOf("rgba("))&&t.indexOf(")")===t.length-1}if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/color/color-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/color/color-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/color/color.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/color/color-common.js"),i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}Object.defineProperty(t.prototype,"android",{get:function(){return this.argb>>0},enumerable:!0,configurable:!0})
return t}(n.Color)
t.Color=i
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/color/color.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/color/color.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/color/known-colors.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
var r={}
function n(e,t){r[e.toLowerCase()]=t
return t}t.isKnownName=function(e){if(e)return e.toLowerCase()in r}
t.getKnownColor=function(e){if(e)return r[e.toLowerCase()]}
t.Transparent=n("Transparent","#00000000")
t.AliceBlue=n("AliceBlue","#F0F8FF")
t.AntiqueWhite=n("AntiqueWhite","#FAEBD7")
t.Aqua=n("Aqua","#00FFFF")
t.Aquamarine=n("Aquamarine","#7FFFD4")
t.Azure=n("Azure","#F0FFFF")
t.Beige=n("Beige","#F5F5DC")
t.Bisque=n("Bisque","#FFE4C4")
t.Black=n("Black","#000000")
t.BlanchedAlmond=n("BlanchedAlmond","#FFEBCD")
t.Blue=n("Blue","#0000FF")
t.BlueViolet=n("BlueViolet","#8A2BE2")
t.Brown=n("Brown","#A52A2A")
t.BurlyWood=n("BurlyWood","#DEB887")
t.CadetBlue=n("CadetBlue","#5F9EA0")
t.Chartreuse=n("Chartreuse","#7FFF00")
t.Chocolate=n("Chocolate","#D2691E")
t.Coral=n("Coral","#FF7F50")
t.CornflowerBlue=n("CornflowerBlue","#6495ED")
t.Cornsilk=n("Cornsilk","#FFF8DC")
t.Crimson=n("Crimson","#DC143C")
t.Cyan=n("Cyan","#00FFFF")
t.DarkBlue=n("DarkBlue","#00008B")
t.DarkCyan=n("DarkCyan","#008B8B")
t.DarkGoldenRod=n("DarkGoldenRod","#B8860B")
t.DarkGray=n("DarkGray","#A9A9A9")
t.DarkGreen=n("DarkGreen","#006400")
t.DarkKhaki=n("DarkKhaki","#BDB76B")
t.DarkMagenta=n("DarkMagenta","#8B008B")
t.DarkOliveGreen=n("DarkOliveGreen","#556B2F")
t.DarkOrange=n("DarkOrange","#FF8C00")
t.DarkOrchid=n("DarkOrchid","#9932CC")
t.DarkRed=n("DarkRed","#8B0000")
t.DarkSalmon=n("DarkSalmon","#E9967A")
t.DarkSeaGreen=n("DarkSeaGreen","#8FBC8F")
t.DarkSlateBlue=n("DarkSlateBlue","#483D8B")
t.DarkSlateGray=n("DarkSlateGray","#2F4F4F")
t.DarkTurquoise=n("DarkTurquoise","#00CED1")
t.DarkViolet=n("DarkViolet","#9400D3")
t.DeepPink=n("DeepPink","#FF1493")
t.DeepSkyBlue=n("DeepSkyBlue","#00BFFF")
t.DimGray=n("DimGray","#696969")
t.DodgerBlue=n("DodgerBlue","#1E90FF")
t.FireBrick=n("FireBrick","#B22222")
t.FloralWhite=n("FloralWhite","#FFFAF0")
t.ForestGreen=n("ForestGreen","#228B22")
t.Fuchsia=n("Fuchsia","#FF00FF")
t.Gainsboro=n("Gainsboro","#DCDCDC")
t.GhostWhite=n("GhostWhite","#F8F8FF")
t.Gold=n("Gold","#FFD700")
t.GoldenRod=n("GoldenRod","#DAA520")
t.Gray=n("Gray","#808080")
t.Green=n("Green","#008000")
t.GreenYellow=n("GreenYellow","#ADFF2F")
t.HoneyDew=n("HoneyDew","#F0FFF0")
t.HotPink=n("HotPink","#FF69B4")
t.IndianRed=n("IndianRed","#CD5C5C")
t.Indigo=n("Indigo","#4B0082")
t.Ivory=n("Ivory","#FFFFF0")
t.Khaki=n("Khaki","#F0E68C")
t.Lavender=n("Lavender","#E6E6FA")
t.LavenderBlush=n("LavenderBlush","#FFF0F5")
t.LawnGreen=n("LawnGreen","#7CFC00")
t.LemonChiffon=n("LemonChiffon","#FFFACD")
t.LightBlue=n("LightBlue","#ADD8E6")
t.LightCoral=n("LightCoral","#F08080")
t.LightCyan=n("LightCyan","#E0FFFF")
t.LightGoldenRodYellow=n("LightGoldenRodYellow","#FAFAD2")
t.LightGray=n("LightGray","#D3D3D3")
t.LightGreen=n("LightGreen","#90EE90")
t.LightPink=n("LightPink","#FFB6C1")
t.LightSalmon=n("LightSalmon","#FFA07A")
t.LightSeaGreen=n("LightSeaGreen","#20B2AA")
t.LightSkyBlue=n("LightSkyBlue","#87CEFA")
t.LightSlateGray=n("LightSlateGray","#778899")
t.LightSteelBlue=n("LightSteelBlue","#B0C4DE")
t.LightYellow=n("LightYellow","#FFFFE0")
t.Lime=n("Lime","#00FF00")
t.LimeGreen=n("LimeGreen","#32CD32")
t.Linen=n("Linen","#FAF0E6")
t.Magenta=n("Magenta","#FF00FF")
t.Maroon=n("Maroon","#800000")
t.MediumAquaMarine=n("MediumAquaMarine","#66CDAA")
t.MediumBlue=n("MediumBlue","#0000CD")
t.MediumOrchid=n("MediumOrchid","#BA55D3")
t.MediumPurple=n("MediumPurple","#9370DB")
t.MediumSeaGreen=n("MediumSeaGreen","#3CB371")
t.MediumSlateBlue=n("MediumSlateBlue","#7B68EE")
t.MediumSpringGreen=n("MediumSpringGreen","#00FA9A")
t.MediumTurquoise=n("MediumTurquoise","#48D1CC")
t.MediumVioletRed=n("MediumVioletRed","#C71585")
t.MidnightBlue=n("MidnightBlue","#191970")
t.MintCream=n("MintCream","#F5FFFA")
t.MistyRose=n("MistyRose","#FFE4E1")
t.Moccasin=n("Moccasin","#FFE4B5")
t.NavajoWhite=n("NavajoWhite","#FFDEAD")
t.Navy=n("Navy","#000080")
t.OldLace=n("OldLace","#FDF5E6")
t.Olive=n("Olive","#808000")
t.OliveDrab=n("OliveDrab","#6B8E23")
t.Orange=n("Orange","#FFA500")
t.OrangeRed=n("OrangeRed","#FF4500")
t.Orchid=n("Orchid","#DA70D6")
t.PaleGoldenRod=n("PaleGoldenRod","#EEE8AA")
t.PaleGreen=n("PaleGreen","#98FB98")
t.PaleTurquoise=n("PaleTurquoise","#AFEEEE")
t.PaleVioletRed=n("PaleVioletRed","#DB7093")
t.PapayaWhip=n("PapayaWhip","#FFEFD5")
t.PeachPuff=n("PeachPuff","#FFDAB9")
t.Peru=n("Peru","#CD853F")
t.Pink=n("Pink","#FFC0CB")
t.Plum=n("Plum","#DDA0DD")
t.PowderBlue=n("PowderBlue","#B0E0E6")
t.Purple=n("Purple","#800080")
t.RebeccaPurple=n("RebeccaPurple","#663399")
t.Red=n("Red","#FF0000")
t.RosyBrown=n("RosyBrown","#BC8F8F")
t.RoyalBlue=n("RoyalBlue","#4169E1")
t.SaddleBrown=n("SaddleBrown","#8B4513")
t.Salmon=n("Salmon","#FA8072")
t.SandyBrown=n("SandyBrown","#F4A460")
t.SeaGreen=n("SeaGreen","#2E8B57")
t.SeaShell=n("SeaShell","#FFF5EE")
t.Sienna=n("Sienna","#A0522D")
t.Silver=n("Silver","#C0C0C0")
t.SkyBlue=n("SkyBlue","#87CEEB")
t.SlateBlue=n("SlateBlue","#6A5ACD")
t.SlateGray=n("SlateGray","#708090")
t.Snow=n("Snow","#FFFAFA")
t.SpringGreen=n("SpringGreen","#00FF7F")
t.SteelBlue=n("SteelBlue","#4682B4")
t.Tan=n("Tan","#D2B48C")
t.Teal=n("Teal","#008080")
t.Thistle=n("Thistle","#D8BFD8")
t.Tomato=n("Tomato","#FF6347")
t.Turquoise=n("Turquoise","#40E0D0")
t.Violet=n("Violet","#EE82EE")
t.Wheat=n("Wheat","#F5DEB3")
t.White=n("White","#FFFFFF")
t.WhiteSmoke=n("WhiteSmoke","#F5F5F5")
t.Yellow=n("Yellow","#FFFF00")
t.YellowGreen=n("YellowGreen","#9ACD32")
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/color/known-colors.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/color/known-colors.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/console/console.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
var r=function(){function e(){}e.prototype.time=function(e){}
e.prototype.timeEnd=function(e){}
e.prototype.assert=function(e,t){}
e.prototype.info=function(e){}
e.prototype.warn=function(e){}
e.prototype.error=function(e){}
e.prototype.log=function(e){}
e.prototype.trace=function(){}
e.prototype.dir=function(e){}
return e}()
t.Console=r
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/console/console.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/console/console.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/css-value/index.js":function(e,t,o){(function(o){t.parse=function(e){return new r(e).parse()}
function r(e){this.str=e}r.prototype.skip=function(e){this.str=this.str.slice(e[0].length)}
r.prototype.comma=function(){var e=/^, */.exec(this.str)
if(e){this.skip(e)
return{type:"comma",string:","}}}
r.prototype.ident=function(){var e=/^([\w-]+) */.exec(this.str)
if(e){this.skip(e)
return{type:"ident",string:e[1]}}}
r.prototype.int=function(){var e=/^(([-\+]?\d+)(\S+)?) */.exec(this.str)
if(e){this.skip(e)
var t=~~e[2],o=e[3]
return{type:"number",string:e[1],unit:o||"",value:t}}}
r.prototype.float=function(){var e=/^(((?:[-\+]?\d+)?\.\d+)(\S+)?) */.exec(this.str)
if(e){this.skip(e)
var t=parseFloat(e[2]),o=e[3]
return{type:"number",string:e[1],unit:o||"",value:t}}}
r.prototype.number=function(){return this.float()||this.int()}
r.prototype.double=function(){var e=/^"([^"]*)" */.exec(this.str)
if(!e)return e
this.skip(e)
return{type:"string",quote:'"',string:'"'+e[1]+'"',value:e[1]}}
r.prototype.single=function(){var e=/^'([^']*)' */.exec(this.str)
if(!e)return e
this.skip(e)
return{type:"string",quote:"'",string:"'"+e[1]+"'",value:e[1]}}
r.prototype.string=function(){return this.single()||this.double()}
r.prototype.value=function(){return this.number()||this.ident()||this.string()||this.comma()}
r.prototype.parse=function(){for(var e=[];this.str.length;){var t=this.value()
if(!t)throw new Error("failed to parse near `"+this.str.slice(0,10)+"...`")
e.push(t)}return e}
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/css-value/index.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/css-value/index.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/css/index.js":function(e,t,o){(function(r){t.parse=o("../node_modules/tns-core-modules/css/lib/parse/index.js")
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/css/index.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/css/index.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/css/lib/parse/index.js":function(e,t,o){(function(t){var o=/\/\*[^*]*\*+([^\/*][^*]*\*+)*\//g
e.exports=function(e,t){t=t||{}
var n=1,i=1
function a(e){var t=e.match(/\n/g)
t&&(n+=t.length)
var o=e.lastIndexOf("\n")
i=~o?e.length-o:i+e.length}function s(){var e={line:n,column:i}
return function(t){t.position=new u(e)
m()
return t}}function u(e){this.start=e
this.end={line:n,column:i}
this.source=t.source}u.prototype.content=e
var l=[]
function c(o){var r=new Error(t.source+":"+n+":"+i+": "+o)
r.reason=o
r.filename=t.source
r.line=n
r.column=i
r.source=e
if(!t.silent)throw r
l.push(r)}function d(){return h(/^{\s*/)}function p(){return h(/^}/)}function f(){var t,o=[]
m()
y(o)
for(;e.length&&"}"!=e.charAt(0)&&(t=I()||j());)if(!1!==t){o.push(t)
y(o)}return o}function h(t){var o=t.exec(e)
if(o){var r=o[0]
a(r)
e=e.slice(r.length)
return o}}function m(){h(/^\s*/)}function y(e){var t
e=e||[]
for(;t=g();)!1!==t&&e.push(t)
return e}function g(){var t=s()
if("/"==e.charAt(0)&&"*"==e.charAt(1)){for(var o=2;""!=e.charAt(o)&&("*"!=e.charAt(o)||"/"!=e.charAt(o+1));)++o
o+=2
if(""===e.charAt(o-1))return c("End of comment missing")
var r=e.slice(2,o-2)
i+=2
a(r)
e=e.slice(o)
i+=2
return t({type:"comment",comment:r})}}function v(){var e=h(/^([^{]+)/)
if(e)return r(e[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*\/+/g,"").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g,function(e){return e.replace(/,/g,"‌")}).split(/\s*(?![^(]*\)),\s*/).map(function(e){return e.replace(/\u200C/g,",")})}function b(){var e=s(),t=h(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/)
if(t){t=r(t[0])
if(!h(/^:\s*/))return c("property missing ':'")
var n=h(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/),i=e({type:"declaration",property:t.replace(o,""),value:n?r(n[0]).replace(o,""):""})
h(/^[;\s]*/)
return i}}function _(){var e,t=[]
if(!d())return c("missing '{'")
y(t)
for(;e=b();)if(!1!==e){t.push(e)
y(t)}return p()?t:c("missing '}'")}function w(){for(var e,t=[],o=s();e=h(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/);){t.push(e[1])
h(/^,\s*/)}if(t.length)return o({type:"keyframe",values:t,declarations:_()})}var P,C=x("import"),S=x("charset"),T=x("namespace")
function x(e){var t=new RegExp("^@"+e+"\\s*([^;]+);")
return function(){var o=s(),r=h(t)
if(r){var n={type:e}
n[e]=r[1].trim()
return o(n)}}}function I(){if("@"==e[0])return function(){var e=s(),t=h(/^@([-\w]+)?keyframes\s*/)
if(t){var o=t[1]
t=h(/^([-\w]+)\s*/)
if(!t)return c("@keyframes missing name")
var r,n=t[1]
if(!d())return c("@keyframes missing '{'")
for(var i=y();r=w();){i.push(r)
i=i.concat(y())}return p()?e({type:"keyframes",name:n,vendor:o,keyframes:i}):c("@keyframes missing '}'")}}()||function(){var e=s(),t=h(/^@media *([^{]+)/)
if(t){var o=r(t[1])
if(!d())return c("@media missing '{'")
var n=y().concat(f())
return p()?e({type:"media",media:o,rules:n}):c("@media missing '}'")}}()||function(){var e=s(),t=h(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/)
if(t)return e({type:"custom-media",name:r(t[1]),media:r(t[2])})}()||function(){var e=s(),t=h(/^@supports *([^{]+)/)
if(t){var o=r(t[1])
if(!d())return c("@supports missing '{'")
var n=y().concat(f())
return p()?e({type:"supports",supports:o,rules:n}):c("@supports missing '}'")}}()||C()||S()||T()||function(){var e=s(),t=h(/^@([-\w]+)?document *([^{]+)/)
if(t){var o=r(t[1]),n=r(t[2])
if(!d())return c("@document missing '{'")
var i=y().concat(f())
return p()?e({type:"document",document:n,vendor:o,rules:i}):c("@document missing '}'")}}()||function(){var e=s(),t=h(/^@page */)
if(t){var o=v()||[]
if(!d())return c("@page missing '{'")
for(var r,n=y();r=b();){n.push(r)
n=n.concat(y())}return p()?e({type:"page",selectors:o,declarations:n}):c("@page missing '}'")}}()||function(){var e=s(),t=h(/^@host\s*/)
if(t){if(!d())return c("@host missing '{'")
var o=y().concat(f())
return p()?e({type:"host",rules:o}):c("@host missing '}'")}}()||function(){var e=s(),t=h(/^@font-face\s*/)
if(t){if(!d())return c("@font-face missing '{'")
for(var o,r=y();o=b();){r.push(o)
r=r.concat(y())}return p()?e({type:"font-face",declarations:r}):c("@font-face missing '}'")}}()}function j(){var e=s(),t=v()
if(!t)return c("selector missing")
y()
return e({type:"rule",selectors:t,declarations:_()})}return function e(t,o){var r=t&&"string"==typeof t.type
var n=r?t:o
for(var i in t){var a=t[i]
Array.isArray(a)?a.forEach(function(t){e(t,n)}):a&&"object"==typeof a&&e(a,n)}r&&Object.defineProperty(t,"parent",{configurable:!0,writable:!0,enumerable:!1,value:o||null})
return t}((P=f(),{type:"stylesheet",stylesheet:{rules:P,parsingErrors:l}}))}
function r(e){return e?e.replace(/^\s+|\s+$/g,""):""}if(t._isModuleLoadedForUI&&t._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/css/lib/parse/index.js")){e.hot.accept()
e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/css/lib/parse/index.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/css/parser.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
var r=/\s*url\((?:('|")([^\1]*)\1|([^\)]*))\)\s*/gy
function n(e,t){void 0===t&&(t=0)
r.lastIndex=t
var o=r.exec(e)
if(!o)return null
var n=r.lastIndex,i=o[2]||o[3]
return{start:t,end:n,value:i}}t.parseURL=n
var i=/\s*#((?:[0-9A-F]{8})|(?:[0-9A-F]{6})|(?:[0-9A-F]{3}))\s*/giy
function a(e,t){void 0===t&&(t=0)
i.lastIndex=t
var o=i.exec(e)
if(!o)return null
var r,n=i.lastIndex,a=o[1]
8===a.length?r=parseInt("0x"+a):6===a.length?r=parseInt("0xFF"+a):3===a.length&&(r=parseInt("0xFF"+a[0]+a[0]+a[1]+a[1]+a[2]+a[2]))
return{start:t,end:n,value:r}}t.parseHexColor=a
function s(e,t,o,r){void 0===r&&(r=1)
return e>=0&&e<=255&&t>=0&&t<=255&&o>=0&&o<=255&&r>=0&&r<=1?16777216*Math.round(255*r)+65536*e+256*t+1*o:null}var u=/\s*(rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\))/gy
function l(e,t){void 0===t&&(t=0)
u.lastIndex=t
var o=u.exec(e)
if(!o)return null
var r=u.lastIndex,n=o[1]&&s(parseInt(o[2]),parseInt(o[3]),parseInt(o[4]))
return{start:t,end:r,value:n}}t.parseRGBColor=l
var c,d=/\s*(rgba\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*,\s*([01]?\.?\d*)\s*\))/gy
function p(e,t){void 0===t&&(t=0)
d.lastIndex=t
var o=d.exec(e)
if(!o)return null
var r=d.lastIndex,n=s(parseInt(o[2]),parseInt(o[3]),parseInt(o[4]),parseFloat(o[5]))
return{start:t,end:r,value:n}}t.parseRGBAColor=p
!function(e){e[e.transparent=0]="transparent"
e[e.aliceblue=4293982463]="aliceblue"
e[e.antiquewhite=4294634455]="antiquewhite"
e[e.aqua=4278255615]="aqua"
e[e.aquamarine=4286578644]="aquamarine"
e[e.azure=4293984255]="azure"
e[e.beige=4294309340]="beige"
e[e.bisque=4294960324]="bisque"
e[e.black=4278190080]="black"
e[e.blanchedalmond=4294962125]="blanchedalmond"
e[e.blue=4278190335]="blue"
e[e.blueviolet=4287245282]="blueviolet"
e[e.brown=4289014314]="brown"
e[e.burlywood=4292786311]="burlywood"
e[e.cadetblue=4284456608]="cadetblue"
e[e.chartreuse=4286578432]="chartreuse"
e[e.chocolate=4291979550]="chocolate"
e[e.coral=4294934352]="coral"
e[e.cornflowerblue=4284782061]="cornflowerblue"
e[e.cornsilk=4294965468]="cornsilk"
e[e.crimson=4292613180]="crimson"
e[e.cyan=4278255615]="cyan"
e[e.darkblue=4278190219]="darkblue"
e[e.darkcyan=4278225803]="darkcyan"
e[e.darkgoldenrod=4290283019]="darkgoldenrod"
e[e.darkgray=4289309097]="darkgray"
e[e.darkgreen=4278215680]="darkgreen"
e[e.darkgrey=4289309097]="darkgrey"
e[e.darkkhaki=4290623339]="darkkhaki"
e[e.darkmagenta=4287299723]="darkmagenta"
e[e.darkolivegreen=4283788079]="darkolivegreen"
e[e.darkorange=4294937600]="darkorange"
e[e.darkorchid=4288230092]="darkorchid"
e[e.darkred=4287299584]="darkred"
e[e.darksalmon=4293498490]="darksalmon"
e[e.darkseagreen=4287609999]="darkseagreen"
e[e.darkslateblue=4282924427]="darkslateblue"
e[e.darkslategray=4281290575]="darkslategray"
e[e.darkslategrey=4281290575]="darkslategrey"
e[e.darkturquoise=4278243025]="darkturquoise"
e[e.darkviolet=4287889619]="darkviolet"
e[e.deeppink=4294907027]="deeppink"
e[e.deepskyblue=4278239231]="deepskyblue"
e[e.dimgray=4285098345]="dimgray"
e[e.dimgrey=4285098345]="dimgrey"
e[e.dodgerblue=4280193279]="dodgerblue"
e[e.firebrick=4289864226]="firebrick"
e[e.floralwhite=4294966e3]="floralwhite"
e[e.forestgreen=4280453922]="forestgreen"
e[e.fuchsia=4294902015]="fuchsia"
e[e.gainsboro=4292664540]="gainsboro"
e[e.ghostwhite=4294506751]="ghostwhite"
e[e.gold=4294956800]="gold"
e[e.goldenrod=4292519200]="goldenrod"
e[e.gray=4286611584]="gray"
e[e.green=4278222848]="green"
e[e.greenyellow=4289593135]="greenyellow"
e[e.grey=4286611584]="grey"
e[e.honeydew=4293984240]="honeydew"
e[e.hotpink=4294928820]="hotpink"
e[e.indianred=4291648604]="indianred"
e[e.indigo=4283105410]="indigo"
e[e.ivory=4294967280]="ivory"
e[e.khaki=4293977740]="khaki"
e[e.lavender=4293322490]="lavender"
e[e.lavenderblush=4294963445]="lavenderblush"
e[e.lawngreen=4286381056]="lawngreen"
e[e.lemonchiffon=4294965965]="lemonchiffon"
e[e.lightblue=4289583334]="lightblue"
e[e.lightcoral=4293951616]="lightcoral"
e[e.lightcyan=4292935679]="lightcyan"
e[e.lightgoldenrodyellow=4294638290]="lightgoldenrodyellow"
e[e.lightgray=4292072403]="lightgray"
e[e.lightgreen=4287688336]="lightgreen"
e[e.lightgrey=4292072403]="lightgrey"
e[e.lightpink=4294948545]="lightpink"
e[e.lightsalmon=4294942842]="lightsalmon"
e[e.lightseagreen=4280332970]="lightseagreen"
e[e.lightskyblue=4287090426]="lightskyblue"
e[e.lightslategray=4286023833]="lightslategray"
e[e.lightslategrey=4286023833]="lightslategrey"
e[e.lightsteelblue=4289774814]="lightsteelblue"
e[e.lightyellow=4294967264]="lightyellow"
e[e.lime=4278255360]="lime"
e[e.limegreen=4281519410]="limegreen"
e[e.linen=4294635750]="linen"
e[e.magenta=4294902015]="magenta"
e[e.maroon=4286578688]="maroon"
e[e.mediumaquamarine=4284927402]="mediumaquamarine"
e[e.mediumblue=4278190285]="mediumblue"
e[e.mediumorchid=4290401747]="mediumorchid"
e[e.mediumpurple=4287852763]="mediumpurple"
e[e.mediumseagreen=4282168177]="mediumseagreen"
e[e.mediumslateblue=4286277870]="mediumslateblue"
e[e.mediumspringgreen=4278254234]="mediumspringgreen"
e[e.mediumturquoise=4282962380]="mediumturquoise"
e[e.mediumvioletred=4291237253]="mediumvioletred"
e[e.midnightblue=4279834992]="midnightblue"
e[e.mintcream=4294311930]="mintcream"
e[e.mistyrose=4294960353]="mistyrose"
e[e.moccasin=4294960309]="moccasin"
e[e.navajowhite=4294958765]="navajowhite"
e[e.navy=4278190208]="navy"
e[e.oldlace=4294833638]="oldlace"
e[e.olive=4286611456]="olive"
e[e.olivedrab=4285238819]="olivedrab"
e[e.orange=4294944e3]="orange"
e[e.orangered=4294919424]="orangered"
e[e.orchid=4292505814]="orchid"
e[e.palegoldenrod=4293847210]="palegoldenrod"
e[e.palegreen=4288215960]="palegreen"
e[e.paleturquoise=4289720046]="paleturquoise"
e[e.palevioletred=4292571283]="palevioletred"
e[e.papayawhip=4294963157]="papayawhip"
e[e.peachpuff=4294957753]="peachpuff"
e[e.peru=4291659071]="peru"
e[e.pink=4294951115]="pink"
e[e.plum=4292714717]="plum"
e[e.powderblue=4289781990]="powderblue"
e[e.purple=4286578816]="purple"
e[e.rebeccapurple=4284887961]="rebeccapurple"
e[e.red=4294901760]="red"
e[e.rosybrown=4290547599]="rosybrown"
e[e.royalblue=4282477025]="royalblue"
e[e.saddlebrown=4287317267]="saddlebrown"
e[e.salmon=4294606962]="salmon"
e[e.sandybrown=4294222944]="sandybrown"
e[e.seagreen=4281240407]="seagreen"
e[e.seashell=4294964718]="seashell"
e[e.sienna=4288696877]="sienna"
e[e.silver=4290822336]="silver"
e[e.skyblue=4287090411]="skyblue"
e[e.slateblue=4285160141]="slateblue"
e[e.slategray=4285563024]="slategray"
e[e.slategrey=4285563024]="slategrey"
e[e.snow=4294966010]="snow"
e[e.springgreen=4278255487]="springgreen"
e[e.steelblue=4282811060]="steelblue"
e[e.tan=4291998860]="tan"
e[e.teal=4278222976]="teal"
e[e.thistle=4292394968]="thistle"
e[e.tomato=4294927175]="tomato"
e[e.turquoise=4282441936]="turquoise"
e[e.violet=4293821166]="violet"
e[e.wheat=4294303411]="wheat"
e[e.white=4294967295]="white"
e[e.whitesmoke=4294309365]="whitesmoke"
e[e.yellow=4294967040]="yellow"
e[e.yellowgreen=4288335154]="yellowgreen"}(c=t.colors||(t.colors={}))
function f(e,t,o){void 0===o&&(o=y(e,t))
if(o&&o.value in c){var r=o.end,n=c[o.value]
return{start:t,end:r,value:n}}return null}t.parseColorKeyword=f
function h(e,t,o){void 0===t&&(t=0)
void 0===o&&(o=y(e,t))
return a(e,t)||f(e,t,o)||l(e,t)||p(e,t)}t.parseColor=h
var m=/\s*([a-z][\w\-]*)\s*/giy
function y(e,t){void 0===t&&(t=0)
m.lastIndex=t
var o=m.exec(e)
if(!o)return null
var r=m.lastIndex,n=o[1]
return{start:t,end:r,value:n}}var g=new Set(["repeat","repeat-x","repeat-y","no-repeat"])
function v(e,t,o){void 0===t&&(t=0)
void 0===o&&(o=y(e,t))
if(o&&g.has(o.value)){var r=o.end,n=o.value
return{start:t,end:r,value:n}}return null}t.parseRepeat=v
var b=/\s*([\+\-]?(?:\d+\.\d+|\d+|\.\d+)(?:[eE][\+\-]?\d+)?)([a-zA-Z]+|%)?\s*/gy
function _(e,t){void 0===t&&(t=0)
b.lastIndex=t
var o=b.exec(e)
if(!o)return null
var r=b.lastIndex,n=parseFloat(o[1]),i=o[2]||"dip"
return{start:t,end:r,value:{value:n,unit:i}}}t.parseUnit=_
function w(e,t){void 0===t&&(t=0)
var o=_(e,t)
if(o){var r=o.start,n=o.end,i=o.value
if("%"===i.unit)i.value/=100
else if(i.unit){if("px"!==i.unit&&"dip"!==i.unit)return null}else i.unit="dip"
return{start:r,end:n,value:i}}return null}t.parsePercentageOrLength=w
var P={deg:function(e,t,o){return{start:e,end:t,value:o/180*Math.PI}},rad:function(e,t,o){return{start:e,end:t,value:o}},grad:function(e,t,o){return{start:e,end:t,value:o/200*Math.PI}},turn:function(e,t,o){return{start:e,end:t,value:o*Math.PI*2}}}
function C(e,t){void 0===t&&(t=0)
var o=_(e,t)
if(o){var r=o.start,n=o.end,i=o.value
return(P[i.unit]||function(e,t,o){return null})(r,n,i.value)}return null}t.parseAngle=C
var S=new Set(["auto","contain","cover"])
function T(e,t,o){void 0===t&&(t=0)
void 0===o&&(o=y(e,t))
var r=t
if(o&&S.has(o.value)){r=o.end
var n=o.value
return{start:t,end:r,value:n}}var i=w(e,r)
if(i){r=i.end
var a=w(e,i.end)
if(a){r=a.end
return{start:t,end:r,value:{x:i.value,y:a.value}}}return{start:t,end:r,value:{x:i.value,y:"auto"}}}return null}t.parseBackgroundSize=T
var x=Object.freeze(new Set(["left","right","top","bottom","center"])),I={left:"x",right:"x",center:"center",top:"y",bottom:"y"}
function j(e,t,o){void 0===t&&(t=0)
void 0===o&&(o=y(e,t))
function r(e,t){return"center"===e.value?"center":t&&0!==t.value.value?{align:e.value,offset:t.value}:e.value}function n(e,t){return"center"===e.value?"center":t&&0!==t.value.value?{align:e.value,offset:t.value}:e.value}var i=t
if(o&&x.has(o.value)){i=o.end
var a=I[o.value],s="center"!==a&&w(e,i)
s&&(i=s.end)
var u=y(e,i)
if(u&&x.has(u.value)){i=u.end
var l=I[u.end]
if(a===l&&"center"!==a)return null
var c="center"!==l&&w(e,i)
c&&(i=c.end)
return a===l&&"center"===l||"x"===a||"y"===l?{start:t,end:i,value:{x:r(o,s),y:n(u,c)}}:{start:t,end:i,value:{x:r(u,c),y:n(o,s)}}}return"center"===a?{start:t,end:i,value:{x:"center",y:"center"}}:"x"===a?{start:t,end:i,value:{x:r(o,s),y:"center"}}:{start:t,end:i,value:{x:"center",y:n(o,s)}}}s=w(e,i)
if(s){i=s.end
c=w(e,i)
if(c){i=c.end
return{start:t,end:i,value:{x:{align:"left",offset:s.value},y:{align:"top",offset:c.value}}}}return{start:t,end:i,value:{x:{align:"left",offset:s.value},y:"center"}}}return null}t.parseBackgroundPosition=j
var L=/\s*to\s*(left|right|top|bottom)\s*(left|right|top|bottom)?\s*/gy,E={top:0*Math.PI/2,right:1*Math.PI/2,bottom:2*Math.PI/2,left:3*Math.PI/2},V={top:{right:1*Math.PI/4,left:7*Math.PI/4},right:{top:1*Math.PI/4,bottom:3*Math.PI/4},bottom:{right:3*Math.PI/4,left:5*Math.PI/4},left:{top:7*Math.PI/4,bottom:5*Math.PI/4}}
var N=/\s*\(\s*/gy,A=/\s*\)\s*/gy,k=/\s*(\)|,)\s*/gy
function F(e,t){void 0===t&&(t=0)
var o=h(e,t)
if(!o)return null
var r=o.end,n=w(e,r)
if(n){r=n.end
return{start:t,end:r,value:{argb:o.value,offset:n.value}}}return{start:t,end:r,value:{argb:o.value}}}t.parseColorStop=F
var O=/\s*linear-gradient\s*/gy
function M(e,t){void 0===t&&(t=0)
O.lastIndex=t
var o=O.exec(e)
if(!o)return null
var r=O.lastIndex,n=Math.PI,i=[],a=function(e,t,o){N.lastIndex=t
var r=N.exec(e)
if(!r)return null
var n=N.lastIndex,i=[]
A.lastIndex=n
var a=A.exec(e)
if(a)return{start:t,end:n,value:i}
for(var s=0;;s++){var u=o(e,n,s)
if(!u)return null
n=u.end
i.push(u)
k.lastIndex=n
var l=k.exec(e)
if(!l)return null
n=k.lastIndex
if(","!==l[1]&&")"===l[1])return{start:t,end:n,value:i}}}(e,r,function(e,t,o){if(0===o){var r=C(e,t)||function(e,t){void 0===t&&(t=0)
L.lastIndex=t
var o=L.exec(e)
if(!o)return null
var r=L.lastIndex,n=o[1]
if(o[2]){var i=o[2],a=V[n][i]
return void 0===a?null:{start:t,end:r,value:a}}return{start:t,end:r,value:E[n]}}(e,t)
if(r){n=r.value
return r}}var a=F(e,t)
if(a){i.push(a.value)
return a}return null})
if(!a)return null
r=a.end
return{start:t,end:r,value:{angle:n,colors:i}}}t.parseLinearGradient=M
var R=/\s*(\/)\s*/gy
function D(e,t){R.lastIndex=t
var o=R.exec(e)
if(!o)return null
var r=R.lastIndex
return{start:t,end:r,value:"/"}}t.parseBackground=function(e,t){void 0===t&&(t=0)
for(var o={},r=t;r<e.length;){var i=y(e,r),a=h(e,r,i)
if(a){o.color=a.value
r=a.end}else{var s=v(e,r,i)
if(s){o.repeat=s.value
r=s.end}else{var u=j(e,r,i)
if(u){u.value.text=e.substring(u.start,u.end)
o.position=u.value
r=u.end
var l=D(e,r)
if(l){r=l.end
var c=T(e,r)
if(!c)return null
o.size=c.value
r=c.end}}else{var d=n(e,r)
if(d){o.image=d.value
r=d.end}else{var p=M(e,r)
if(!p)return null
o.image=p.value
r=p.end}}}}}return{start:t,end:r,value:o}}
var B=/\*/gy
function U(e,t){void 0===t&&(t=0)
B.lastIndex=t
var o=B.exec(e)
if(!o)return null
var r=B.lastIndex
return{start:t,end:r,value:{type:"*"}}}t.parseUniversalSelector=U
var W=/(#|\.|:|\b)([_-\w][_-\w\d]*)/gy
function G(e,t){void 0===t&&(t=0)
W.lastIndex=t
var o=W.exec(e)
if(!o)return null
var r=W.lastIndex,n=o[1],i=o[2],a={type:n,identifier:i}
return{start:t,end:r,value:a}}t.parseSimpleIdentifierSelector=G
var H=/\[\s*([_-\w][_-\w\d]*)\s*(?:(=|\^=|\$=|\*=|\~=|\|=)\s*(?:([_-\w][_-\w\d]*)|"((?:[^\\"]|\\(?:"|n|r|f|\\|0-9a-f))*)"|'((?:[^\\']|\\(?:'|n|r|f|\\|0-9a-f))*)')\s*)?\]/gy
function z(e,t){H.lastIndex=t
var o=H.exec(e)
if(!o)return null
var r=H.lastIndex,n=o[1]
if(o[2]){var i=o[2],a=o[3]||o[4]||o[5]
return{start:t,end:r,value:{type:"[]",property:n,test:i,value:a}}}return{start:t,end:r,value:{type:"[]",property:n}}}t.parseAttributeSelector=z
function q(e,t){void 0===t&&(t=0)
return U(e,t)||G(e,t)||z(e,t)}t.parseSimpleSelector=q
function X(e,t){var o=q(e,t)
if(!o)return null
for(var r=o.end,n=[];o;){n.push(o.value)
r=o.end
o=q(e,r)}return{start:t,end:r,value:n}}t.parseSimpleSelectorSequence=X
var K=/\s*(\+|~|>)?\s*/gy
function Y(e,t){void 0===t&&(t=0)
K.lastIndex=t
var o=K.exec(e)
if(!o)return null
var r=K.lastIndex,n=o[1]||" "
return{start:t,end:r,value:n}}t.parseCombinator=Y
var $=/\s*/gy
t.parseSelector=function(e,t){void 0===t&&(t=0)
var o=t
$.lastIndex=o
var r=$.exec(e)
r&&(o=$.lastIndex)
var n,i,a=[],s=!0
do{var u=X(e,o)
if(!u){if(s)return null
break}o=u.end
n&&(i[1]=n.value)
i=[u.value,void 0]
a.push(i)
n=Y(e,o)
n&&(o=n.end)
s=n&&" "!==n.value}while(n)
return{start:t,end:o,value:a}}
var Z=/[\s\t\n\r\f]*/gmy,Q=/'((?:[^\n\r\f\']|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)(:?'|$)/gmy,J=/"((?:[^\n\r\f\"]|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)(:?"|$)/gmy,ee=/(\/\*(?:[^\*]|\*[^\/])*\*\/)/gmy,te=/[\+\-]?(?:\d+\.\d+|\d+|\.\d+)(?:[eE][\+\-]?\d+)?/gmy,oe=/-?(?:(?:[a-zA-Z_]|[^\x00-\x7F]|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))(?:[a-zA-Z_0-9\-]*|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)/gmy,re=function(){function e(e){this.text=e
this.nextInputCodePointIndex=0}e.prototype.tokenize=function(){var e,t=[]
do{e=this.consumeAToken()
t.push(e)}while(e)
return t}
e.prototype.consumeAToken=function(){if(this.reconsumedInputToken){var e=this.reconsumedInputToken
this.reconsumedInputToken=null
return e}var t=this.text[this.nextInputCodePointIndex]
switch(t){case'"':case"'":return this.consumeAStringToken()
case"(":case")":case",":case":":case";":case"[":case"]":case"{":case"}":this.nextInputCodePointIndex++
return t
case"#":return this.consumeAHashToken()||this.consumeADelimToken()
case" ":case"\t":case"\n":case"\r":case"\f":return this.consumeAWhitespace()
case"@":return this.consumeAtKeyword()||this.consumeADelimToken()
case"\\":return this.consumeAnIdentLikeToken()||this.consumeADelimToken()
case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":return this.consumeANumericToken()
case"u":case"U":if("+"===this.text[this.nextInputCodePointIndex+1]){var o=this.text[this.nextInputCodePointIndex+2]
if(o>="0"&&o<="9"||"?"===o)throw new Error("Unicode tokens not supported!")}return this.consumeAnIdentLikeToken()||this.consumeADelimToken()
case"$":case"*":case"^":case"|":case"~":return this.consumeAMatchToken()||this.consumeADelimToken()
case"-":return this.consumeANumericToken()||this.consumeAnIdentLikeToken()||this.consumeCDC()||this.consumeADelimToken()
case"+":case".":return this.consumeANumericToken()||this.consumeADelimToken()
case"/":return this.consumeAComment()||this.consumeADelimToken()
case"<":return this.consumeCDO()||this.consumeADelimToken()
case void 0:return
default:return this.consumeAnIdentLikeToken()||this.consumeADelimToken()}}
e.prototype.consumeADelimToken=function(){return{type:2,text:this.text[this.nextInputCodePointIndex++]}}
e.prototype.consumeAWhitespace=function(){Z.lastIndex=this.nextInputCodePointIndex
Z.exec(this.text)
this.nextInputCodePointIndex=Z.lastIndex
return" "}
e.prototype.consumeAHashToken=function(){this.nextInputCodePointIndex++
var e=this.consumeAName()
if(e)return{type:12,text:"#"+e.text}
this.nextInputCodePointIndex--
return null}
e.prototype.consumeCDO=function(){if("\x3c!--"===this.text.substr(this.nextInputCodePointIndex,4)){this.nextInputCodePointIndex+=4
return"\x3c!--"}return null}
e.prototype.consumeCDC=function(){if("--\x3e"===this.text.substr(this.nextInputCodePointIndex,3)){this.nextInputCodePointIndex+=3
return"--\x3e"}return null}
e.prototype.consumeAMatchToken=function(){if("="===this.text[this.nextInputCodePointIndex+1]){var e=this.text.substr(this.nextInputCodePointIndex,2)
this.nextInputCodePointIndex+=2
return e}return null}
e.prototype.consumeANumericToken=function(){te.lastIndex=this.nextInputCodePointIndex
var e=te.exec(this.text)
if(!e)return null
this.nextInputCodePointIndex=te.lastIndex
if("%"===this.text[this.nextInputCodePointIndex])return{type:4,text:e[0]}
var t=this.consumeAName()
return t?{type:5,text:e[0]+t.text}:{type:3,text:e[0]}}
e.prototype.consumeAnIdentLikeToken=function(){var e=this.consumeAName()
if(!e)return null
if("("===this.text[this.nextInputCodePointIndex]){this.nextInputCodePointIndex++
return"url"===e.text.toLowerCase()?this.consumeAURLToken():{type:8,name:e.text,text:e.text+"("}}return e}
e.prototype.consumeAStringToken=function(){var e,t=this.text[this.nextInputCodePointIndex]
if("'"===t){Q.lastIndex=this.nextInputCodePointIndex
e=Q.exec(this.text)
if(!e)return null
this.nextInputCodePointIndex=Q.lastIndex}else if('"'===t){J.lastIndex=this.nextInputCodePointIndex
e=J.exec(this.text)
if(!e)return null
this.nextInputCodePointIndex=J.lastIndex}return{type:1,text:e[0]}}
e.prototype.consumeAURLToken=function(){var e=this.nextInputCodePointIndex-3-1,t={type:7,text:void 0}
this.consumeAWhitespace()
if(this.nextInputCodePointIndex>=this.text.length)return t
var o=this.text[this.nextInputCodePointIndex]
if('"'===o||"'"===o){var r=this.consumeAStringToken()
t.text=r.text
this.consumeAWhitespace()
if(")"===this.text[this.nextInputCodePointIndex]||this.nextInputCodePointIndex>=this.text.length){this.nextInputCodePointIndex++
var n=this.nextInputCodePointIndex
t.text=this.text.substring(e,n)
return t}return null}for(;this.nextInputCodePointIndex<this.text.length;){var i=this.text[this.nextInputCodePointIndex++]
switch(i){case")":return t
case" ":case"\t":case"\n":case"\r":case"\f":this.consumeAWhitespace()
if(")"===this.text[this.nextInputCodePointIndex]){this.nextInputCodePointIndex++
return t}return null
case'"':case"'":return null
case"\\":throw new Error("Escaping not yet supported!")
default:t.text+=i}}return t}
e.prototype.consumeAName=function(){oe.lastIndex=this.nextInputCodePointIndex
var e=oe.exec(this.text)
if(!e)return null
this.nextInputCodePointIndex=oe.lastIndex
return{type:6,text:e[0]}}
e.prototype.consumeAtKeyword=function(){this.nextInputCodePointIndex++
var e=this.consumeAName()
if(e)return{type:11,text:e.text}
this.nextInputCodePointIndex--
return null}
e.prototype.consumeAComment=function(){if("*"===this.text[this.nextInputCodePointIndex+1]){ee.lastIndex=this.nextInputCodePointIndex
var e=ee.exec(this.text)
if(!e)return null
this.nextInputCodePointIndex=ee.lastIndex
return this.consumeAToken()}return null}
e.prototype.reconsumeTheCurrentInputToken=function(e){this.reconsumedInputToken=e}
e.prototype.parseAStylesheet=function(){this.topLevelFlag=!0
var e={rules:this.consumeAListOfRules()}
return e}
e.prototype.consumeAListOfRules=function(){for(var e,t=[];e=this.consumeAToken();){switch(e){case" ":continue
case"\x3c!--":case"--\x3e":if(this.topLevelFlag)continue
this.reconsumeTheCurrentInputToken(e)
var o=this.consumeAnAtRule()
o&&t.push(o)
continue}if(11!==e.type){this.reconsumeTheCurrentInputToken(e)
var r=this.consumeAQualifiedRule()
r&&t.push(r)}else{this.reconsumeTheCurrentInputToken(e)
o=this.consumeAnAtRule()
o&&t.push(o)}}return t}
e.prototype.consumeAnAtRule=function(){for(var e=this.consumeAToken(),t={type:"at-rule",name:e.text,prelude:[],block:void 0};e=this.consumeAToken();){if(";"===e)return t
if("{"===e){t.block=this.consumeASimpleBlock(e)
return t}if(9===e.type&&"{"===e.associatedToken){t.block=e
return t}this.reconsumeTheCurrentInputToken(e)
var o=this.consumeAComponentValue()
o&&t.prelude.push(o)}return t}
e.prototype.consumeAQualifiedRule=function(){for(var e,t={type:"qualified-rule",prelude:[],block:void 0};e=this.consumeAToken();){if("{"===e){var o=this.consumeASimpleBlock(e)
t.block=o
return t}if(9===e.type){var r=e
if("{"===r.associatedToken){t.block=r
return t}}this.reconsumeTheCurrentInputToken(e)
var n=this.consumeAComponentValue()
n&&t.prelude.push(n)}return null}
e.prototype.consumeAComponentValue=function(){var e=this.consumeAToken()
switch(e){case"{":case"[":case"(":this.nextInputCodePointIndex++
return this.consumeASimpleBlock(e)}return"object"==typeof e&&8===e.type?this.consumeAFunction(e.name):e}
e.prototype.consumeASimpleBlock=function(e){for(var t,o={"[":"]","{":"}","(":")"}[e],r=this.nextInputCodePointIndex-1,n={type:9,text:void 0,associatedToken:e,values:[]};t=this.text[this.nextInputCodePointIndex];){if(t===o){this.nextInputCodePointIndex++
var i=this.nextInputCodePointIndex
n.text=this.text.substring(r,i)
return n}var a=this.consumeAComponentValue()
a&&n.values.push(a)}n.text=this.text.substring(r)
return n}
e.prototype.consumeAFunction=function(e){for(var t=this.nextInputCodePointIndex,o={type:14,name:e,text:void 0,components:[]};;){if(this.nextInputCodePointIndex>=this.text.length){o.text=e+"("+this.text.substring(t)
return o}var r=this.text[this.nextInputCodePointIndex]
switch(r){case")":this.nextInputCodePointIndex++
var n=this.nextInputCodePointIndex
o.text=e+"("+this.text.substring(t,n)
return o
default:var i=this.consumeAComponentValue()
i&&o.components.push(i)}}}
return e}()
t.CSS3Parser=re
var ne=function(){function e(){}e.prototype.parseStylesheet=function(e){return{type:"stylesheet",stylesheet:{rules:this.parseRules(e.rules)}}}
e.prototype.parseRules=function(e){var t=this
return e.map(function(e){return t.parseRule(e)})}
e.prototype.parseRule=function(e){return"at-rule"===e.type?this.parseAtRule(e):"qualified-rule"===e.type?this.parseQualifiedRule(e):void 0}
e.prototype.parseAtRule=function(e){if("import"===e.name)return{import:e.prelude.map(function(e){return"string"==typeof e?e:e.text}).join("").trim(),type:"import"}}
e.prototype.parseQualifiedRule=function(e){return{type:"rule",selectors:this.preludeToSelectorsStringArray(e.prelude),declarations:this.ruleBlockToDeclarations(e.block.values)}}
e.prototype.ruleBlockToDeclarations=function(e){for(var t=[],o="",r="",n="property",i=0;i<e.length;i++){var a=e[i]
if("property"===n)":"===a?n="value":o+="string"==typeof a?a:a.text
else if(";"===a){o=o.trim()
r=r.trim()
t.push({type:"declaration",property:o,value:r})
o=""
r=""
n="property"}else r+="string"==typeof a?a:a.text}o=o.trim()
r=r.trim();(o||r)&&t.push({type:"declaration",property:o,value:r})
return t}
e.prototype.preludeToSelectorsStringArray=function(e){var t=[],o=""
e.forEach(function(e){if("string"==typeof e)if(","===e){o&&t.push(o.trim())
o=""}else o+=e
else"object"==typeof e&&(o+=e.text)})
o&&t.push(o.trim())
return t}
return e}()
t.CSSNativeScript=ne
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/css/parser.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/css/parser.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/data/observable-array/observable-array.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/data/observable/observable.js"),i=o("../node_modules/tns-core-modules/utils/types.js"),a=function(){function e(){}e.Add="add"
e.Delete="delete"
e.Update="update"
e.Splice="splice"
return e}()
t.ChangeType=a
var s="change",u=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
1===arguments.length&&Array.isArray(arguments[0])?t._array=arguments[0].slice():t._array=Array.apply(null,arguments)
t._addArgs={eventName:s,object:t,action:a.Add,index:null,removed:new Array,addedCount:1}
t._deleteArgs={eventName:s,object:t,action:a.Delete,index:null,removed:null,addedCount:0}
return t}t.prototype.getItem=function(e){return this._array[e]}
t.prototype.setItem=function(e,t){var o=this._array[e]
this._array[e]=t
this.notify({eventName:s,object:this,action:a.Update,index:e,removed:[o],addedCount:1})}
Object.defineProperty(t.prototype,"length",{get:function(){return this._array.length},set:function(e){i.isNumber(e)&&this._array&&this._array.length!==e&&this.splice(e,this._array.length-e)},enumerable:!0,configurable:!0})
t.prototype.toString=function(){return this._array.toString()}
t.prototype.toLocaleString=function(){return this._array.toLocaleString()}
t.prototype.concat=function(){this._addArgs.index=this._array.length
var e=this._array.concat.apply(this._array,arguments)
return e}
t.prototype.join=function(e){return this._array.join(e)}
t.prototype.pop=function(){this._deleteArgs.index=this._array.length-1
var e=this._array.pop()
this._deleteArgs.removed=[e]
this.notify(this._deleteArgs)
this._notifyLengthChange()
return e}
t.prototype.push=function(){this._addArgs.index=this._array.length
if(1===arguments.length&&Array.isArray(arguments[0]))for(var e=arguments[0],t=0,o=e.length;t<o;t++)this._array.push(e[t])
else this._array.push.apply(this._array,arguments)
this._addArgs.addedCount=this._array.length-this._addArgs.index
this.notify(this._addArgs)
this._notifyLengthChange()
return this._array.length}
t.prototype._notifyLengthChange=function(){var e=this._createPropertyChangeData("length",this._array.length)
this.notify(e)}
t.prototype.reverse=function(){return this._array.reverse()}
t.prototype.shift=function(){var e=this._array.shift()
this._deleteArgs.index=0
this._deleteArgs.removed=[e]
this.notify(this._deleteArgs)
this._notifyLengthChange()
return e}
t.prototype.slice=function(e,t){return this._array.slice(e,t)}
t.prototype.sort=function(e){return this._array.sort(e)}
t.prototype.splice=function(e,t){var o=this._array.length,r=this._array.splice.apply(this._array,arguments)
this.notify({eventName:s,object:this,action:a.Splice,index:e,removed:r,addedCount:this._array.length+r.length-o})
this._array.length!==o&&this._notifyLengthChange()
return r}
t.prototype.unshift=function(){var e=this._array.length,t=this._array.unshift.apply(this._array,arguments)
this._addArgs.index=0
this._addArgs.addedCount=t-e
this.notify(this._addArgs)
this._notifyLengthChange()
return t}
t.prototype.indexOf=function(e,t){for(var o=t||0,r=o,n=this._array.length;r<n;r++)if(this._array[r]===e)return r
return-1}
t.prototype.lastIndexOf=function(e,t){for(var o=t||this._array.length-1,r=o;r>=0;r--)if(this._array[r]===e)return r
return-1}
t.prototype.every=function(e,t){return this._array.every(e,t)}
t.prototype.some=function(e,t){return this._array.some(e,t)}
t.prototype.forEach=function(e,t){this._array.forEach(e,t)}
t.prototype.map=function(e,t){return this._array.map(e,t)}
t.prototype.filter=function(e,t){return this._array.filter(e,t)}
t.prototype.reduce=function(e,t){return void 0!==t?this._array.reduce(e,t):this._array.reduce(e)}
t.prototype.reduceRight=function(e,t){return void 0!==t?this._array.reduceRight(e,t):this._array.reduceRight(e)}
t.changeEvent=s
return t}(n.Observable)
t.ObservableArray=u
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/data/observable-array/observable-array.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/data/observable-array/observable-array.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/data/observable/observable.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
var r=0,n=function(){function e(e){this.wrapped=e}e.unwrap=function(t){return t instanceof e?t.wrapped:t}
e.wrap=function(e){var t=i[r++%5]
t.wrapped=e
return t}
return e}()
t.WrappedValue=n
var i=[new n(null),new n(null),new n(null),new n(null),new n(null)],a=function(){function e(){this._observers={}}e.prototype.get=function(e){return this[e]}
e.prototype.set=function(e,t){var o=this[e]
if(this[e]!==t){var r=n.unwrap(t)
this[e]=r
this.notifyPropertyChange(e,r,o)}}
e.prototype.on=function(e,t,o){this.addEventListener(e,t,o)}
e.prototype.once=function(e,t,o){var r=this._getEventList(e,!0)
r.push({callback:t,thisArg:o,once:!0})}
e.prototype.off=function(e,t,o){this.removeEventListener(e,t,o)}
e.prototype.addEventListener=function(e,t,o){if("string"!=typeof e)throw new TypeError("Events name(s) must be string.")
if("function"!=typeof t)throw new TypeError("callback must be function.")
for(var r=e.split(","),n=0,i=r.length;n<i;n++){var a=r[n].trim(),s=this._getEventList(a,!0)
s.push({callback:t,thisArg:o})}}
e.prototype.removeEventListener=function(e,t,o){if("string"!=typeof e)throw new TypeError("Events name(s) must be string.")
if(t&&"function"!=typeof t)throw new TypeError("callback must be function.")
for(var r=e.split(","),n=0,i=r.length;n<i;n++){var a=r[n].trim()
if(t){var s=this._getEventList(a,!1)
if(s){var u=this._indexOfListener(s,t,o)
u>=0&&s.splice(u,1)
0===s.length&&delete this._observers[a]}}else{this._observers[a]=void 0
delete this._observers[a]}}}
e.prototype.notify=function(e){var t=this._observers[e.eventName]
if(t)for(var o=t.length-1;o>=0;o--){var r=t[o]
r.once&&t.splice(o,1)
r.thisArg?r.callback.apply(r.thisArg,[e]):r.callback(e)}}
e.prototype.notifyPropertyChange=function(e,t,o){this.notify(this._createPropertyChangeData(e,t,o))}
e.prototype.hasListeners=function(e){return e in this._observers}
e.prototype._createPropertyChangeData=function(t,o,r){return{eventName:e.propertyChangeEvent,object:this,propertyName:t,value:o,oldValue:r}}
e.prototype._emit=function(e){for(var t=e.split(","),o=0,r=t.length;o<r;o++){var n=t[o].trim()
this.notify({eventName:n,object:this})}}
e.prototype._getEventList=function(e,t){if(!e)throw new TypeError("EventName must be valid string.")
var o=this._observers[e]
if(!o&&t){o=[]
this._observers[e]=o}return o}
e.prototype._indexOfListener=function(e,t,o){for(var r=0;r<e.length;r++){var n=e[r]
if(o){if(n.callback===t&&n.thisArg===o)return r}else if(n.callback===t)return r}return-1}
e.propertyChangeEvent="propertyChange"
return e}()
t.Observable=a
var s=function(e){__extends(t,e)
function t(){var t=null!==e&&e.apply(this,arguments)||this
t._map={}
return t}t.prototype.get=function(e){return this._map[e]}
t.prototype.set=function(e,t){var o=this._map[e]
if(o!==t){var r=n.unwrap(t)
this._map[e]=r
this.notifyPropertyChange(e,r,o)}}
return t}(a)
function u(e,t,o){void 0===o&&(o=!1)
Object.keys(t).forEach(function(r){var n,i,s=t[r]
!o||Array.isArray(s)||!s||"object"!=typeof s||s instanceof a||(s=l(s))
n=e,i=r,Object.defineProperty(n,i,{get:function(){return n._map[i]},set:function(e){n.set(i,e)},enumerable:!0,configurable:!0})
e.set(r,s)})}t.fromObject=function(e){var t=new s
u(t,e,!1)
return t}
function l(e){var t=new s
u(t,e,!0)
return t}t.fromObjectRecursive=l
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/data/observable/observable.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/data/observable/observable.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/debugger/debugger.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
var r,n,i
t.getNetwork=function(){return r}
t.setNetwork=function(e){r=e}
t.getDOM=function(){return n}
t.setDOM=function(e){n=e}
t.getCSS=function(){return i}
t.setCSS=function(e){i=e}
!function(e){e.responseReceived=function(e,n,i){var a=e.toString(),s=i["Content-Type"]||i["content-type"]||"application/octet-stream",u=i["Content-Length"]||i["content-length"],l=parseInt(u,10)
isNaN(l)&&(l=0)
var c={url:n.url||"",status:n.statusCode,statusText:n.statusText||"",headers:i,mimeType:s,fromDiskCache:!1,connectionReused:!0,connectionId:0,encodedDataLength:l,securityState:"info"},d={requestId:a,type:r(c.mimeType),response:c,timestamp:t()}
o.__inspector.responseReceived(d)
o.__inspector.loadingFinished({requestId:a,timestamp:t(),encodedDataLength:l})
var p,f="Document"===d.type||"Script"===d.type
if(f)p=n.responseAsString
else if("Image"===d.type){var h=n.responseAsImage
if(h){var m=new java.io.ByteArrayOutputStream
h.compress(android.graphics.Bitmap.CompressFormat.PNG,100,m)
var y=android.util.Base64.encodeToString(m.toByteArray(),android.util.Base64.DEFAULT)
p=y}}var g={requestId:a,data:p,hasTextContent:f}
o.__inspector.dataForRequestId(g)}
e.requestWillBeSent=function(e,r){var n={url:r.url,method:r.method,headers:r.headers||{},postData:r.content?r.content.toString():"",initialPriority:"Medium",referrerPolicy:"no-referrer-when-downgrade"},i={requestId:e.toString(),url:n.url,request:n,timestamp:t(),type:"Document",wallTime:0}
o.__inspector.requestWillBeSent(i)}
function t(){var e=new Date
return Math.round(e.getTime()/1e3)}function r(e){var t="Document"
e&&(0===e.indexOf("image")?t="Image":-1===e.indexOf("javascript")&&-1===e.indexOf("json")||(t="Script"))
return t}}(t.NetworkAgent||(t.NetworkAgent={}))
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/debugger/debugger.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/debugger/debugger.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/debugger/devtools-elements.common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/debugger/dom-node.js"),a=o("../node_modules/tns-core-modules/utils/utils.js"),s=function(){return o("../node_modules/tns-core-modules/ui/frame/frame.js").topmost()}
function u(e,t){n||(n=o("../node_modules/tns-core-modules/ui/core/properties/properties.js").unsetValue)
e[t]=n}function l(e){var t,o=i.getNodeById(e)
o&&(t=o.viewRef.get())
return t}t.getDocument=function(){var e=s()
if(e){try{e.ensureDomNode()}catch(e){console.log("ERROR in getDocument(): "+e)}return e.domNode.toObject()}}
t.getComputedStylesForNode=function(e){var t=l(e)
return t?t.domNode.getComputedProperties():[]}
t.removeNode=a.mainThreadify(function(e){var t=l(e)
if(t){var o=t.parent
o.removeChild?o.removeChild(t):o.content===t?o.content=null:console.log("Can't remove child from "+o)}})
t.setAttributeAsText=a.mainThreadify(function(e,t,o){var r=l(e)
if(r){var n=!!o.trim()
if(t){var i=t.split("=")
if(2===i.length){var a=i[0],s=i[1].replace(/['"]+/g,"")
if(o!==a&&n){u(r,o)
r[a]=s}else r[n?o:a]=s}}else u(r,o)
r.domNode.loadAttributes()}})
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/debugger/devtools-elements.common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/debugger/devtools-elements.common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/debugger/devtools-elements.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/debugger/devtools-elements.common.js"),i=o("../node_modules/tns-core-modules/debugger/dom-node.js")
t.attachDOMInspectorEventCallbacks=function(e){i.registerInspectorEvents(e)
var t=e.childNodeInserted
e.childNodeInserted=function(e,o,r){t(e,o,JSON.stringify(r.toObject()))}}
t.attachDOMInspectorCommandCallbacks=function(e){e.getDocument=function(){return JSON.stringify(n.getDocument())}
e.getComputedStylesForNode=function(e){return JSON.stringify(n.getComputedStylesForNode(e))}
e.removeNode=n.removeNode
e.setAttributeAsText=n.setAttributeAsText}
t.attachCSSInspectorCommandCallbacks=function(e){}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/debugger/devtools-elements.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/debugger/devtools-elements.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/debugger/dom-node.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n={},i=1,a=9,s=["effectivePaddingLeft","effectivePaddingBottom","effectivePaddingRight","effectivePaddingTop","effectiveBorderTopWidth","effectiveBorderRightWidth","effectiveBorderBottomWidth","effectiveBorderLeftWidth","effectiveMinWidth","effectiveMinHeight","effectiveWidth","effectiveHeight","effectiveMarginLeft","effectiveMarginTop","effectiveMarginRight","effectiveMarginBottom","nodeName","nodeType","decodeWidth","decodeHeight","ng-reflect-items","domNode","touchListenerIsSet","bindingContext","nativeView"]
function u(e){var t
return function(){return t||(t=e())}}var l,c=u(function(){return o("../node_modules/tns-core-modules/ui/styling/style-properties.js").PercentLength.convertToString}),d=u(function(){return o("../node_modules/tns-core-modules/ui/core/properties/properties.js").getSetProperties}),p=u(function(){return o("../node_modules/tns-core-modules/ui/core/properties/properties.js").getComputedCssValues})
t.registerInspectorEvents=function(e){l=e}
function f(e){l&&e(l)}function h(e){return null==e?"":"object"==typeof e&&e.unit?c()(e):e+""}function m(e){var t=e[0],o=e[1]
return"_"!==t[0]&&((null===o||"object"!=typeof o)&&!(s.indexOf(t)>=0))}t.getNodeById=function(e){return n[e]}
var y=function(){function e(e){this.nodeValue=""
this.attributes=[]
this.viewRef=new WeakRef(e)
this.nodeType="Frame"===e.typeName?a:i
this.nodeId=e._domId
this.nodeName=e.typeName
this.localName=this.nodeName
this.loadAttributes()
t=this,n[t.nodeId]=t
var t}e.prototype.loadAttributes=function(){var e=this
this.attributes=[]
d()(this.viewRef.get()).filter(m).forEach(function(t){return e.attributes.push(t[0],t[1]+"")})}
Object.defineProperty(e.prototype,"children",{get:function(){var e=this.viewRef.get()
if(!e)return[]
var t=[]
e.eachChild(function(e){e.ensureDomNode()
t.push(e.domNode)
return!0})
return t},enumerable:!0,configurable:!0})
e.prototype.onChildAdded=function(e){var t=this
f(function(o){var r,n=t.viewRef.get()
n.eachChild(function(t){if(t===e)return!1
r=t
return!0})
var i=r?r._domId:0
e.ensureDomNode()
o.childNodeInserted(t.nodeId,i,e.domNode)})}
e.prototype.onChildRemoved=function(e){var t=this
f(function(o){o.childNodeRemoved(t.nodeId,e._domId)})}
e.prototype.attributeModified=function(e,t){var o=this
f(function(r){s.indexOf(e)<0&&r.attributeModified(o.nodeId,e,h(t))})}
e.prototype.attributeRemoved=function(e){var t=this
f(function(o){o.attributeRemoved(t.nodeId,e)})}
e.prototype.getComputedProperties=function(){var e=this.viewRef.get()
if(!e)return[]
var t=p()(e).filter(function(e){return"_"!==e[0][0]}).map(function(e){return{name:e[0],value:h(e[1])}})
return t}
e.prototype.dispose=function(){e=this,delete n[e.nodeId]
var e
this.viewRef.clear()}
e.prototype.toObject=function(){return{nodeId:this.nodeId,nodeType:this.nodeType,nodeName:this.nodeName,localName:this.localName,nodeValue:this.nodeValue,children:this.children.map(function(e){return e.toObject()}),attributes:this.attributes,backendNodeId:0}}
return e}()
t.DOMNode=y
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/debugger/dom-node.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/debugger/dom-node.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/fetch/fetch.js":function(e,t,o){(function(r){!function(){"use strict"
t.XMLHttpRequest=r.XMLHttpRequest
t.FormData=r.FormData
if(!t.XMLHttpRequest){var e=o("../node_modules/tns-core-modules/xhr/xhr.js")
t.XMLHttpRequest=e.XMLHttpRequest
t.FormData=e.FormData}function n(e){"string"!=typeof e&&(e=e.toString())
if(/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name")
return e.toLowerCase()}function i(e){"string"!=typeof e&&(e=e.toString())
return e}function a(e){this.map={}
e instanceof a?e.forEach(function(e,t){this.append(t,e)},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}a.prototype.append=function(e,t){e=n(e)
t=i(t)
var o=this.map[e]
if(!o){o=[]
this.map[e]=o}o.push(t)}
a.prototype.delete=function(e){delete this.map[n(e)]}
a.prototype.get=function(e){var t=this.map[n(e)]
return t?t[0]:null}
a.prototype.getAll=function(e){return this.map[n(e)]||[]}
a.prototype.has=function(e){return this.map.hasOwnProperty(n(e))}
a.prototype.set=function(e,t){this.map[n(e)]=[i(t)]}
a.prototype.forEach=function(e,t){Object.getOwnPropertyNames(this.map).forEach(function(o){this.map[o].forEach(function(r){e.call(t,r,o,this)},this)},this)}
function s(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"))
e.bodyUsed=!0}function u(e){return new Promise(function(t,o){e.onload=function(){t(e.result)}
e.onerror=function(){o(e.error)}})}function l(e){var t=new FileReader
t.readAsArrayBuffer(e)
return u(t)}var c={blob:"FileReader"in t&&"Blob"in t&&function(){try{new Blob
return!0}catch(e){return!1}}(),formData:"FormData"in t}
function d(){this.bodyUsed=!1
this._initBody=function(e){this._bodyInit=e
if("string"==typeof e)this._bodyText=e
else if(c.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e
else if(c.formData&&t.FormData.prototype.isPrototypeOf(e))this._bodyFormData=e
else{if(e)throw new Error("unsupported BodyInit type")
this._bodyText=""}}
if(c.blob){this.blob=function(){var e=s(this)
if(e)return e
if(this._bodyBlob)return Promise.resolve(this._bodyBlob)
if(this._bodyFormData)throw new Error("could not read FormData body as blob")
return Promise.resolve(new Blob([this._bodyText]))}
this.arrayBuffer=function(){return this.blob().then(l)}
this.text=function(){var e=s(this)
if(e)return e
if(this._bodyBlob)return function(e){var t=new FileReader
t.readAsText(e)
return u(t)}(this._bodyBlob)
if(this._bodyFormData)throw new Error("could not read FormData body as text")
return Promise.resolve(this._bodyText)}}else this.text=function(){var e=s(this)
return e||Promise.resolve(this._bodyText)}
c.formData&&(this.formData=function(){return this.text().then(h)})
this.json=function(){return this.text().then(JSON.parse)}
return this}var p=["DELETE","GET","HEAD","OPTIONS","POST","PUT"]
function f(e,t){t=t||{}
this.url=e
this.credentials=t.credentials||"omit"
this.headers=new a(t.headers)
this.method=(o=t.method||"GET",r=o.toUpperCase(),p.indexOf(r)>-1?r:o)
var o,r
this.mode=t.mode||null
this.referrer=null
if(("GET"===this.method||"HEAD"===this.method)&&t.body)throw new TypeError("Body not allowed for GET or HEAD requests")
this._initBody(t.body)}function h(e){var o=new t.FormData
e.trim().split("&").forEach(function(e){if(e){var t=e.split("="),r=t.shift().replace(/\+/g," "),n=t.join("=").replace(/\+/g," ")
o.append(decodeURIComponent(r),decodeURIComponent(n))}})
return o}function m(e){var t=new a,o=e.getAllResponseHeaders().trim().split("\n")
o.forEach(function(e){var o=e.trim().split(":"),r=o.shift().trim(),n=o.join(":").trim()
t.append(r,n)})
return t}d.call(f.prototype)
function y(e,t){t||(t={})
this._initBody(e)
this.type="default"
this.url=null
this.status=t.status
this.ok=this.status>=200&&this.status<300
this.statusText=t.statusText
this.headers=t.headers instanceof a?t.headers:new a(t.headers)
this.url=t.url||""}d.call(y.prototype)
t.Headers=a
t.Request=f
t.Response=y
t.fetch=function(e,o){var r
r=f.prototype.isPrototypeOf(e)&&!o?e:new f(e,o)
return new Promise(function(e,o){var n=new t.XMLHttpRequest
n.onload=function(){var t=1223===n.status?204:n.status
if(t<100||t>599)o(new TypeError("Network request failed"))
else{var r={status:t,statusText:n.statusText,headers:m(n),url:"responseURL"in n?n.responseURL:/^X-Request-URL:/m.test(n.getAllResponseHeaders())?n.getResponseHeader("X-Request-URL"):void 0}
e(new y(n.responseText,r))}}
n.onerror=function(e){o(new TypeError(["Network request failed:",e.message].join(" ")))}
n.open(r.method,r.url,!0)
"include"===r.credentials&&(n.withCredentials=!0)
"responseType"in n&&c.blob&&(n.responseType="blob")
r.headers.forEach(function(e,t){n.setRequestHeader(t,e)})
n.send(void 0===r._bodyInit?null:r._bodyInit)})}
t.fetch.polyfill=!0}()
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/fetch/fetch.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/fetch/fetch.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/file-system/file-system-access.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/text/text.js"),a=o("../node_modules/tns-core-modules/application/application.js")
function s(){n||(n=a.getNativeApplication().getApplicationContext())
return n}var u=function(){function e(){this._pathSeparator="/"}e.prototype.getLastModified=function(e){var t=new java.io.File(e)
return new Date(t.lastModified())}
e.prototype.getFileSize=function(e){var t=new java.io.File(e)
return t.length()}
e.prototype.getParent=function(e,t){try{var o=new java.io.File(e),r=o.getParentFile()
return{path:r.getAbsolutePath(),name:r.getName()}}catch(e){t&&t(e)
return}}
e.prototype.getFile=function(e,t){return this.ensureFile(new java.io.File(e),!1,t)}
e.prototype.getFolder=function(e,t){var o=new java.io.File(e),r=this.ensureFile(o,!0,t)
if(r)return{path:r.path,name:r.name}}
e.prototype.eachEntity=function(e,t,o){t&&this.enumEntities(e,t,o)}
e.prototype.getEntities=function(e,t){var o,r=new Array
this.enumEntities(e,function(e){r.push(e)
return!0},function(e){t&&t(e)
o=!0})
return o?null:r}
e.prototype.fileExists=function(e){var t=new java.io.File(e)
return t.exists()}
e.prototype.folderExists=function(e){var t=new java.io.File(e)
return t.exists()&&t.isDirectory()}
e.prototype.deleteFile=function(e,t){try{var o=new java.io.File(e)
if(!o.isFile()){t&&t({message:"The specified parameter is not a File entity."})
return}o.delete()||t&&t({message:"File deletion failed"})}catch(e){t&&t(e)}}
e.prototype.deleteFolder=function(e,t){try{var o=new java.io.File(e)
if(!o.getCanonicalFile().isDirectory()){t&&t({message:"The specified parameter is not a Folder entity."})
return}this.deleteFolderContent(o)
o.delete()||t&&t({message:"Folder deletion failed."})}catch(e){t&&t(e)}}
e.prototype.emptyFolder=function(e,t){try{var o=new java.io.File(e)
if(!o.getCanonicalFile().isDirectory()){t&&t({message:"The specified parameter is not a Folder entity."})
return}this.deleteFolderContent(o)}catch(e){t&&t(e)}}
e.prototype.rename=function(e,t,o){var r=new java.io.File(e)
if(r.exists()){var n=new java.io.File(t)
n.exists()?o&&o(new Error("A file with the same name already exists.")):r.renameTo(n)||o&&o(new Error("Failed to rename file '"+e+"' to '"+t+"'"))}else o&&o(new Error("The file to rename does not exist"))}
e.prototype.getDocumentsFolderPath=function(){var e=s().getFilesDir()
return e.getAbsolutePath()}
e.prototype.getLogicalRootPath=function(){var e=s().getFilesDir()
return e.getCanonicalPath()}
e.prototype.getTempFolderPath=function(){var e=s().getCacheDir()
return e.getAbsolutePath()}
e.prototype.getCurrentAppPath=function(){return this.getLogicalRootPath()+"/app"}
e.prototype.read=function(e,t){try{var o=new java.io.File(e),r=new java.io.FileInputStream(o),n=Array.create("byte",o.length()),i=new java.io.DataInputStream(r)
i.readFully(n)
return n}catch(e){t&&t(e)}}
e.prototype.write=function(e,t,o){try{var r=new java.io.File(e),n=new java.io.FileOutputStream(r)
n.write(t,0,t.length)
n.close()}catch(e){o&&o(e)}}
e.prototype.readText=function(t,o,r){try{var n=new java.io.File(t),a=new java.io.FileInputStream(n),s=r
s||(s=i.encoding.UTF_8)
for(var u=new java.io.InputStreamReader(a,s),l=new java.io.BufferedReader(u),c=void 0,d="";;){c=l.readLine()
if(null===c)break
d.length>0&&(d+="\n")
d+=c}s===i.encoding.UTF_8&&(d=e._removeUtf8Bom(d))
l.close()
return d}catch(e){o&&o(e)}}
e._removeUtf8Bom=function(e){65279===e.charCodeAt(0)&&(e=e.slice(1))
return e}
e.prototype.writeText=function(e,t,o,r){try{var n=new java.io.File(e),a=new java.io.FileOutputStream(n),s=r
s||(s=i.encoding.UTF_8)
var u=new java.io.OutputStreamWriter(a,s)
u.write(t)
u.close()}catch(e){o&&o(e)}}
e.prototype.deleteFolderContent=function(e){var t,o=e.listFiles()
if(0===o.length)return!0
for(var r=!1,n=0;n<o.length;n++){t=o[n]
if(t.getCanonicalFile().isDirectory()){r=this.deleteFolderContent(t)
if(!r)break}r=t.delete()}return r}
e.prototype.ensureFile=function(e,t,o){try{if(!e.exists()){var r=void 0
if(t)r=e.mkdirs()
else{e.getParentFile().mkdirs()
r=e.createNewFile()}if(!r){o&&o("Failed to create new java File for path "+e.getAbsolutePath())
return}e.setReadable(!0)
e.setWritable(!0)}var n=e.getAbsolutePath()
return{path:n,name:e.getName(),extension:this.getFileExtension(n)}}catch(e){o&&o(e)
return}}
e.prototype.getFileExtension=function(e){var t=e.lastIndexOf(".")
return t&&t>=0&&t<e.length?e.substring(t):""}
e.prototype.enumEntities=function(e,t,o){try{var r=new java.io.File(e)
if(!r.getCanonicalFile().isDirectory()){o&&o("There is no folder existing at path "+e)
return}for(var n=r.listFiles(),i=n.length,a=void 0,s=void 0,u=0;u<i;u++){r=n[u]
a={path:r.getAbsolutePath(),name:r.getName()}
r.isFile()&&(a.extension=this.getFileExtension(a.path))
s=t(a)
if(!1===s)break}}catch(e){o&&o(e)}}
e.prototype.getPathSeparator=function(){return this._pathSeparator}
e.prototype.normalizePath=function(e){var t=new java.io.File(e)
return t.getAbsolutePath()}
e.prototype.joinPath=function(e,t){var o=new java.io.File(e),r=new java.io.File(o,t)
return r.getPath()}
e.prototype.joinPaths=function(e){if(!e||0===e.length)return""
if(1===e.length)return e[0]
for(var t=e[0],o=1;o<e.length;o++)t=this.joinPath(t,e[o])
return t}
return e}()
t.FileSystemAccess=u
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/file-system/file-system-access.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/file-system/file-system-access.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/file-system/file-system.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i,a=o("../node_modules/tns-core-modules/file-system/file-system-access.js"),s=o("../node_modules/tns-core-modules/profiling/profiling.js")
function u(){n||(n=new a.FileSystemAccess)
return n}function l(e){var t=new p
t._path=e.path
t._name=e.name
t._extension=e.extension
return t}function c(e){var t=f.documents()
if(e.path===t.path)return t
var o=f.temp()
if(e.path===o.path)return o
var r=new h
r._path=e.path
r._name=e.name
return r}var d=function(){function e(){}Object.defineProperty(e.prototype,"parent",{get:function(){var e=u().getParent(this.path,function(e){throw e})
if(e)return c(e)},enumerable:!0,configurable:!0})
e.prototype.remove=function(){var e=this
return new Promise(function(t,o){var r=!1
e.removeSync(function(e){r=!0
o(e)})
r||t()})}
e.prototype.removeSync=function(e){if(this._isKnown)e&&e({message:"Cannot delete known folder."})
else{var t=u()
this instanceof p?t.deleteFile(this.path,e):this instanceof h&&t.deleteFolder(this.path,e)}}
e.prototype.rename=function(e){var t=this
return new Promise(function(o,r){var n=!1
t.renameSync(e,function(e){n=!0
r(e)})
n||o()})}
e.prototype.renameSync=function(e,t){if(this._isKnown)t&&t(new Error("Cannot rename known folder."))
else{var o=this.parent
if(o){var r=u(),n=o.path,i=r.joinPath(n,e)
r.rename(this.path,i,function(e){t&&t(e)
return null})
this._path=i
this._name=e
this instanceof p&&(this._extension=r.getFileExtension(i))}else t&&t(new Error("No parent folder."))}}
Object.defineProperty(e.prototype,"name",{get:function(){return this._name},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"path",{get:function(){return this._path},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"lastModified",{get:function(){var e=this._lastModified
this._lastModified||(e=this._lastModified=u().getLastModified(this.path))
return e},enumerable:!0,configurable:!0})
return e}()
t.FileSystemEntity=d
var p=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.fromPath=function(e){var t=u().getFile(e,function(e){throw e})
if(t)return l(t)}
t.exists=function(e){return u().fileExists(e)}
Object.defineProperty(t.prototype,"extension",{get:function(){return this._extension},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"isLocked",{get:function(){return!!this._locked},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"size",{get:function(){return u().getFileSize(this.path)},enumerable:!0,configurable:!0})
t.prototype.readSync=function(e){this.checkAccess()
this._locked=!0
var t=this,o=u().read(this.path,function(o){t._locked=!1
e&&e(o)})
this._locked=!1
return o}
t.prototype.writeSync=function(e,t){this.checkAccess()
try{this._locked=!0
var o=this
u().write(this.path,e,function(e){o._locked=!1
t&&t(e)})}finally{this._locked=!1}}
t.prototype.readText=function(e){var t=this
return new Promise(function(o,r){var n=!1,i=t.readTextSync(function(e){n=!0
r(e)},e)
n||o(i)})}
t.prototype.readTextSync=function(e,t){this.checkAccess()
this._locked=!0
var o=this,r=u().readText(this.path,function(t){o._locked=!1
e&&e(t)},t)
this._locked=!1
return r}
t.prototype.writeText=function(e,t){var o=this
return new Promise(function(r,n){var i=!1
o.writeTextSync(e,function(e){i=!0
n(e)},t)
i||r()})}
t.prototype.writeTextSync=function(e,t,o){this.checkAccess()
try{this._locked=!0
var r=this
u().writeText(this.path,e,function(e){r._locked=!1
t&&t(e)},o)}finally{this._locked=!1}}
t.prototype.checkAccess=function(){if(this.isLocked)throw new Error("Cannot access a locked file.")}
__decorate([s.profile],t.prototype,"readTextSync",null)
return t}(d)
t.File=p
var f,h=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.fromPath=function(e){var t=u().getFolder(e,function(e){throw e})
if(t)return c(t)}
t.exists=function(e){return u().folderExists(e)}
t.prototype.contains=function(e){var t=u(),o=t.joinPath(this.path,e)
return!!t.fileExists(o)||t.folderExists(o)}
t.prototype.clear=function(){var e=this
return new Promise(function(t,o){var r=!1
e.clearSync(function(e){r=!0
o(e)})
r||t()})}
t.prototype.clearSync=function(e){u().emptyFolder(this.path,e)}
Object.defineProperty(t.prototype,"isKnown",{get:function(){return this._isKnown},enumerable:!0,configurable:!0})
t.prototype.getFile=function(e){var t=u(),o=t.joinPath(this.path,e),r=t.getFile(o,function(e){throw e})
if(r)return l(r)}
t.prototype.getFolder=function(e){var t=u(),o=t.joinPath(this.path,e),r=t.getFolder(o,function(e){throw e})
if(r)return c(r)}
t.prototype.getEntities=function(){var e=this
return new Promise(function(t,o){var r=!1,n=e.getEntitiesSync(function(e){r=!0
o(e)})
r||t(n)})}
t.prototype.getEntitiesSync=function(e){var t=u().getEntities(this.path,e)
if(!t)return null
for(var o=new Array,r=0;r<t.length;r++)t[r].extension?o.push(l(t[r])):o.push(c(t[r]))
return o}
t.prototype.eachEntity=function(e){if(e){u().eachEntity(this.path,function(t){var o
o=t.extension?l(t):c(t)
return e(o)},function(e){throw e})}}
return t}(d)
t.Folder=h
!function(e){var t,r,n
e.documents=function(){if(!t){var e=u().getDocumentsFolderPath()
t=new h
t._path=e
t._isKnown=!0}return t}
e.temp=function(){if(!r){var e=u().getTempFolderPath()
r=new h
r._path=e
r._isKnown=!0}return r}
e.currentApp=function(){if(!n){var e=u().getCurrentAppPath()
n=new h
n._path=e
n._isKnown=!0}return n}
!function(e){function t(e){i||(i=o("../node_modules/tns-core-modules/platform/platform.js"))
if(!i.isIOS)throw new Error('The "'+e+'" known folder is available on iOS only!')}var r,n,a,s,l,d,p,f
e.library=function(){t("library")
if(!r){var e=h(5)
if(e){r=e.folder
r._path=e.path
r._isKnown=!0}}return r}
e.developer=function(){t("developer")
if(!n){var e=h(6)
if(e){n=e.folder
n._path=e.path
n._isKnown=!0}}return n}
e.desktop=function(){t("desktop")
if(!a){var e=h(12)
if(e){a=e.folder
a._path=e.path
a._isKnown=!0}}return a}
e.downloads=function(){t("downloads")
if(!s){var e=h(15)
if(e){s=e.folder
s._path=e.path
s._isKnown=!0}}return s}
e.movies=function(){t("movies")
if(!l){var e=h(17)
if(e){l=e.folder
l._path=e.path
l._isKnown=!0}}return l}
e.music=function(){t("music")
if(!d){var e=h(18)
if(e){d=e.folder
d._path=e.path
d._isKnown=!0}}return d}
e.pictures=function(){t("pictures")
if(!p){var e=h(19)
if(e){p=e.folder
p._path=e.path
p._isKnown=!0}}return p}
e.sharedPublic=function(){t("sharedPublic")
if(!f){var e=h(21)
if(e){f=e.folder
f._path=e.path
f._isKnown=!0}}return f}
function h(e){var t=u(),o=t.getKnownPath(e),r=t.getExistingFolder(o)
if(r)return{folder:c(r),path:o}}}(e.ios||(e.ios={}))}(f=t.knownFolders||(t.knownFolders={}))
!function(e){e.normalize=function(e){return u().normalizePath(e)}
e.join=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]
var o=u()
return o.joinPaths(e)}
e.separator=u().getPathSeparator()}(t.path||(t.path={}))
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/file-system/file-system.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/file-system/file-system.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/globals/globals.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
o("../node_modules/tns-core-modules/globals/ts-helpers.js")
o("../node_modules/tns-core-modules/globals/register-module-helpers.js")
r.moduleMerge=function(e,t){for(var o in e)t[o]=e[o]}
r.zonedCallback=function(e){return r.zone?r.zone.bind(e):r.Zone?r.Zone.current.wrap(e):e}
r.registerModule("timer",function(){return o("../node_modules/tns-core-modules/timer/timer.js")})
r.registerModule("ui/dialogs",function(){return o("../node_modules/tns-core-modules/ui/dialogs/dialogs.js")})
r.registerModule("xhr",function(){return o("../node_modules/tns-core-modules/xhr/xhr.js")})
r.registerModule("fetch",function(){return o("../node_modules/tns-core-modules/fetch/fetch.js")})
r.System={import:function(e){return new Promise(function(t,o){try{t(r.require(e))}catch(e){o(e)}})}}
function n(e,t){Object.defineProperty(r,e,{get:function(){var o=r.loadModule(t),n=o[e]
Object.defineProperty(r,e,{value:n,configurable:!0,writable:!0})
return n},configurable:!0})}var i
function a(){if(r.__snapshot||r.__snapshotEnabled){if(!i){var e=o("../node_modules/tns-core-modules/timer/timer.js"),t=o("../node_modules/tns-core-modules/ui/dialogs/dialogs.js"),a=o("../node_modules/tns-core-modules/xhr/xhr.js"),s=o("../node_modules/tns-core-modules/fetch/fetch.js")
i=i||{setTimeout:e.setTimeout,clearTimeout:e.clearTimeout,setInterval:e.setInterval,clearInterval:e.clearInterval,alert:t.alert,confirm:t.confirm,prompt:t.prompt,login:t.login,action:t.action,XMLHttpRequest:a.XMLHttpRequest,FormData:a.FormData,fetch:s.fetch,Headers:s.Headers,Request:s.Request,Response:s.Response}}var u=o("../node_modules/tns-core-modules/console/console.js").Console
r.console=r.console||new u
Object.assign(r,i)}else{n("setTimeout","timer")
n("clearTimeout","timer")
n("setInterval","timer")
n("clearInterval","timer")
n("alert","ui/dialogs")
n("confirm","ui/dialogs")
n("prompt","ui/dialogs")
n("login","ui/dialogs")
n("action","ui/dialogs")
n("XMLHttpRequest","xhr")
n("FormData","xhr")
n("fetch","fetch")
n("Headers","fetch")
n("Request","fetch")
n("Response","fetch")}}t.install=a
a()
function s(e,t,o){if(o){var r=o.value
o.value=function(){for(var e=[],o=0;o<arguments.length;o++)e[o]=arguments[o]
console.log(t.toString()+" is deprecated")
return r.apply(this,e)}
return o}console.log((e&&e.name||e)+" is deprecated")
return e}t.Deprecated=s
r.Deprecated=s
function u(e,t,o){if(o){var r=o.value
o.value=function(){for(var e=[],o=0;o<arguments.length;o++)e[o]=arguments[o]
console.log(t.toString()+" is experimental")
return r.apply(this,e)}
return o}console.log((e&&e.name||e)+" is experimental")
return e}t.Experimental=u
r.Experimental=u
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/globals/globals.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/globals/globals.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/globals/register-module-helpers.js":function(e,t,o){(function(t){var o=new Map,r=new Set,n={".js":".js",".ts":".js",".css":".css",".scss":".css",".less":".css",".sass":".css",".xml":".xml"}
t.moduleResolvers=[t.require]
t.registerModule=function(e,t){o.set(e,{loader:t,moduleId:e})}
t._unregisterModule=function(e){o.delete(e)}
t._isModuleLoadedForUI=function(e){return r.has(e)}
t.registerWebpackModules=function(e,r){void 0===r&&(r={})
e.keys().forEach(function(i){var a=i.lastIndexOf("."),s=i.substr(0,a),u=i.substr(a),l=r[u]||n[u]||u,c=u!==l,d=s+l,p=function(t){o.set(t,{moduleId:i,loader:function(){return e(i)}})}
if(d.startsWith("./")&&d.endsWith(".js")){var f=[d.substr(2,d.length-5),d.substr(0,d.length-3),d.substr(2)]
f.forEach(function(e){!c&&t.moduleExists(e)||p(e)})}else if(d.startsWith("./")){var h=[d.substr(2)]
h.forEach(function(e){t.moduleExists(e)||p(e)})}!c&&t.moduleExists(d)||p(d)})}
t.moduleExists=function(e){return o.has(e)}
t.loadModule=function(e,n){void 0===n&&(n=!1)
var i=o.get(e)
if(i){n&&r.add(i.moduleId)
var a=i.loader(e)
a.enableAutoAccept&&a.enableAutoAccept()
return a}for(var s=function(t){var r=t(e)
if(r){o.set(e,{moduleId:e,loader:function(){return r}})
return{value:r}}},u=0,l=t.moduleResolvers;u<l.length;u++){var c=l[u],d=s(c)
if("object"==typeof d)return d.value}}
t.getRegisteredModules=function(){return Array.from(o.keys())}
if(t._isModuleLoadedForUI&&t._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/globals/register-module-helpers.js")){e.hot.accept()
e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/globals/register-module-helpers.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/globals/ts-helpers.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
r.__extends||(r.__extends=function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])
function r(){this.constructor=e}e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)})
for(var n=o("../node_modules/tslib/tslib.es6.js"),i=0,a=Object.keys(n);i<a.length;i++){var s=a[i]
"function"==typeof n[s]&&(s in r||(r[s]=n[s]))}if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/globals/ts-helpers.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/globals/ts-helpers.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/http/http-request/http-request-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
t.getFilenameFromUrl=function(e){var t,r=o("../node_modules/tns-core-modules/file-system/file-system.js"),n=e.lastIndexOf("/")+1,i=e.lastIndexOf("?")
t=-1!==i?e.substring(n,i):e.substring(n)
var a=r.path.join(r.knownFolders.documents().path,t)
return a}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/http/http-request/http-request-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/http/http-request/http-request-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/http/http-request/http-request.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/http/http-request/http-request-common.js"),a=o("../node_modules/tns-core-modules/debugger/debugger.js")
!function(e){e[e.UTF8=0]="UTF8"
e[e.GBK=1]="GBK"}(n=t.HttpResponseEncoding||(t.HttpResponseEncoding={}))
var s,u,l,c,d=0,p={}
function f(){c||(c=new org.nativescript.widgets.Async.CompleteCallback({onComplete:function(e,t){!function(e,t){var n=p[e]
delete p[e]
if(t.error){n.rejectCallback(new Error(t.error.toString()))
return}var u={}
if(t.headers)for(var c=t.headers,d=c.size(),f=void 0,h=0;h<d;h++){f=c.get(h)
y(u,f.key,f.value)}r.__inspector&&r.__inspector.isConnected&&a.NetworkAgent.responseReceived(e,t,u)
n.resolveCallback({content:{raw:t.raw,toString:function(e){var o
o=e?m(t.raw,e):t.responseAsString
if("string"==typeof o)return o
throw new Error("Response content may not be converted to string")},toJSON:function(e){var o,r,n
o=e?m(t.raw,e):t.responseAsString
return r=o,n=r.trim(),n.lastIndexOf(")")===n.length-1?JSON.parse(n.substring(n.indexOf("(")+1,n.lastIndexOf(")"))):JSON.parse(n)},toImage:function(){s||(s=o("../node_modules/tns-core-modules/image-source/image-source.js"))
return new Promise(function(e,o){null!=t.responseAsImage?e(s.fromNativeSource(t.responseAsImage)):o(new Error("Response content may not be converted to an Image"))})},toFile:function(e){l||(l=o("../node_modules/tns-core-modules/file-system/file-system.js"))
e||(e=i.getFilenameFromUrl(n.url))
var r
try{var a=l.File.fromPath(e),s=new java.io.File(e)
r=new java.io.FileOutputStream(s)
r.write(t.raw.toByteArray())
return a}catch(t){throw new Error("Cannot save file with path: "+e+".")}finally{r&&r.close()}}},statusCode:t.statusCode,headers:u})}(t,e)},onError:function(e,t){!function(e,t){var o=p[t]
delete p[t]
o&&o.rejectCallback(new Error(e))}(e,t)}}))}function h(e){if("string"!=typeof e.url)throw new Error("Http request must provide a valid url.")
var t=new org.nativescript.widgets.Async.Http.RequestOptions
t.url=e.url
"string"==typeof e.method&&(t.method=e.method);("string"==typeof e.content||e.content instanceof FormData)&&(t.content=e.content.toString())
"number"==typeof e.timeout&&(t.timeout=e.timeout)
"boolean"==typeof e.dontFollowRedirects&&(t.dontFollowRedirects=e.dontFollowRedirects)
if(e.headers){var r=new java.util.ArrayList,n=org.nativescript.widgets.Async.Http.KeyValuePair
for(var i in e.headers)r.add(new n(i,e.headers[i]+""))
t.headers=r}u||(u=o("../node_modules/tns-core-modules/platform/platform.js"))
var a=u.screen.mainScreen
t.screenWidth=a.widthPixels
t.screenHeight=a.heightPixels
return t}t.request=function(e){if(null!=e)return new Promise(function(t,o){try{var n=h(e)
r.__inspector&&r.__inspector.isConnected&&a.NetworkAgent.requestWillBeSent(d,e)
var i={url:e.url,resolveCallback:t,rejectCallback:o}
p[d]=i
f()
org.nativescript.widgets.Async.Http.MakeRequest(n,c,new java.lang.Integer(d))
d++}catch(e){o(e)}})}
function m(e,t){var o="UTF-8"
t===n.GBK&&(o="GBK")
return e.toString(o)}function y(e,t,o){if(e[t])if(Array.isArray(e[t]))e[t].push(o)
else{var r=[e[t]]
r.push(o)
e[t]=r}else e[t]=o}t.addHeader=y
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/http/http-request/http-request.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/http/http-request/http-request.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/http/http.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/http/http-request/http-request.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/http/http-request/http-request.js"))
t.getString=function(e){return new Promise(function(t,o){n.request("string"==typeof e?{url:e,method:"GET"}:e).then(function(e){try{var r=e.content.toString()
t(r)}catch(e){o(e)}},function(e){return o(e)})})}
t.getJSON=function(e){return new Promise(function(t,o){n.request("string"==typeof e?{url:e,method:"GET"}:e).then(function(e){try{var r=e.content.toJSON()
t(r)}catch(e){o(e)}},function(e){return o(e)})})}
t.getImage=function(e){return new Promise(function(t,o){n.request("string"==typeof e?{url:e,method:"GET"}:e).then(function(e){try{t(e.content.toImage())}catch(e){o(e)}},function(e){o(e)})})}
t.getFile=function(e,t){return new Promise(function(o,r){n.request("string"==typeof e?{url:e,method:"GET"}:e).then(function(e){try{var n=e.content.toFile(t)
o(n)}catch(e){r(e)}},function(e){return r(e)})})}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/http/http.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/http/http.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/image-asset/image-asset-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/data/observable/observable.js"),i=o("../node_modules/tns-core-modules/platform/platform.js"),a=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
t._options={keepAspectRatio:!0,autoScaleFactor:!0}
return t}Object.defineProperty(t.prototype,"options",{get:function(){return this._options},set:function(e){this._options=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"nativeImage",{get:function(){return this._nativeImage},set:function(e){this._nativeImage=e},enumerable:!0,configurable:!0})
t.prototype.getImageAsync=function(e){}
return t}(n.Observable)
t.ImageAssetBase=a
function s(e,t,o,r){var n=e/o,i=t/r,a=Math.min(n,i)
return{width:Math.floor(e/a),height:Math.floor(t/a)}}t.getAspectSafeDimensions=s
t.getRequestedImageSize=function(e,t){var o=i.screen.mainScreen,r=t.width||Math.min(e.width,o.widthPixels),n=t.height||Math.min(e.height,o.heightPixels)
if(t&&t.keepAspectRatio){var a=s(e.width,e.height,r,n)
r=a.width
n=a.height}return{width:r,height:n}}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/image-asset/image-asset-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/image-asset/image-asset-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/image-asset/image-asset.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/image-asset/image-asset-common.js"),i=o("../node_modules/tns-core-modules/file-system/file-system.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/image-asset/image-asset-common.js"))
var a=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this,r="string"==typeof t?t.trim():""
0===r.indexOf("~/")&&(r=i.path.join(i.knownFolders.currentApp().path,r.replace("~/","")))
o.android=r
return o}Object.defineProperty(t.prototype,"android",{get:function(){return this._android},set:function(e){this._android=e},enumerable:!0,configurable:!0})
t.prototype.getImageAsync=function(e){var t=new android.graphics.BitmapFactory.Options
t.inJustDecodeBounds=!0
var o=android.graphics.BitmapFactory.decodeFile(this.android,t),r={width:t.outWidth,height:t.outHeight},i=n.getRequestedImageSize(r,this.options),a=org.nativescript.widgets.image.Fetcher.calculateInSampleSize(t.outWidth,t.outHeight,i.width,i.height),s=new android.graphics.BitmapFactory.Options
s.inSampleSize=a
try{var u=null
o=android.graphics.BitmapFactory.decodeFile(this.android,s)
if(o){i.width===o.getWidth()&&i.height===o.getHeight()||(o=android.graphics.Bitmap.createScaledBitmap(o,i.width,i.height,!0))
var l=function(e){var t=0,o=new android.media.ExifInterface(e),r=o.getAttributeInt(android.media.ExifInterface.TAG_ORIENTATION,android.media.ExifInterface.ORIENTATION_NORMAL)
switch(r){case android.media.ExifInterface.ORIENTATION_ROTATE_90:t=90
break
case android.media.ExifInterface.ORIENTATION_ROTATE_180:t=180
break
case android.media.ExifInterface.ORIENTATION_ROTATE_270:t=270}return t}(this.android)
if(0!==l){var c=new android.graphics.Matrix
c.postRotate(l)
o=android.graphics.Bitmap.createBitmap(o,0,0,o.getWidth(),o.getHeight(),c,!0)}}o||(u="Asset '"+this.android+"' cannot be found.")
e(o,u)}catch(t){e(null,t)}}
return t}(n.ImageAssetBase)
t.ImageAsset=a
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/image-asset/image-asset.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/image-asset/image-asset.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/image-source/image-source.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/file-system/file-system.js"),i=o("../node_modules/tns-core-modules/utils/utils.js")
t.isFileOrResourcePath=i.isFileOrResourcePath
var a,s,u,l=o("../node_modules/tns-core-modules/application/application.js")
function c(){s||(s=l.getNativeApplication())
return s}var d=function(){function e(){}e.prototype.fromAsset=function(e){var t=this
return new Promise(function(o,r){e.getImageAsync(function(e,n){if(e){t.setNativeSource(e)
o(t)}else r(n)})})}
e.prototype.loadFromResource=function(e){this.android=null
var t=function(){u||(u=c().getResources())
return u}()
if(t){var o=t.getIdentifier(e,"drawable",c().getPackageName())
if(0<o){var r=t.getDrawable(o)
r&&r.getBitmap&&(this.android=r.getBitmap())}}return null!=this.android}
e.prototype.fromResource=function(e){var t=this
return new Promise(function(o,r){o(t.loadFromResource(e))})}
e.prototype.setRotationAngleFromFile=function(e){this.rotationAngle=0
var t=new android.media.ExifInterface(e),o=t.getAttributeInt(android.media.ExifInterface.TAG_ORIENTATION,android.media.ExifInterface.ORIENTATION_NORMAL)
switch(o){case android.media.ExifInterface.ORIENTATION_ROTATE_90:this.rotationAngle=90
break
case android.media.ExifInterface.ORIENTATION_ROTATE_180:this.rotationAngle=180
break
case android.media.ExifInterface.ORIENTATION_ROTATE_270:this.rotationAngle=270}}
e.prototype.loadFromFile=function(e){var t="string"==typeof e?e.trim():""
0===t.indexOf("~/")&&(t=n.path.join(n.knownFolders.currentApp().path,t.replace("~/","")))
this.setRotationAngleFromFile(t)
this.android=android.graphics.BitmapFactory.decodeFile(t,null)
return null!=this.android}
e.prototype.fromFile=function(e){var t=this
return new Promise(function(o,r){o(t.loadFromFile(e))})}
e.prototype.loadFromData=function(e){this.android=android.graphics.BitmapFactory.decodeStream(e)
return null!=this.android}
e.prototype.fromData=function(e){var t=this
return new Promise(function(o,r){o(t.loadFromData(e))})}
e.prototype.loadFromBase64=function(e){if("string"==typeof e){var t=android.util.Base64.decode(e,android.util.Base64.DEFAULT)
this.android=android.graphics.BitmapFactory.decodeByteArray(t,0,t.length)}return null!=this.android}
e.prototype.fromBase64=function(e){var t=this
return new Promise(function(o,r){o(t.loadFromBase64(e))})}
e.prototype.loadFromFontIconCode=function(e,t,o){var r=new android.graphics.Paint
r.setTypeface(t.getAndroidTypeface())
r.setAntiAlias(!0)
o&&r.setColor(o.android)
var n=i.layout.toDevicePixels(t.fontSize)
n||(n=r.getTextSize())
var a=i.layout.getDisplayDensity(),s=n*a
r.setTextSize(s)
var u=new android.graphics.Rect
r.getTextBounds(e,0,e.length,u)
var l=android.graphics.Bitmap.createBitmap(u.width(),u.height(),android.graphics.Bitmap.Config.ARGB_8888),c=new android.graphics.Canvas(l)
c.drawText(e,-u.left,-u.top,r)
this.android=l
return null!=this.android}
e.prototype.setNativeSource=function(e){if(e&&!(e instanceof android.graphics.Bitmap))throw new Error("The method setNativeSource() expects android.graphics.Bitmap instance.")
this.android=e}
e.prototype.saveToFile=function(e,t,o){void 0===o&&(o=100)
if(!this.android)return!1
var r=p(t),n=new java.io.BufferedOutputStream(new java.io.FileOutputStream(e)),i=this.android.compress(r,o,n)
n.close()
return i}
e.prototype.toBase64String=function(e,t){void 0===t&&(t=100)
if(!this.android)return null
var o=p(e),r=new java.io.ByteArrayOutputStream,n=new android.util.Base64OutputStream(r,android.util.Base64.NO_WRAP)
this.android.compress(o,t,n)
n.close()
r.close()
return r.toString()}
Object.defineProperty(e.prototype,"height",{get:function(){return this.android?this.android.getHeight():NaN},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"width",{get:function(){return this.android?this.android.getWidth():NaN},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"rotationAngle",{get:function(){return this._rotationAngle},set:function(e){this._rotationAngle=e},enumerable:!0,configurable:!0})
return e}()
t.ImageSource=d
function p(e){switch(e){case"jpeg":case"jpg":return android.graphics.Bitmap.CompressFormat.JPEG
default:return android.graphics.Bitmap.CompressFormat.PNG}}t.fromAsset=function(e){var t=new d
return t.fromAsset(e)}
function f(e){var t=new d
return t.loadFromResource(e)?t:null}t.fromResource=f
function h(e){var t=new d
return t.loadFromFile(e)?t:null}t.fromFile=h
t.fromData=function(e){var t=new d
return t.loadFromData(e)?t:null}
t.fromFontIconCode=function(e,t,o){var r=new d
return r.loadFromFontIconCode(e,t,o)?r:null}
t.fromBase64=function(e){var t=new d
return t.loadFromBase64(e)?t:null}
t.fromNativeSource=function(e){var t=new d
t.setNativeSource(e)
return t}
t.fromUrl=function(e){a||(a=o("../node_modules/tns-core-modules/http/http.js"))
return a.getImage(e)}
t.fromFileOrResource=function(e){if(!i.isFileOrResourcePath(e))throw new Error(e+" is not a valid file or resource.")
return 0===e.indexOf(i.RESOURCE_PREFIX)?f(e.substr(i.RESOURCE_PREFIX.length)):h(e)}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/image-source/image-source.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/image-source/image-source.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/js-libs/easysax/easysax.js":function(e,t,o){(function(t){e.exports.EasySAXParser=o
function o(){"use strict"
if(!this)return null
this.angularSyntax=!1
function e(){}this.onTextNode=e
this.onStartNode=e
this.onEndNode=e
this.onCDATA=e
this.onError=e
this.onComment=null
this.onQuestion=null
this.onAttention=null
this.is_onComment=this.is_onQuestion=this.is_onAttention=!1
this.isNamespace=!1
this.useNS=null
this.default_xmlns=null
this.xmlns=null
this.nsmatrix={xmlns:this.xmlns}
this.hasSurmiseNS=!1
this.attr_string=""
this.attr_posstart=0
this.attr_res}o.prototype.on=function(e,t){if("function"==typeof t||null===t)switch(e){case"error":this.onError=t||nullFunc
break
case"startNode":this.onStartNode=t||nullFunc
break
case"endNode":this.onEndNode=t||nullFunc
break
case"textNode":this.onTextNode=t||nullFunc
break
case"cdata":this.onCDATA=t||nullFunc
break
case"comment":this.onComment=t
this.is_onComment=!!t
break
case"question":this.onQuestion=t
this.is_onQuestion=!!t
break
case"attention":this.onAttention=t
this.is_onAttention=!!t}}
o.prototype.ns=function(e,t){if(e&&"string"==typeof e&&t){var o,r,n,i={}
for(n in t){r=t[n]
if("string"==typeof r){e===r&&(o=!0)
i[n]=r}}if(o){this.isNamespace=!0
this.default_xmlns=e
this.useNS=i}}}
o.prototype.parse=function(e){if("string"==typeof e){if(this.isNamespace){this.nsmatrix={xmlns:this.default_xmlns}
parse(e)
this.nsmatrix=!1}else parse(e)
this.attr_res=!0}}
var r={constructor:!1,hasOwnProperty:!1,isPrototypeOf:!1,propertyIsEnumerable:!1,toLocaleString:!1,toString:!1,valueOf:!1,quot:'"',QUOT:'"',amp:"&",AMP:"&",nbsp:" ",apos:"'",lt:"<",LT:"<",gt:">",GT:">",copy:"©",laquo:"«",raquo:"»",reg:"®",deg:"°",plusmn:"±",sup2:"²",sup3:"³",micro:"µ",para:"¶"}
function n(e,t,o,n){return n?r[n]||"":t?String.fromCharCode(t):String.fromCharCode(parseInt(o,16))}function i(e,t){e=String(e)
if(e.length>3&&-1!==e.indexOf("&")){-1!==e.indexOf("&gt;")&&(e=e.replace(/&gt;/g,">"));-1!==e.indexOf("&lt;")&&(e=e.replace(/&lt;/g,"<"));-1!==e.indexOf("&quot;")&&(e=e.replace(/&quot;/g,'"'));-1!==e.indexOf("&")&&(e=e.replace(/&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/gi,n))}return e}o.prototype.allowedAngularAttributeChars=function(e){return!!this.angularSyntax&&(40===e||41===e||91===e||93===e||94===e||35===e)}
o.prototype.getAttrs=function(){if(null!==this.attr_res)return this.attr_res
var e,t,o,r,n,a,s,u,l={},c=this.attr_string,d=this.attr_posstart,p=c.length,f=!!this.hasSurmiseNS&&[],h="",m=!1,y=!1
e:for(;d<p;d++){o=c.charCodeAt(d)
if(!(32===o||o<14&&o>8)){if(o<65&&!this.allowedAngularAttributeChars(o)||o>122||o>90&&o<97&&!this.allowedAngularAttributeChars(o))return this.attr_res=!1
for(t=d+1;t<p;t++){o=c.charCodeAt(t)
if(o>96&&o<123||o>64&&o<91||o>47&&o<59||45===o||95===o||46===o){if(y){t--
break}}else if(!this.allowedAngularAttributeChars(o)){if(!(32===o||o>8&&o<14)){if(61===o){y=!1
break}if(!y)return this.attr_res=!1
break}y=!0}}e=c.substring(d,t).trim()
m=!0
if("xmlns:xmlns"===e)return this.attr_res=!1
o=c.charCodeAt(t+1)
for(;(o=c.charCodeAt(t+1))&&(32===o||o>8&&o<14);)t++
if(!y)if(34===o)t=c.indexOf('"',d=t+2)
else{if(39!==o)return this.attr_res=!1
t=c.indexOf("'",d=t+2)}if(-1===t)return this.attr_res=!1
if(t+1<p&&!y){o=c.charCodeAt(t+1)
if(o>32||o<9||o<32&&o>13)return this.attr_res=!1}h=y?"":c.substring(d,t)
d=t
if(this.isNamespace){if(this.hasSurmiseNS){if(u="xmlns"===e?"xmlns":120===e.charCodeAt(0)&&"xmlns:"===e.substr(0,6)&&e.substr(6)){s=this.useNS[i(h)]
if(s){if(this.nsmatrix[u]!==s){if(!a){a=!0
r={}
for(n in this.nsmatrix)r[n]=this.nsmatrix[n]
this.nsmatrix=r}this.nsmatrix[u]=s}}else if(this.nsmatrix[u]){if(!a){a=!0
r={}
for(n in this.nsmatrix)r[n]=this.nsmatrix[n]
this.nsmatrix=r}this.nsmatrix[u]=!1}l[e]=h
continue}f.push(e,h)
continue}o=e.length
for(;--o;)if(58===e.charCodeAt(o)){(o=this.nsmatrix[e.substring(0,o)])&&(l[o+e.substr(o)]=h)
continue e}}l[e]=h
y=!1}}if(!m)return this.attr_res=!0
if(this.hasSurmiseNS)e:for(d=0,p=f.length;d<p;d++){e=f[d++]
o=e.length
for(;--o;)if(58===e.charCodeAt(o)){(o=this.nsmatrix[e.substring(0,o)])&&(l[o+e.substr(o)]=f[d])
continue e}l[e]=f[d]}return this.attr_res=l}
o.prototype.parse=function(e){e=String(e)
var t,o,r,n,a,s,u,l,c,d,p=[],f=[],h=!1,m=!1,y=0,g=0,v=0,b=0,_=0,w=0,P=-2,C=-1
o=e.length
function S(){return e.substring(g,y+1)}function T(){for(;P<C&&C<_;){P=C
C=e.indexOf("\n",C+1);++w}return{line:w,column:_-P}}function x(e){_=e
return T}for(;-1!==y;){l=b>0
g=60===e.charCodeAt(y)?y:e.indexOf("<",y)
if(-1===g){if(p.length){this.onError("end file",x(y))
return}return}if(y!==g&&!l){d=this.onTextNode(e.substring(y,g),i,x(y))
if(!1===d)return}s=e.charCodeAt(g+1)
if(33!==s)if(63!==s){var I=!1
for(v=g,y=-1;v<o;v++){var j=e.charCodeAt(v)
if(I)j===I&&(I=!1)
else if(34===j)I=j
else if(39===j)I=j
else if(62===j){y=v
break}}if(-1==y){this.onError("...>",x(g+1))
return}this.attr_res=!0
if(47===s){m=!1
h=!0
r=t=p.pop()
a=g+2+r.length
if(e.substring(g+2,a)!==r){this.onError("close tagname",x(g+2))
return}for(;a<y;a++){s=e.charCodeAt(a)
if(!(32===s||s>8&&s<14)){this.onError("close tag",x(g+2))
return}}}else{if(47===e.charCodeAt(y-1)){r=t=e.substring(g+1,y-1)
m=!0
h=!0}else{r=t=e.substring(g+1,y)
m=!0
h=!1}if(!(s>96&&s<123||s>64&&s<91)){this.onError("first char nodeName",x(g+1))
return}for(a=1,n=r.length;a<n;a++){s=r.charCodeAt(a)
if(!(s>96&&s<123||s>64&&s<91||s>47&&s<59||45===s||95===s||46===s)){if(32===s||s<14&&s>8){t=r.substring(0,a)
this.attr_res=null
break}this.onError("invalid nodeName",x(g+1))
return}}h||p.push(t)}if(this.isNamespace){if(l){h?m||0==--b&&(this.nsmatrix=f.pop()):b+=1
y+=1
continue}c=this.nsmatrix
if(!h){f.push(this.nsmatrix)
if(!0!==this.attr_res&&(this.hasSurmiseNS=-1!==r.indexOf("xmlns",a))){this.attr_string=r
this.attr_posstart=a
this.getAttrs()
this.hasSurmiseNS=!1}}s=t.indexOf(":")
if(-1!==s){u=this.nsmatrix[t.substring(0,s)]
t=t.substr(s+1)}else u=this.nsmatrix.xmlns
if(!u){if(h)this.nsmatrix=m?c:f.pop()
else{b=1
this.attr_res=!0}y+=1
continue}t=u+":"+t}if(m){this.attr_string=r
this.attr_posstart=a
var L=this
d=this.onStartNode(t,function(){return L.getAttrs()},i,h,S,x(g))
if(!1===d)return
this.attr_res=!0}if(h){d=this.onEndNode(t,i,m,S,x(g))
if(!1===d)return
this.isNamespace&&(this.nsmatrix=m?c:f.pop())}y+=1}else{y=e.indexOf("?>",g)
if(-1===y){this.onError("...?>",x(g))
return}if(this.is_onQuestion){d=this.onQuestion(e.substring(g,y+2),x(g))
if(!1===d)return}y+=2}else{s=e.charCodeAt(g+2)
if(91===s&&"CDATA["===e.substr(g+3,6)){y=e.indexOf("]]>",g)
if(-1===y){this.onError("cdata",x(g))
return}if(!l){d=this.onCDATA(e.substring(g+9,y),!1,x(g))
if(!1===d)return}y+=3
continue}if(45===s&&45===e.charCodeAt(g+3)){y=e.indexOf("--\x3e",g)
if(-1===y){this.onError("expected --\x3e",x(g))
return}if(this.is_onComment&&!l){d=this.onComment(e.substring(g+4,y),i,x(g))
if(!1===d)return}y+=3
continue}y=e.indexOf(">",g+1)
if(-1===y){this.onError('expected ">"',x(g+1))
return}if(this.is_onAttention&&!l){d=this.onAttention(e.substring(g,y+1),i,x(g))
if(!1===d)return}y+=1}}}
if(t._isModuleLoadedForUI&&t._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/js-libs/easysax/easysax.js")){e.hot.accept()
e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/js-libs/easysax/easysax.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/js-libs/esprima/esprima.js":function(e,t,o){(function(t){!function(e){"use strict"
var t,o,r,n,i,a,s,u,l
t={BooleanLiteral:1,EOF:2,Identifier:3,Keyword:4,NullLiteral:5,NumericLiteral:6,Punctuator:7,StringLiteral:8}
o={}
o[t.BooleanLiteral]="Boolean"
o[t.EOF]="<end>"
o[t.Identifier]="Identifier"
o[t.Keyword]="Keyword"
o[t.NullLiteral]="Null"
o[t.NumericLiteral]="Numeric"
o[t.Punctuator]="Punctuator"
o[t.StringLiteral]="String"
r={ArrayExpression:"ArrayExpression",BinaryExpression:"BinaryExpression",CallExpression:"CallExpression",ConditionalExpression:"ConditionalExpression",EmptyStatement:"EmptyStatement",ExpressionStatement:"ExpressionStatement",Identifier:"Identifier",Literal:"Literal",LabeledStatement:"LabeledStatement",LogicalExpression:"LogicalExpression",MemberExpression:"MemberExpression",ObjectExpression:"ObjectExpression",Program:"Program",Property:"Property",ThisExpression:"ThisExpression",UnaryExpression:"UnaryExpression"}
n={UnexpectedToken:"Unexpected token %0",UnknownLabel:"Undefined label '%0'",Redeclaration:"%0 '%1' has already been declared"}
function c(e,t){if(!e)throw new Error("ASSERT: "+t)}function d(e){return e>=48&&e<=57}function p(e){return 10===e||13===e||8232===e||8233===e}function f(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122}function h(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||e>=48&&e<=57}function m(){for(;a<s&&(e=i.charCodeAt(a),32===e||9===e||11===e||12===e||160===e||e>=5760&&" ᠎             　\ufeff".indexOf(String.fromCharCode(e))>0);)++a
var e}function y(){var e,o,r
e=a
o=function(){var e,t
e=a++
for(;a<s;){t=i.charCodeAt(a)
if(!h(t))break;++a}return i.slice(e,a)}()
r=1===o.length?t.Identifier:function(e){return"this"===e}(o)?t.Keyword:"null"===o?t.NullLiteral:"true"===o||"false"===o?t.BooleanLiteral:t.Identifier
return{type:r,value:o,range:[e,a]}}function g(){var e,o,r=a,s=i.charCodeAt(a),u=i[a]
switch(s){case 46:case 40:case 41:case 59:case 44:case 123:case 125:case 91:case 93:case 58:case 63:++a
return{type:t.Punctuator,value:String.fromCharCode(s),range:[r,a]}
default:e=i.charCodeAt(a+1)
if(61===e)switch(s){case 37:case 38:case 42:case 43:case 45:case 47:case 60:case 62:case 124:a+=2
return{type:t.Punctuator,value:String.fromCharCode(s)+String.fromCharCode(e),range:[r,a]}
case 33:case 61:a+=2
61===i.charCodeAt(a)&&++a
return{type:t.Punctuator,value:i.slice(r,a),range:[r,a]}}}o=i[a+1]
if(u===o&&"&|".indexOf(u)>=0){a+=2
return{type:t.Punctuator,value:u+o,range:[r,a]}}if("<>=!+-*%&|^/".indexOf(u)>=0){++a
return{type:t.Punctuator,value:u,range:[r,a]}}w({},n.UnexpectedToken,"ILLEGAL")}function v(){var e,o,r
r=i[a]
c(d(r.charCodeAt(0))||"."===r,"Numeric literal must start with a decimal digit or a decimal point")
o=a
e=""
if("."!==r){e=i[a++]
r=i[a]
"0"===e&&r&&d(r.charCodeAt(0))&&w({},n.UnexpectedToken,"ILLEGAL")
for(;d(i.charCodeAt(a));)e+=i[a++]
r=i[a]}if("."===r){e+=i[a++]
for(;d(i.charCodeAt(a));)e+=i[a++]
r=i[a]}if("e"===r||"E"===r){e+=i[a++]
r=i[a]
"+"!==r&&"-"!==r||(e+=i[a++])
if(d(i.charCodeAt(a)))for(;d(i.charCodeAt(a));)e+=i[a++]
else w({},n.UnexpectedToken,"ILLEGAL")}f(i.charCodeAt(a))&&w({},n.UnexpectedToken,"ILLEGAL")
return{type:t.NumericLiteral,value:parseFloat(e),range:[o,a]}}function b(){var e
m()
if(a>=s)return{type:t.EOF,range:[a,a]}
e=i.charCodeAt(a)
return 40===e||41===e||58===e?g():39===e||34===e?function(){var e,o,r,u=""
e=i[a]
c("'"===e||'"'===e,"String literal must starts with a quote")
o=a;++a
for(;a<s;){r=i[a++]
if(r===e){e=""
break}if("\\"===r){r=i[a++]
if(r&&p(r.charCodeAt(0)))"\r"===r&&"\n"===i[a]&&++a
else switch(r){case"n":u+="\n"
break
case"r":u+="\r"
break
case"t":u+="\t"
break
case"b":u+="\b"
break
case"f":u+="\f"
break
case"v":u+="\v"
break
default:u+=r}}else{if(p(r.charCodeAt(0)))break
u+=r}}""!==e&&w({},n.UnexpectedToken,"ILLEGAL")
return{type:t.StringLiteral,value:u,octal:!1,range:[o,a]}}():f(e)?y():46===e?d(i.charCodeAt(a+1))?v():g():d(e)?v():g()}function _(){var e
e=l
a=e.range[1]
l=b()
a=e.range[1]
return e}function w(e,t){var o,r=Array.prototype.slice.call(arguments,2),n=t.replace(/%(\d)/g,function(e,t){c(t<r.length,"Message reference must be in range")
return r[t]})
o=new Error(n)
o.index=a
o.description=n
throw o}function P(e){w(e,n.UnexpectedToken,e.value)}function C(e){var o=_()
o.type===t.Punctuator&&o.value===e||P(o)}function S(e){return l.type===t.Punctuator&&l.value===e}function T(e){return l.type===t.Keyword&&l.value===e}function x(){var e,o
e=l
m()
e.type!==t.EOF&&e.type!==t.Punctuator||P(e)
o=function(){var e
m()
e=_()
return e.type===t.StringLiteral||e.type===t.NumericLiteral?u.createLiteral(e):u.createIdentifier(e.value)}()
C(":")
return u.createProperty("init",o,F())}function I(){var e,o,r
if(S("("))return function(){var e
C("(")
e=F()
C(")")
return e}()
e=l.type
if(e===t.Identifier)r=u.createIdentifier(_().value)
else if(e===t.StringLiteral||e===t.NumericLiteral)r=u.createLiteral(_())
else if(e===t.Keyword){if(T("this")){_()
r=u.createThisExpression()}}else if(e===t.BooleanLiteral){o=_()
o.value="true"===o.value
r=u.createLiteral(o)}else if(e===t.NullLiteral){o=_()
o.value=null
r=u.createLiteral(o)}else S("[")?r=function(){var e=[]
C("[")
for(;!S("]");)if(S(",")){_()
e.push(null)}else{e.push(F())
S("]")||C(",")}C("]")
return u.createArrayExpression(e)}():S("{")&&(r=function(){var e=[]
C("{")
for(;!S("}");){e.push(x())
S("}")||C(",")}C("}")
return u.createObjectExpression(e)}())
if(r)return r
P(_())}function j(){var e=[]
C("(")
if(!S(")"))for(;a<s;){e.push(F())
if(S(")"))break
C(",")}C(")")
return e}function L(){var e
e=_();(function(e){return e.type===t.Identifier||e.type===t.Keyword||e.type===t.BooleanLiteral||e.type===t.NullLiteral})(e)||P(e)
return u.createIdentifier(e.value)}function E(){C(".")
return L()}function V(){var e
C("[")
e=F()
C("]")
return e}var N=function(){var e,t,o
e=I()
for(;;)if(S("[")){o=V()
e=u.createMemberExpression("[",e,o)}else if(S(".")){o=E()
e=u.createMemberExpression(".",e,o)}else{if(!S("("))break
t=j()
e=u.createCallExpression(e,t)}return e}
function A(){var e,o
if(l.type!==t.Punctuator&&l.type!==t.Keyword)o=N()
else if(S("+")||S("-")||S("!")){e=_()
o=A()
o=u.createUnaryExpression(e.value,o)}else T("delete")||T("void")||T("typeof")?w({},n.UnexpectedToken):o=N()
return o}function k(e){var o=0
if(e.type!==t.Punctuator&&e.type!==t.Keyword)return 0
switch(e.value){case"||":o=1
break
case"&&":o=2
break
case"==":case"!=":case"===":case"!==":o=6
break
case"<":case">":case"<=":case">=":case"instanceof":case"in":o=7
break
case"+":case"-":o=9
break
case"*":case"/":case"%":o=11}return o}var F=function e(){var t,o,r
t=function(){var e,t,o,r,n,i,a,s
a=A()
t=l
o=k(t)
if(0===o)return a
t.prec=o
_()
n=A()
r=[a,t,n]
for(;(o=k(l))>0;){for(;r.length>2&&o<=r[r.length-2].prec;){n=r.pop()
i=r.pop().value
a=r.pop()
e=u.createBinaryExpression(i,a,n)
r.push(e)}t=_()
t.prec=o
r.push(t)
e=A()
r.push(e)}s=r.length-1
e=r[s]
for(;s>1;){e=u.createBinaryExpression(r[s-1].value,r[s-2],e)
s-=2}return e}()
if(S("?")){_()
o=e()
C(":")
r=e()
t=u.createConditionalExpression(t,o,r)}return t}
function O(){var e,o
e=_()
e.type!==t.Identifier&&P(e)
o=S("(")?j():[]
return u.createFilter(e.value,o)}function M(){for(;S("|");){_()
O()}}function R(){m()
!function(){var e
e=a
l=b()
a=e}()
var e=F()
if(e)if(","===l.value||"in"==l.value&&e.type===r.Identifier)!function(e){var o
if(","===l.value){_()
l.type!==t.Identifier&&P(l)
o=_().value}_()
var r=F()
M()
u.createInExpression(e.name,o,r)}(e)
else{M()
"as"===l.value?function(e){_()
var t=_().value
u.createAsExpression(e,t)}(e):u.createTopLevel(e)}l.type!==t.EOF&&P(l)}e.esprima={parse:function(e,t){u=t
i=e
a=0
s=i.length
l=null;({labelSet:{}})
return R()}}}(e.exports)
if(t._isModuleLoadedForUI&&t._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/js-libs/esprima/esprima.js")){e.hot.accept()
e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/js-libs/esprima/esprima.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/js-libs/polymer-expressions/path-parser.js":function(e,t,o){"use strict";(function(o){var r=function(){if("undefined"!=typeof chrome&&chrome.app&&chrome.app.runtime)return!1
if("undefined"!=typeof navigator&&navigator.getDeviceStorage)return!1
try{var e=new Function("","return true;")
return e()}catch(e){return!1}}()
function n(e){return+e==e>>>0&&""!==e}function i(e){return e===Object(e)}Number.isNaN
var a="__proto__"in{}?function(e){return e}:function(e){var t=e.__proto__
if(!t)return e
var o=Object.create(t)
Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(o,t,Object.getOwnPropertyDescriptor(e,t))})
return o},s=new RegExp("^[$_a-zA-Z]+[$_a-zA-Z0-9]*$")
function u(e){if(void 0===e)return"eof"
var t=e.charCodeAt(0)
switch(t){case 91:case 93:case 46:case 34:case 39:case 48:return e
case 95:case 36:return"ident"
case 32:case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:return"ws"}return 97<=t&&t<=122||65<=t&&t<=90?"ident":49<=t&&t<=57?"number":"else"}var l={beforePath:{ws:["beforePath"],ident:["inIdent","append"],"[":["beforeElement"],eof:["afterPath"]},inPath:{ws:["inPath"],".":["beforeIdent"],"[":["beforeElement"],eof:["afterPath"]},beforeIdent:{ws:["beforeIdent"],ident:["inIdent","append"]},inIdent:{ident:["inIdent","append"],0:["inIdent","append"],number:["inIdent","append"],ws:["inPath","push"],".":["beforeIdent","push"],"[":["beforeElement","push"],eof:["afterPath","push"]},beforeElement:{ws:["beforeElement"],0:["afterZero","append"],number:["inIndex","append"],"'":["inSingleQuote","append",""],'"':["inDoubleQuote","append",""]},afterZero:{ws:["afterElement","push"],"]":["inPath","push"]},inIndex:{0:["inIndex","append"],number:["inIndex","append"],ws:["afterElement"],"]":["inPath","push"]},inSingleQuote:{"'":["afterElement"],eof:["error"],else:["inSingleQuote","append"]},inDoubleQuote:{'"':["afterElement"],eof:["error"],else:["inDoubleQuote","append"]},afterElement:{ws:["afterElement"],"]":["inPath","push"]}}
function c(){}function d(e){return s.test(e)}var p={}
function f(e,t){if(t!==p)throw Error("Use Path.get to retrieve path objects")
for(var o=0;o<e.length;o++)this.push(String(e[o]))
r&&this.length&&(this.getValueFrom=this.compiledGetValueFromFn())}var h={}
f.get=function(e){if(e instanceof f)return e
null!=e&&0!=e.length||(e="")
if("string"!=typeof e){if(n(e.length))return new f(e,p)
e=String(e)}var t=h[e]
if(t)return t
var o=function(e){var t,o,r,n,i,a,s,d=[],p=-1,f="beforePath",h={push:function(){if(void 0!==r){d.push(r)
r=void 0}},append:function(){void 0===r?r=o:r+=o}}
function m(){if(!(p>=e.length)){var t=e[p+1]
if("inSingleQuote"==f&&"'"==t||"inDoubleQuote"==f&&'"'==t){p++
o=t
h.append()
return!0}}}for(;f;){p++
t=e[p]
if("\\"!=t||!m()){n=u(t)
s=l[f]
i=s[n]||s.else||"error"
if("error"==i)return
f=i[0]
a=h[i[1]]||c
o=void 0===i[2]?t:i[2]
a()
if("afterPath"===f)return d}}}(e)
if(!o)return y
t=new f(o,p)
h[e]=t
return t}
function m(e){return n(e)?"["+e+"]":'["'+e.replace(/"/g,'\\"')+'"]'}f.prototype=a({__proto__:[],valid:!0,toString:function(){for(var e="",t=0;t<this.length;t++){var o=this[t]
d(o)?e+=t?"."+o:o:e+=m(o)}return e},getValueFrom:function(e,t){for(var o=0;o<this.length;o++){if(null==e)return
e=e[this[o]]}return e},iterateObjects:function(e,t){for(var o=0;o<this.length;o++){o&&(e=e[this[o-1]])
if(!i(e))return
t(e,this[o])}},compiledGetValueFromFn:function(){var e="",t="obj"
e+="if (obj != null"
for(var o=0;o<this.length-1;o++){r=this[o]
t+=d(r)?"."+r:m(r)
e+=" &&\n     "+t+" != null"}e+=")\n"
var r=this[o]
t+=d(r)?"."+r:m(r)
e+="  return "+t+";\nelse\n  return undefined;"
return new Function("obj",e)},setValueFrom:function(e,t){if(!this.length)return!1
for(var o=0;o<this.length-1;o++){if(!i(e))return!1
e=e[this[o]]}if(!i(e))return!1
e[this[o]]=t
return!0}})
var y=new f("",p)
y.valid=!1
y.getValueFrom=y.setValueFrom=function(){}
t.Path=f
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/js-libs/polymer-expressions/path-parser.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/js-libs/polymer-expressions/path-parser.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/js-libs/polymer-expressions/polymer-expressions.js":function(e,t,o){(function(t){var r=o("../node_modules/tns-core-modules/js-libs/esprima/esprima.js").esprima,n=o("../node_modules/tns-core-modules/js-libs/polymer-expressions/path-parser.js").Path
!function(e){"use strict"
var t=Object.create(null)
function o(e){this.value=e
this.valueFn_=void 0}o.prototype={valueFn:function(){if(!this.valueFn_){var e=this.value
this.valueFn_=function(){return e}}return this.valueFn_}}
function i(e){this.name=e
this.path=n.get(e)}i.prototype={valueFn:function(){if(!this.valueFn_){this.name
var e=this.path
this.valueFn_=function(t,o,r){o&&o.addPath(t,e)
if(r){var n=e.getValueFrom(r)
if(void 0!==n)return n}return e.getValueFrom(t)}}return this.valueFn_},setValue:function(e,t){1==this.path.length&&(e=function(e,t){for(;e[f]&&!Object.prototype.hasOwnProperty.call(e,t);)e=e[f]
return e}(e,this.path[0]))
return this.path.setValueFrom(e,t)}}
function a(e,t,r){this.computed="["==r
this.dynamicDeps="function"==typeof e||e.dynamicDeps||this.computed&&!(t instanceof o)
this.simplePath=!this.dynamicDeps&&(t instanceof i||t instanceof o)&&(e instanceof a||e instanceof i)
this.object=this.simplePath?e:c(e)
this.property=!this.computed||this.simplePath?t:c(t)}a.prototype={get fullPath(){if(!this.fullPath_){var e=this.object instanceof a?this.object.fullPath.slice():[this.object.name]
e.push(this.property instanceof i?this.property.name:this.property.value)
this.fullPath_=n.get(e)}return this.fullPath_},valueFn:function(){if(!this.valueFn_){var e=this.object
if(this.simplePath){var t=this.fullPath
this.valueFn_=function(e,o){o&&o.addPath(e,t)
return t.getValueFrom(e)}}else if(this.computed){var o=this.property
this.valueFn_=function(t,r,n){var i=e(t,r,n),a=o(t,r,n)
r&&r.addPath(i,[a])
return i?i[a]:void 0}}else{t=n.get(this.property.name)
this.valueFn_=function(o,r,n){var i=e(o,r,n)
r&&r.addPath(i,t)
return t.getValueFrom(i)}}}return this.valueFn_},setValue:function(e,t){if(this.simplePath){this.fullPath.setValueFrom(e,t)
return t}var o=this.object(e),r=this.property instanceof i?this.property.name:this.property(e)
return o[r]=t}}
function s(e,t){this.name=e
this.args=[]
for(var o=0;o<t.length;o++)this.args[o]=c(t[o])}s.prototype={transform:function(e,t,o,r,n){var i=o[this.name],a=e
if(i)a=void 0
else{i=a[this.name]
if(!i){console.error("Cannot find function or filter: "+this.name)
return}}r?i=i.toModel:"function"==typeof i.toView&&(i=i.toView)
if("function"==typeof i){for(var s=n||[],u=0;u<this.args.length;u++)s.push(c(this.args[u])(e,t,o))
return i.apply(a,s)}console.error("Cannot find function or filter: "+this.name)}}
var u={"+":function(e){return+e},"-":function(e){return-e},"!":function(e){return!e}},l={"+":function(e,t){return e+t},"-":function(e,t){return e-t},"*":function(e,t){return e*t},"/":function(e,t){return e/t},"%":function(e,t){return e%t},"<":function(e,t){return e<t},">":function(e,t){return e>t},"<=":function(e,t){return e<=t},">=":function(e,t){return e>=t},"==":function(e,t){return e==t},"!=":function(e,t){return e!=t},"===":function(e,t){return e===t},"!==":function(e,t){return e!==t},"&&":function(e,t){return e&&t},"||":function(e,t){return e||t}}
function c(e){return"function"==typeof e?e:e.valueFn()}function d(){this.expression=null
this.filters=[]
this.deps={}
this.currentPath=void 0
this.scopeIdent=void 0
this.indexIdent=void 0
this.dynamicDeps=!1}d.prototype={createUnaryExpression:function(e,t){if(!u[e])throw Error("Disallowed operator: "+e)
t=c(t)
return function(o,r,n){return u[e](t(o,r,n))}},createBinaryExpression:function(e,t,o){if(!l[e])throw Error("Disallowed operator: "+e)
t=c(t)
o=c(o)
switch(e){case"||":this.dynamicDeps=!0
return function(e,r,n){return t(e,r,n)||o(e,r,n)}
case"&&":this.dynamicDeps=!0
return function(e,r,n){return t(e,r,n)&&o(e,r,n)}}return function(r,n,i){return l[e](t(r,n,i),o(r,n,i))}},createConditionalExpression:function(e,t,o){e=c(e)
t=c(t)
o=c(o)
this.dynamicDeps=!0
return function(r,n,i){return e(r,n,i)?t(r,n,i):o(r,n,i)}},createIdentifier:function(e){var t=new i(e)
t.type="Identifier"
return t},createMemberExpression:function(e,t,o){var r=new a(t,o,e)
r.dynamicDeps&&(this.dynamicDeps=!0)
return r},createCallExpression:function(e,t){if(!(e instanceof i))throw Error("Only identifier function invocations are allowed")
var o=new s(e.name,t)
return function(e,t,r){return o.transform(e,t,r,!1)}},createLiteral:function(e){return new o(e.value)},createArrayExpression:function(e){for(var t=0;t<e.length;t++)e[t]=c(e[t])
return function(t,o,r){for(var n=[],i=0;i<e.length;i++)n.push(e[i](t,o,r))
return n}},createProperty:function(e,t,o){return{key:t instanceof i?t.name:t.value,value:o}},createObjectExpression:function(e){for(var t=0;t<e.length;t++)e[t].value=c(e[t].value)
return function(t,o,r){for(var n={},i=0;i<e.length;i++)n[e[i].key]=e[i].value(t,o,r)
return n}},createFilter:function(e,t){this.filters.push(new s(e,t))},createAsExpression:function(e,t){this.expression=e
this.scopeIdent=t},createInExpression:function(e,t,o){this.expression=o
this.scopeIdent=e
this.indexIdent=t},createTopLevel:function(e){this.expression=e},createThisExpression:function(){throw Error("Not Implemented")}}
function p(e){this.scopeIdent=e.scopeIdent
this.indexIdent=e.indexIdent
if(!e.expression)throw Error("No expression found.")
this.expression=e.expression
c(this.expression)
this.filters=e.filters
this.dynamicDeps=e.dynamicDeps}p.prototype={getValue:function(e,t,o,r){for(var n=c(this.expression)(e.context,r,o),i=0;i<this.filters.length;i++)n=this.filters[i].transform(e.context,r,e.context,t,[n])
return n},setValue:function(e,t,o){for(var r=this.filters?this.filters.length:0;r-- >0;)t=this.filters[r].transform(e,void 0,o,!0,[t])
if(this.expression.setValue)return this.expression.setValue(e,t)}}
var f="@"+Math.random().toString(36).slice(2)
function h(){}h.prototype={styleObject:function(e){var t,o=[]
for(var r in e)o.push((t=r,String(t).replace(/[A-Z]/g,function(e){return"-"+e.toLowerCase()}))+": "+e[r])
return o.join("; ")},tokenList:function(e){var t=[]
for(var o in e)e[o]&&t.push(o)
return t.join(" ")},prepareInstancePositionChanged:function(e){var t=e.polymerExpressionIndexIdent_
if(t)return function(e,o){e.model[t]=o}},prepareInstanceModel:function(e){var t=e.polymerExpressionScopeIdent_
if(t){var o=e.templateInstance?e.templateInstance.model:e.model,r=e.polymerExpressionIndexIdent_
return function(e){return m(o,e,t,r)}}}}
var m="__proto__"in{}?function(e,t,o,r){var n={}
n[o]=t
n[r]=void 0
n[f]=e
n.__proto__=e
return n}:function(e,t,o,r){var n=Object.create(e)
Object.defineProperty(n,o,{value:t,configurable:!0,writable:!0})
Object.defineProperty(n,r,{value:void 0,configurable:!0,writable:!0})
Object.defineProperty(n,f,{value:e,configurable:!0,writable:!0})
return n}
e.PolymerExpressions=h
h.getExpression=function(e){var o=t[e]
if(!o){var n=new d
r.parse(e,n)
o=new p(n)
t[e]=o}return o}}(e.exports)
if(t._isModuleLoadedForUI&&t._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/js-libs/polymer-expressions/polymer-expressions.js")){e.hot.accept()
e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/js-libs/polymer-expressions/polymer-expressions.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/matrix/matrix.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/utils/number-utils.js")
t.getTransformMatrix=function(e){var t=e.property,o=e.value
return i[t](o)}
var i={scale:function(e){var t=e.x,o=e.y
return[t,0,0,0,o,0,0,0,1]},translate:function(e){var t=e.x,o=e.y
return[1,0,t,0,1,o,0,0,1]},rotate:function(e){var t=n.degreesToRadians(e)
return[Math.cos(t),-Math.sin(t),0,Math.sin(t),Math.cos(t),0,0,0,1]}}
t.matrixArrayToCssMatrix=function(e){return[e[0],e[3],e[1],e[4],e[2],e[5]]}
t.multiplyAffine2d=function(e,t){return[e[0]*t[0]+e[1]*t[3],e[0]*t[1]+e[1]*t[4],e[0]*t[2]+e[1]*t[5]+e[2],e[3]*t[0]+e[4]*t[3],e[3]*t[1]+e[4]*t[4],e[3]*t[2]+e[4]*t[5]+e[5]]}
t.decompose2DTransformMatrix=function(e){!function(e){if(e.length<6)throw new Error("Transform matrix should be 2x3.")}(e)
var t=e.slice(),o=t[0],r=t[1],i=t[2],a=t[3],s=t[4],u=t[5],l=o*a-r*i,c={x:s||0,y:u||0},d=0,p={x:1,y:1}
if(o||r){var f=Math.sqrt(o*o+r*r)
d=r>0?Math.acos(o/f):-Math.acos(o/f)
p={x:f,y:l/f}}else if(i||a){f=Math.sqrt(i*i+a*a)
d=Math.PI/2-(a>0?Math.acos(-i/f):-Math.acos(i/f))
p={x:l/f,y:f}}d=n.radiansToDegrees(d)
return{translate:c,rotate:d,scale:p}}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/matrix/matrix.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/matrix/matrix.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/module-name-resolver/module-name-resolver.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/platform/platform.js"),a=o("../node_modules/tns-core-modules/application/application-common.js"),s=o("../node_modules/tns-core-modules/module-name-resolver/qualifier-matcher/qualifier-matcher.js"),u=(o("../node_modules/tns-core-modules/module-name-resolver/non-bundle-workflow-compat.js"),function(){function e(e,t){void 0===t&&(t=r.getRegisteredModules)
this.context=e
this.moduleListProvider=t
this._cache={}}e.prototype.resolveModuleName=function(e,t){var o=e+t,r=this._cache[o]
if(void 0===r){r=this.resolveModuleNameImpl(e,t)
this._cache[o]=r}return r}
e.prototype.clearCache=function(){this._cache={}}
e.prototype.resolveModuleNameImpl=function(e,t){var o
t=t?"."+t:""
0
var r=this.getCandidates(e,t)
o=s.findMatch(e,t,r,this.context)
return o}
e.prototype.getCandidates=function(e,t){var o=this.moduleListProvider().filter(function(o){return o.startsWith(e)&&(!t||o.endsWith(t))})
return o}
return e}())
t.ModuleNameResolver=u
t.resolveModuleName=function(e,t){n||(n=new u({width:i.screen.mainScreen.widthDIPs,height:i.screen.mainScreen.heightDIPs,os:i.device.os,deviceType:i.device.deviceType}))
return n.resolveModuleName(e,t)}
function l(){n&&n.clearCache()}t.clearCache=l
t._setResolver=function(e){n=e}
a.on("livesync",function(e){return l()})
a.on("orientationChanged",function(e){n=void 0})
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/module-name-resolver/module-name-resolver.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/module-name-resolver/module-name-resolver.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/module-name-resolver/non-bundle-workflow-compat.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/file-system/file-system.js"),i=o("../node_modules/tns-core-modules/application/application-common.js"),a=new Set,s=!1
function u(e,t){r.registerModule(e,t)}function l(e){if(n.Folder.exists(e)){var t=n.Folder.fromPath(e)
t.eachEntity(function(e){e instanceof n.File&&function(e){var t=e.path.substr(n.knownFolders.currentApp().path.length+1),o=function(){return e.readTextSync()}
switch(e.extension.toLocaleLowerCase()){case".js":var i=t.substr(0,t.length-".js".length)
u(t,function(){return r.require(e.path)})
u(i,function(){return r.require(e.path)})
break
case".css":case".xml":u(t,o)}if("package.json"===e.name){var a=r.require(e.path)
if(a.main){var s=t.substr(0,t.length-"package.json".length-1),l=n.path.join(e.parent.path,a.main)
s.startsWith("tns_modules")&&(s=s.substr("tns_modules".length+1))
u(s,function(){return r.require(l)})}}}(e)
return!0})}}t.registerModulesFromFileSystem=function(e){!function(){if(!s){i.on("livesync",function(e){return a.clear()})
s=!0}}()
if(!a.has(e)){a.add(e)
var t=n.path.join(n.knownFolders.currentApp().path,e)
if(n.Folder.exists(t))l(t)
else{var o=e.substr(0,e.lastIndexOf(n.path.separator)),r=n.path.join(n.knownFolders.currentApp().path,o)
if(n.Folder.exists(r))l(r)
else{var u=n.path.join(n.knownFolders.currentApp().path,"tns_modules",e)
if(n.Folder.exists(u))l(u)
else if(o){var c=n.path.join(n.knownFolders.currentApp().path,"tns_modules",o)
if(n.Folder.exists(c)){l(c)
return}}}}}}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/module-name-resolver/non-bundle-workflow-compat.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/module-name-resolver/non-bundle-workflow-compat.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/module-name-resolver/qualifier-matcher/qualifier-matcher.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
var r=1e4,n={isMatch:function(e){return 0===e.indexOf("minWH")},getMatchValue:function(e,t){var o=parseInt(e.substr("minWH".length))
if(isNaN(o))return-1
var n=Math.min(t.width,t.height)
return n<o?-1:r-(n-o)}},i={isMatch:function(e){return 0===e.indexOf("minW")&&e.indexOf("minWH")<0},getMatchValue:function(e,t){var o=parseInt(e.substr("minW".length))
if(isNaN(o))return-1
var n=t.width
return n<o?-1:r-(n-o)}},a={isMatch:function(e){return 0===e.indexOf("minH")&&e.indexOf("minWH")<0},getMatchValue:function(e,t){var o=parseInt(e.substr("minH".length))
if(isNaN(o))return-1
var n=t.height
return n<o?-1:r-(n-o)}},s=[n,i,a,{isMatch:function(e){return"land"===e||"port"===e},getMatchValue:function(e,t){var o=t.width>t.height?1:-1
return"land"===e?o:-o}},{isMatch:function(e){return"android"===e||"ios"===e},getMatchValue:function(e,t){return e===t.os.toLowerCase()?1:-1}}]
function u(e,t){for(var o,r=0,n=0;n<e.length;n++)if(e[n]){o=l(e[n],t)
if(o<0)return-1
r+=o}return r}function l(e,t){for(var o,n=0;n<s.length;n++)if(s[n].isMatch(e)){o=s[n].getMatchValue(e,t)
o>0&&(o+=(s.length-n)*r)
return o}return-1}t.findMatch=function(e,t,o,r){for(var n=-1,i=null,a=0;a<o.length;a++){var s=o[a],l=s.substr(e.length,s.length-e.length-(t?t.length:0)),c=l.split("."),d=u(c,r)
if(d>=0&&d>n){n=d
i=o[a]}}return i}
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/module-name-resolver/qualifier-matcher/qualifier-matcher.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/module-name-resolver/qualifier-matcher/qualifier-matcher.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/platform/platform.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/application/application.js")
!function(e){e.android="Android"
e.ios="iOS"}(n=t.platformNames||(t.platformNames={}))
var a,s=function(){function e(){}Object.defineProperty(e.prototype,"os",{get:function(){return n.android},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"manufacturer",{get:function(){this._manufacturer||(this._manufacturer=android.os.Build.MANUFACTURER)
return this._manufacturer},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"osVersion",{get:function(){this._osVersion||(this._osVersion=android.os.Build.VERSION.RELEASE)
return this._osVersion},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"model",{get:function(){this._model||(this._model=android.os.Build.MODEL)
return this._model},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"sdkVersion",{get:function(){this._sdkVersion||(this._sdkVersion=android.os.Build.VERSION.SDK)
return this._sdkVersion},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"deviceType",{get:function(){if(!this._deviceType){var e=Math.min(a.mainScreen.widthPixels,a.mainScreen.heightPixels)/a.mainScreen.scale
this._deviceType=e>=600?"Tablet":"Phone"}return this._deviceType},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"uuid",{get:function(){if(!this._uuid){var e=i.android.nativeApp
this._uuid=android.provider.Settings.Secure.getString(e.getContentResolver(),android.provider.Settings.Secure.ANDROID_ID)}return this._uuid},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"language",{get:function(){this._language||(this._language=java.util.Locale.getDefault().getLanguage().replace("_","-"))
return this._language},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"region",{get:function(){this._region||(this._region=java.util.Locale.getDefault().getCountry())
return this._region},enumerable:!0,configurable:!0})
return e}(),u=function(){function e(){}e.prototype.reinitMetrics=function(){this._metrics||(this._metrics=new android.util.DisplayMetrics)
this.initMetrics()}
e.prototype.initMetrics=function(){var e=i.getNativeApplication()
e.getSystemService(android.content.Context.WINDOW_SERVICE).getDefaultDisplay().getRealMetrics(this._metrics)}
Object.defineProperty(e.prototype,"metrics",{get:function(){if(!this._metrics){i.on("cssChanged",this.reinitMetrics,this)
i.on(i.orientationChangedEvent,this.reinitMetrics,this)
this._metrics=new android.util.DisplayMetrics
this.initMetrics()}return this._metrics},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"widthPixels",{get:function(){return this.metrics.widthPixels},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"heightPixels",{get:function(){return this.metrics.heightPixels},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"scale",{get:function(){return this.metrics.density},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"widthDIPs",{get:function(){return this.metrics.widthPixels/this.metrics.density},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"heightDIPs",{get:function(){return this.metrics.heightPixels/this.metrics.density},enumerable:!0,configurable:!0})
return e}()
t.device=new s
!function(e){e.mainScreen=new u}(a=t.screen||(t.screen={}))
t.isAndroid=!0
t.isIOS=!1
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/platform/platform.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/platform/platform.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/profiling/profiling.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
t.uptime=function(){return r.android?org.nativescript.Process.getUpTime():r.__tns_uptime()}
function n(e){r.__nslog&&r.__nslog("CONSOLE LOG: "+e)
console.log(e)}t.log=n
var i,a={},s=r,u=[]
t.time=r.__time||Date.now
function l(e){var o=a[e]
if(o){o.currentStart=t.time()
o.runCount++}else{o={totalTime:0,count:0,currentStart:t.time(),runCount:1}
a[e]=o
u.push(e)}}t.start=l
function c(e){var o=a[e]
if(!o)throw new Error("No timer started: "+e)
if(!o.runCount)throw new Error("Timer "+e+" paused more times than started.")
o.runCount--
if(o.runCount)o.count++
else{o.lastTime=t.time()-o.currentStart
o.totalTime+=o.lastTime
o.count++
o.currentStart=0}return o}t.stop=c
t.timer=function(e){return a[e]}
t.print=function(e){var t=a[e]
if(!t)throw new Error("No timer started: "+e)
console.log("---- ["+e+"] STOP total: "+t.totalTime+" count:"+t.count)
return t}
t.isRunning=function(e){var t=a[e]
return!(!t||!t.runCount)}
function d(e,t,o){void 0===o&&(o=1)
u.push(t)
return function(){l(t)
try{return e.apply(this,arguments)}finally{c(t)}}}function p(e,o,r){void 0===r&&(r=1)
return 1===r?function(){var r=t.time()
try{return e.apply(this,arguments)}finally{var n=t.time()
console.log("Timeline: Modules: "+o+" "+this+"  ("+r+"ms. - "+n+"ms.)")}}:function(){var r=t.time()
try{return e.apply(this,arguments)}finally{var n=t.time()
console.log("Timeline: Modules: "+o+"  ("+r+"ms. - "+n+"ms.)")}}}!function(e){e[e.none=0]="none"
e[e.lifecycle=1]="lifecycle"
e[e.timeline=2]="timeline"}(i=t.Level||(t.Level={}))
var f,h=i.none
function m(e){void 0===e&&(e="counters")
f=e&&{counters:d,timeline:p}[e]
h={lifecycle:i.lifecycle,timeline:i.timeline}[e]||i.none}t.enable=m
try{var y=o("./package.json")
y&&y.profiling&&m(y.profiling)}catch(e){try{console.log("Profiling startup failed to figure out defaults from package.json, error: "+e)}catch(e){}}t.disable=function(){f=void 0}
function g(e,t){return f(e,t||e.name)}var v=function(e,t,o){void 0===o&&(o=Object.getOwnPropertyDescriptor(e,t))
var r=o.value,n=""
e&&e.constructor&&e.constructor.name&&(n=e.constructor.name+".")
var i=n+t
o.value=f(r,i,1)
return o},b=function(e,t,o){void 0===o&&(o=Object.getOwnPropertyDescriptor(e,t))
var r=o.value,n=""
e&&e.name&&(n=e.name+".")
var i=n+t
o.value=f(r,i,0)
return o}
var _=function(){}
t.profile=function(e,t,o){if("object"!=typeof e||"string"!=typeof t&&"symbol"!=typeof t){if("function"!=typeof e||"string"!=typeof t&&"symbol"!=typeof t)return"string"==typeof e&&"function"==typeof t?f?g(t,e):t:"function"==typeof e?f?g(e):e:"string"==typeof e?f?(r=e,function(e,t,o){void 0===o&&(o=Object.getOwnPropertyDescriptor(e,t))
var n=o.value
o.value=f(n,r)
return o}):_:f?v:_
if(!f)return
return b(e,t,o)}if(f){return v(e,t,o)
var r}}
t.dumpProfiles=function(){u.forEach(function(e){var t=a[e]
t?console.log("---- ["+e+"] STOP total: "+t.totalTime+" count:"+t.count):console.log("---- ["+e+"] Never called")})}
t.resetProfiles=function(){u.forEach(function(e){var t=a[e]
t&&(t.runCount?console.log("---- timer with name ["+e+"] is currently running and won't be reset"):a[e]=void 0)})}
t.startCPUProfile=function(e){s.android&&__startCPUProfiler(e)}
t.stopCPUProfile=function(e){s.android&&__stopCPUProfiler(e)}
t.level=function(){return h}
t.trace=function(e,t,o){n("Timeline: Modules: "+e+"  ("+t+"ms. - "+o+"ms.)")}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/profiling/profiling.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/profiling/profiling.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/text/formatted-string.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/text/span.js")
t.Span=n.Span
var i,a=o("../node_modules/tns-core-modules/data/observable/observable.js"),s=o("../node_modules/tns-core-modules/data/observable-array/observable-array.js"),u=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){e.spans="spans"}(i=t.knownCollections||(t.knownCollections={}))
var l=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
t._spans=new s.ObservableArray
t._spans.addEventListener(s.ObservableArray.changeEvent,t.onSpansCollectionChanged,t)
return t}Object.defineProperty(t.prototype,"fontFamily",{get:function(){return this.style.fontFamily},set:function(e){this.style.fontFamily=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"fontSize",{get:function(){return this.style.fontSize},set:function(e){this.style.fontSize=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"fontStyle",{get:function(){return this.style.fontStyle},set:function(e){this.style.fontStyle=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"fontWeight",{get:function(){return this.style.fontWeight},set:function(e){this.style.fontWeight=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"textDecoration",{get:function(){return this.style.textDecoration},set:function(e){this.style.textDecoration=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"color",{get:function(){return this.style.color},set:function(e){this.style.color=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"backgroundColor",{get:function(){return this.style.backgroundColor},set:function(e){this.style.backgroundColor=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"spans",{get:function(){this._spans||(this._spans=new s.ObservableArray)
return this._spans},enumerable:!0,configurable:!0})
t.prototype.toString=function(){for(var e="",t=0,o=this._spans.length;t<o;t++)e+=this._spans.getItem(t).text
return e}
t.prototype._addArrayFromBuilder=function(e,t){e===i.spans&&this.spans.push(t)}
t.prototype._addChildFromBuilder=function(e,t){t instanceof n.Span&&this.spans.push(t)}
t.prototype.onSpansCollectionChanged=function(e){if(e.addedCount>0)for(var t=0;t<e.addedCount;t++){var o=e.object.getItem(e.index+t)
this._addView(o)
this.addPropertyChangeHandler(o)}if(e.removed&&e.removed.length>0)for(var r=0;r<e.removed.length;r++){o=e.removed[r]
this.removePropertyChangeHandler(o)
this._removeView(o)}this.notifyPropertyChange(".",this)}
t.prototype.addPropertyChangeHandler=function(e){var t=e.style
e.on(a.Observable.propertyChangeEvent,this.onPropertyChange,this)
t.on("fontFamilyChange",this.onPropertyChange,this)
t.on("fontSizeChange",this.onPropertyChange,this)
t.on("fontStyleChange",this.onPropertyChange,this)
t.on("fontWeightChange",this.onPropertyChange,this)
t.on("textDecorationChange",this.onPropertyChange,this)
t.on("colorChange",this.onPropertyChange,this)
t.on("backgroundColorChange",this.onPropertyChange,this)}
t.prototype.removePropertyChangeHandler=function(e){var t=e.style
e.off(a.Observable.propertyChangeEvent,this.onPropertyChange,this)
t.off("fontFamilyChange",this.onPropertyChange,this)
t.off("fontSizeChange",this.onPropertyChange,this)
t.off("fontStyleChange",this.onPropertyChange,this)
t.off("fontWeightChange",this.onPropertyChange,this)
t.off("textDecorationChange",this.onPropertyChange,this)
t.off("colorChange",this.onPropertyChange,this)
t.off("backgroundColorChange",this.onPropertyChange,this)}
t.prototype.onPropertyChange=function(e){this.notifyPropertyChange(e.propertyName,this)}
t.prototype.eachChild=function(e){this.spans.forEach(function(t,o,r){return e(t)})}
return t}(u.ViewBase)
t.FormattedString=l
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/text/formatted-string.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/text/formatted-string.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/text/span.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js"),i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}Object.defineProperty(t.prototype,"fontFamily",{get:function(){return this.style.fontFamily},set:function(e){this.style.fontFamily=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"fontSize",{get:function(){return this.style.fontSize},set:function(e){this.style.fontSize=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"fontStyle",{get:function(){return this.style.fontStyle},set:function(e){this.style.fontStyle=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"fontWeight",{get:function(){return this.style.fontWeight},set:function(e){this.style.fontWeight=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"textDecoration",{get:function(){return this.style.textDecoration},set:function(e){this.style.textDecoration=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"color",{get:function(){return this.style.color},set:function(e){this.style.color=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"backgroundColor",{get:function(){return this.style.backgroundColor},set:function(e){this.style.backgroundColor=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"text",{get:function(){return this._text},set:function(e){if(this._text!==e){this._text=e
this.notifyPropertyChange("text",e)}},enumerable:!0,configurable:!0})
t.prototype._setTextInternal=function(e){this._text=e}
return t}(n.ViewBase)
t.Span=i
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/text/span.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/text/span.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/text/text.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
!function(e){e.ISO_8859_1="ISO-8859-1"
e.US_ASCII="US-ASCII"
e.UTF_16="UTF-16"
e.UTF_16BE="UTF-16BE"
e.UTF_16LE="UTF-16LE"
e.UTF_8="UTF-8"}(t.encoding||(t.encoding={}))
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/text/text.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/text/text.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/timer/timer.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
var r,n={},i=0
function a(){r||(r=new android.os.Handler(android.os.Looper.myLooper()))
i++
return i}t.setTimeout=function(e,t){void 0===t&&(t=0)
for(var o=[],i=2;i<arguments.length;i++)o[i-2]=arguments[i]
var s=a(),u=zonedCallback(function(){return e.apply(void 0,o)}),l=new java.lang.Runnable({run:function(){u()
n[s]&&delete n[s]}})
n[s]||(n[s]=l)
r.postDelayed(l,long(t))
return s}
function s(e){var t=e
if(n[t]){r.removeCallbacks(n[t])
delete n[t]}}t.clearTimeout=s
t.setInterval=function(e,t){void 0===t&&(t=0)
for(var o=[],i=2;i<arguments.length;i++)o[i-2]=arguments[i]
var s=a(),u=r,l=zonedCallback(function(){return e.apply(void 0,o)}),c=new java.lang.Runnable({run:function(){l()
n[s]&&u.postDelayed(c,long(t))}})
n[s]||(n[s]=c)
r.postDelayed(c,long(t))
return s}
t.clearInterval=s
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/timer/timer.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/timer/timer.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/trace/trace.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
var r,n,i=!1,a={},s=[],u=[]
t.enable=function(){i=!0}
t.disable=function(){i=!1}
t.isEnabled=function(){return i}
t.isCategorySet=function(e){return e in a}
function l(e){s.push(e)}t.addWriter=l
t.removeWriter=function(e){var t=s.indexOf(e)
t>=0&&s.splice(t,1)}
t.clearWriters=function(){s.length>0&&s.splice(0,s.length)}
t.setCategories=function(e){a={}
c(e)}
function c(e){for(var t=e.split(","),o=0;o<t.length;o++)a[t[o].trim()]=!0}t.addCategories=c
t.write=function(e,t,o){var r
if(o!==n.error){if(i&&t in a)for(r=0;r<s.length;r++)s[r].write(e,t,o)}else for(r=0;r<s.length;r++)s[r].write(e,t,o)}
t.notifyEvent=function(e,t,o){if(i){var r,n,a
for(r=0;r<u.length;r++){n=u[r]
if(n.filter){a=n.filter.split(",")
a.forEach(function(r){r.trim()===t&&n.on(e,t,o)})}else n.on(e,t,o)}}}
t.addEventListener=function(e){u.push(e)}
t.removeEventListener=function(e){var t=u.indexOf(e)
t>=0&&u.splice(t,1)}
!function(e){e.log=0
e.info=1
e.warn=2
e.error=3}(n=t.messageType||(t.messageType={}))
!function(e){e.VisualTreeEvents="VisualTreeEvents"
e.Layout="Layout"
e.Style="Style"
e.ViewHierarchy="ViewHierarchy"
e.NativeLifecycle="NativeLifecycle"
e.Debug="Debug"
e.Navigation="Navigation"
e.Test="Test"
e.Binding="Binding"
e.BindingError="BindingError"
e.Error="Error"
e.Animation="Animation"
e.Transition="Transition"
e.Livesync="Livesync"
e.separator=","
e.All=e.VisualTreeEvents+e.separator+e.Layout+e.separator+e.Style+e.separator+e.ViewHierarchy+e.separator+e.NativeLifecycle+e.separator+e.Debug+e.separator+e.Navigation+e.separator+e.Test+e.separator+e.Binding+e.separator+e.Error+e.separator+e.Animation+e.separator+e.Transition+e.separator+e.Livesync
e.concat=function(){for(var t,o=0;o<arguments.length;o++)t=t?t.concat(e.separator,arguments[o]):arguments[o]
return t}}(t.categories||(t.categories={}))
var d=function(){function e(){}e.prototype.write=function(e,t,o){if(console){var r
r=void 0===o?n.log:o
switch(r){case n.log:console.log(t+": "+e)
break
case n.info:console.info(t+": "+e)
break
case n.warn:console.warn(t+": "+e)
break
case n.error:console.error(t+": "+e)}}}
return e}()
l(new d)
var p=function(){function e(){}e.prototype.handlerError=function(e){throw e}
return e}()
t.DefaultErrorHandler=p
f(new p)
t.getErrorHandler=function(){return r}
function f(e){r=e}t.setErrorHandler=f
t.error=function(e){if(r){"string"==typeof e&&(e=new Error(e))
r.handlerError(e)}}
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/trace/trace.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/trace/trace.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/action-bar/action-bar-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/profiling/profiling.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
var i=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){e.actionItems="actionItems"}(t.knownCollections||(t.knownCollections={}))
var a=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
t._actionItems=new s(t)
return t}Object.defineProperty(t.prototype,"navigationButton",{get:function(){return this._navigationButton},set:function(e){if(this._navigationButton!==e){if(this._navigationButton){this._removeView(this._navigationButton)
this._navigationButton.actionBar=void 0}this._navigationButton=e
if(this._navigationButton){this._navigationButton.actionBar=this
this._addView(this._navigationButton)}this.update()}},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"actionItems",{get:function(){return this._actionItems},set:function(e){throw new Error("actionItems property is read-only")},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"titleView",{get:function(){return this._titleView},set:function(e){if(this._titleView!==e){if(this._titleView){this._removeView(this._titleView)
this._titleView.style[i.horizontalAlignmentProperty.cssName]=i.unsetValue
this._titleView.style[i.verticalAlignmentProperty.cssName]=i.unsetValue}this._titleView=e
if(e){this._addView(e)
var t=e.style
i.horizontalAlignmentProperty.isSet(t)||(t[i.horizontalAlignmentProperty.cssName]="center")
i.verticalAlignmentProperty.isSet(t)||(t[i.verticalAlignmentProperty.cssName]="middle")}this.update()}},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"ios",{get:function(){},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"android",{get:function(){},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"_childrenCount",{get:function(){var e=0
this._actionItems.getItems().forEach(function(t){t.actionView&&e++})
return e+(this.titleView?1:0)},enumerable:!0,configurable:!0})
t.prototype.update=function(){}
t.prototype._onTitlePropertyChanged=function(){}
t.prototype._addArrayFromBuilder=function(e,t){"actionItems"===e&&this.actionItems.setItems(t)}
t.prototype.eachChildView=function(e){var t=this.titleView
t&&e(t)}
t.prototype.eachChild=function(e){var t=this.titleView
t&&e(t)
var o=this._navigationButton
o&&e(o)
this.actionItems.getItems().forEach(function(t){e(t)})}
t.prototype._isEmpty=function(){return!(this.title||this.titleView||this.android&&this.android.icon||this.navigationButton||this.actionItems.getItems().length>0)}
t=__decorate([i.CSSType("ActionBar")],t)
return t}(i.View)
t.ActionBarBase=a
var s=function(){function e(e){this._items=new Array
this._actionBar=e}e.prototype.addItem=function(e){if(!e)throw new Error("Cannot add empty item")
this._items.push(e)
e.actionBar=this._actionBar
this._actionBar._addView(e)
this.invalidate()}
e.prototype.removeItem=function(e){if(!e)throw new Error("Cannot remove empty item")
var t=this._items.indexOf(e)
if(t<0)throw new Error("Cannot find item to remove")
this._items.splice(t,1)
this._actionBar._removeView(e)
e.actionBar=void 0
this.invalidate()}
e.prototype.getItems=function(){return this._items.slice()}
e.prototype.getVisibleItems=function(){var e=[]
this._items.forEach(function(t){l(t)&&e.push(t)})
return e}
e.prototype.getItemAt=function(e){if(!(e<0||e>=this._items.length))return this._items[e]}
e.prototype.setItems=function(e){for(;this._items.length>0;)this.removeItem(this._items[this._items.length-1])
for(var t=0;t<e.length;t++)this.addItem(e[t])
this.invalidate()}
e.prototype.invalidate=function(){this._actionBar&&this._actionBar.update()}
return e}()
t.ActionItems=s
var u=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}Object.defineProperty(t.prototype,"actionView",{get:function(){return this._actionView},set:function(e){if(this._actionView!==e){if(this._actionView){this._actionView.style[i.horizontalAlignmentProperty.cssName]=i.unsetValue
this._actionView.style[i.verticalAlignmentProperty.cssName]=i.unsetValue
this._removeView(this._actionView)}this._actionView=e
this._actionView&&this._addView(this._actionView)
this._actionBar&&this._actionBar.update()}},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"actionBar",{get:function(){return this._actionBar},set:function(e){e!==this._actionBar&&(this._actionBar=e)},enumerable:!0,configurable:!0})
t.prototype.onLoaded=function(){if(this._actionView){this._actionView.style[i.horizontalAlignmentProperty.cssName]="center"
this._actionView.style[i.verticalAlignmentProperty.cssName]="middle"}e.prototype.onLoaded.call(this)}
t.prototype._raiseTap=function(){this._emit(t.tapEvent)}
t.prototype._addChildFromBuilder=function(e,t){this.actionView=t}
t.prototype._onVisibilityChanged=function(e){this.actionBar&&this.actionBar.update()}
t.prototype.eachChild=function(e){this._actionView&&e(this._actionView)}
t.tapEvent="tap"
__decorate([n.profile],t.prototype,"onLoaded",null)
return t}(i.ViewBase)
t.ActionItemBase=u
function l(e){return"visible"===e.visibility}t.isVisible=l
t.titleProperty=new i.Property({name:"title",valueChanged:function(e,t,o){e._onTitlePropertyChanged()}})
t.titleProperty.register(a)
function c(e,t,o){e.actionBar&&e.actionBar.update()}t.traceMissingIcon=function(e){i.traceWrite("Could not load action bar icon: "+e,i.traceCategories.Error,i.traceMessageType.error)}
t.iosIconRenderingModeProperty=new i.Property({name:"iosIconRenderingMode",defaultValue:"alwaysOriginal"})
t.iosIconRenderingModeProperty.register(a)
t.textProperty=new i.Property({name:"text",defaultValue:"",valueChanged:c})
t.textProperty.register(u)
t.iconProperty=new i.Property({name:"icon",valueChanged:c})
t.iconProperty.register(u)
t.visibilityProperty=new i.Property({name:"visibility",defaultValue:"visible",valueChanged:function(e,t,o){e._onVisibilityChanged(o)}})
t.visibilityProperty.register(u)
t.flatProperty=new i.Property({name:"flat",defaultValue:!1,valueConverter:i.booleanConverter})
t.flatProperty.register(a)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/action-bar/action-bar-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/action-bar/action-bar-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/action-bar/action-bar.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/action-bar/action-bar-common.js"),i=o("../node_modules/tns-core-modules/utils/utils.js"),a=o("../node_modules/tns-core-modules/image-source/image-source.js"),s=o("../node_modules/tns-core-modules/application/application.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/action-bar/action-bar-common.js"))
var u,l,c,d=1e4
var p=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
t._androidPosition={position:"actionBar",systemIcon:void 0}
t._itemId=function(){d++
return d}()
return t}Object.defineProperty(t.prototype,"android",{get:function(){return this._androidPosition},set:function(e){throw new Error("ActionItem.android is read-only")},enumerable:!0,configurable:!0})
t.prototype._getItemId=function(){return this._itemId}
return t}(n.ActionItemBase)
t.ActionItem=p
var f=function(){function e(e){this._iconVisibility="auto"
this._actionBar=e}Object.defineProperty(e.prototype,"icon",{get:function(){return this._icon},set:function(e){if(e!==this._icon){this._icon=e
this._actionBar._onIconPropertyChanged()}},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"iconVisibility",{get:function(){return this._iconVisibility},set:function(e){if(e!==this._iconVisibility){this._iconVisibility=e
this._actionBar._onIconPropertyChanged()}},enumerable:!0,configurable:!0})
return e}()
t.AndroidActionBarSettings=f
var h=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}return t}(p)
t.NavigationButton=h
var m,y=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
t._android=new f(t)
return t}Object.defineProperty(t.prototype,"android",{get:function(){return this._android},enumerable:!0,configurable:!0})
t.prototype._addChildFromBuilder=function(e,t){t instanceof h?this.navigationButton=t:t instanceof p?this.actionItems.addItem(t):t instanceof n.View&&(this.titleView=t)}
t.prototype.createNativeView=function(){return new androidx.appcompat.widget.Toolbar(this._context)}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
var t=this.nativeViewProtected
!function(){if(!c){u=androidx.appcompat.widget.AppCompatTextView
var e=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}t.prototype.onMenuItemClick=function(e){var t=e.getItemId()
return this.owner._onAndroidItemSelected(t)}
t=__decorate([Interfaces([androidx.appcompat.widget.Toolbar.OnMenuItemClickListener])],t)
return t}(java.lang.Object)
c=e
l=s.android.context.getResources()}}()
var o=new c(this)
t.setOnMenuItemClickListener(o)
t.menuItemClickListener=o}
t.prototype.disposeNativeView=function(){this.nativeViewProtected.menuItemClickListener.owner=null
e.prototype.disposeNativeView.call(this)}
t.prototype.onLoaded=function(){e.prototype.onLoaded.call(this)
this.update()}
t.prototype.update=function(){if(this.nativeViewProtected){var e=this.page
if(e.frame&&e.frame._getNavBarVisible(e)){this.nativeViewProtected.setVisibility(android.view.View.VISIBLE)
this._addActionItems()
this._updateTitleAndTitleView()
this._updateIcon()
this._updateNavigationButton()}else this.nativeViewProtected.setVisibility(android.view.View.GONE)}}
t.prototype._onAndroidItemSelected=function(e){if(this.navigationButton&&16908332===e){this.navigationButton._raiseTap()
return!0}for(var t=void 0,o=this.actionItems.getItems(),r=0;r<o.length;r++)if(o[r]._getItemId()===e){t=o[r]
break}if(t){t._raiseTap()
return!0}return!1}
t.prototype._updateNavigationButton=function(){var e=this.navigationButton
if(e&&n.isVisible(e)){var t=e.android.systemIcon
if(void 0!==t){var o=_(t)
o&&this.nativeViewProtected.setNavigationIcon(o)}else if(e.icon){var r=v(e.icon,l)
r&&this.nativeViewProtected.setNavigationIcon(r)}this.nativeViewProtected.setNavigationContentDescription(e.text||null)
var i=new WeakRef(e)
this.nativeViewProtected.setNavigationOnClickListener(new android.view.View.OnClickListener({onClick:function(e){var t=i.get()
t&&t._raiseTap()}}))}else this.nativeViewProtected.setNavigationIcon(null)}
t.prototype._updateIcon=function(){var e=function(e){switch(e){case"always":return!0
case"auto":case"never":default:return!1}}(this.android.iconVisibility)
if(e){var t=this.android.icon
if(void 0!==t){var o=v(t,l)
o&&this.nativeViewProtected.setLogo(o)}else{var r=s.android.nativeApp.getApplicationInfo().icon
this.nativeViewProtected.setLogo(r)}}else this.nativeViewProtected.setLogo(null)}
t.prototype._updateTitleAndTitleView=function(){if(!this.titleView){var e=this.title
if(void 0!==e)this.nativeViewProtected.setTitle(e)
else{var t=s.android.context,o=t.getApplicationInfo(),r=t.getPackageManager().getApplicationLabel(o)
r&&this.nativeViewProtected.setTitle(r)}}}
t.prototype._addActionItems=function(){var e=this.nativeViewProtected.getMenu(),o=this.actionItems.getVisibleItems()
e.clear()
for(var r=0;r<o.length;r++){var n=o[r],s=e.add(android.view.Menu.NONE,n._getItemId(),android.view.Menu.NONE,n.text+"")
if(n.actionView&&n.actionView.android){n.android.position="actionBar"
s.setActionView(n.actionView.android)
t._setOnClickListener(n)}else if(n.android.systemIcon){var u=_(n.android.systemIcon)
u&&s.setIcon(u)}else if(n.icon)if(i.isFontIconURI(n.icon)){var c=n.icon.split("//")[1],d=n.style.fontInternal,p=n.style.color,f=a.fromFontIconCode(c,d,p)
if(f&&f.android){var h=new android.graphics.drawable.BitmapDrawable(l,f.android)
s.setIcon(h)}}else{var m=v(n.icon,l)
m&&s.setIcon(m)}var y=b(n)
s.setShowAsAction(y)}}
t._setOnClickListener=function(e){var t=new WeakRef(e)
e.actionView.android.setOnClickListener(new android.view.View.OnClickListener({onClick:function(e){var o=t.get()
o&&o._raiseTap()}}))}
t.prototype._onTitlePropertyChanged=function(){this.nativeViewProtected&&this._updateTitleAndTitleView()}
t.prototype._onIconPropertyChanged=function(){this.nativeViewProtected&&this._updateIcon()}
t.prototype._addViewToNativeVisualTree=function(t,o){void 0===o&&(o=Number.MAX_VALUE)
e.prototype._addViewToNativeVisualTree.call(this,t)
if(this.nativeViewProtected&&t.nativeViewProtected){o>=this.nativeViewProtected.getChildCount()?this.nativeViewProtected.addView(t.nativeViewProtected):this.nativeViewProtected.addView(t.nativeViewProtected,o)
return!0}return!1}
t.prototype._removeViewFromNativeVisualTree=function(t){e.prototype._removeViewFromNativeVisualTree.call(this,t)
this.nativeViewProtected&&t.nativeViewProtected&&this.nativeViewProtected.removeView(t.nativeViewProtected)}
t.prototype[n.colorProperty.getDefault]=function(){var e=this.nativeViewProtected
if(!m){var t=g(e)
if(!t){var o=e.getTitle()
e.setTitle("")
t=g(e)
o&&e.setTitle(o)}m=t?t.getTextColors().getDefaultColor():-570425344}return m}
t.prototype[n.colorProperty.setNative]=function(e){var t=e instanceof n.Color?e.android:e
this.nativeViewProtected.setTitleTextColor(t)}
t.prototype[n.flatProperty.setNative]=function(e){var t=androidx.core.view.ViewCompat
if(t.setElevation)if(e)t.setElevation(this.nativeViewProtected,0)
else{var o=4*n.layout.getDisplayDensity()
t.setElevation(this.nativeViewProtected,o)}}
return t}(n.ActionBarBase)
t.ActionBar=y
function g(e){for(var t=0,o=e.getChildCount();t<o;t++){var r=e.getChildAt(t)
if(r instanceof u)return r}return null}y.prototype.recycleNativeView="auto"
function v(e,t){if("string"==typeof e){var o=void 0
if(0===e.indexOf(i.RESOURCE_PREFIX)){var r=t.getIdentifier(e.substr(i.RESOURCE_PREFIX.length),"drawable",s.android.packageName)
r>0&&(o=r)}else{var u=void 0,c=a.fromFileOrResource(e)
c&&(u=new android.graphics.drawable.BitmapDrawable(l,c.android))
o=u}o||n.traceMissingIcon(e)
return o}}function b(e){switch(e.android.position){case"actionBarIfRoom":return android.view.MenuItem.SHOW_AS_ACTION_IF_ROOM
case"popup":return android.view.MenuItem.SHOW_AS_ACTION_NEVER
case"actionBar":default:return android.view.MenuItem.SHOW_AS_ACTION_ALWAYS}}function _(e){return android.content.res.Resources.getSystem().getIdentifier(e,"drawable","android")}if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/action-bar/action-bar.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/action-bar/action-bar.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t=__decorate([n.CSSType("ActivityIndicator")],t)
return t}(n.View)
t.ActivityIndicatorBase=i
i.prototype.recycleNativeView="auto"
t.busyProperty=new n.Property({name:"busy",defaultValue:!1,valueConverter:n.booleanConverter})
t.busyProperty.register(i)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/activity-indicator/activity-indicator-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/activity-indicator/activity-indicator-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator-common.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){var e=new android.widget.ProgressBar(this._context)
e.setVisibility(android.view.View.INVISIBLE)
e.setIndeterminate(!0)
return e}
t.prototype[n.busyProperty.getDefault]=function(){return!1}
t.prototype[n.busyProperty.setNative]=function(e){this.visibility===n.Visibility.VISIBLE&&this.nativeViewProtected.setVisibility(e?android.view.View.VISIBLE:android.view.View.INVISIBLE)}
t.prototype[n.visibilityProperty.getDefault]=function(){return n.Visibility.HIDDEN}
t.prototype[n.visibilityProperty.setNative]=function(e){switch(e){case n.Visibility.VISIBLE:this.nativeViewProtected.setVisibility(this.busy?android.view.View.VISIBLE:android.view.View.INVISIBLE)
break
case n.Visibility.HIDDEN:this.nativeViewProtected.setVisibility(android.view.View.INVISIBLE)
break
case n.Visibility.COLLAPSE:this.nativeViewProtected.setVisibility(android.view.View.GONE)
break
default:throw new Error("Invalid visibility value: "+e+'. Valid values are: "'+n.Visibility.VISIBLE+'", "'+n.Visibility.HIDDEN+'", "'+n.Visibility.COLLAPSE+'".')}}
t.prototype[n.colorProperty.getDefault]=function(){return-1}
t.prototype[n.colorProperty.setNative]=function(e){e instanceof n.Color?this.nativeViewProtected.getIndeterminateDrawable().setColorFilter(e.android,android.graphics.PorterDuff.Mode.SRC_IN):this.nativeViewProtected.getIndeterminateDrawable().clearColorFilter()}
return t}(n.ActivityIndicatorBase)
t.ActivityIndicator=i
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/activity-indicator/activity-indicator.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/activity-indicator/activity-indicator.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/animation/animation-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/color/color.js")
t.Color=n.Color
var i=o("../node_modules/tns-core-modules/trace/trace.js")
t.traceEnabled=i.isEnabled
t.traceWrite=i.write
t.traceCategories=i.categories
t.traceType=i.messageType
var a,s=o("../node_modules/tns-core-modules/ui/styling/style-properties.js")
!function(e){e.opacity="opacity"
e.backgroundColor="backgroundColor"
e.translate="translate"
e.rotate="rotate"
e.scale="scale"
e.height="height"
e.width="width"}(a=t.Properties||(t.Properties={}))
var u=function(){return function(e,t,o,r){this.x1=e
this.y1=t
this.x2=o
this.y2=r}}()
t.CubicBezierAnimationCurve=u
var l=function(){function e(t,o){if(!t||0===t.length)throw new Error("No animation definitions specified")
i.isEnabled()&&i.write("Analyzing "+t.length+" animation definitions...",i.categories.Animation)
this._propertyAnimations=new Array
for(var r=0,n=t.length;r<n;r++){t[r].curve&&(t[r].curve=this._resolveAnimationCurve(t[r].curve))
this._propertyAnimations=this._propertyAnimations.concat(e._createPropertyAnimations(t[r]))}if(0===this._propertyAnimations.length)throw new Error("Nothing to animate.")
i.isEnabled()&&i.write("Created "+this._propertyAnimations.length+" individual property animations.",i.categories.Animation)
this._playSequentially=o}e.prototype._rejectAlreadyPlaying=function(){var e="Animation is already playing."
i.write(e,i.categories.Animation,i.messageType.warn)
return new Promise(function(t,o){o(e)})}
e.prototype.play=function(){var e=this,t=new Promise(function(t,o){e._resolve=t
e._reject=o})
this.fixupAnimationPromise(t)
this._isPlaying=!0
return t}
e.prototype.fixupAnimationPromise=function(e){var t=this
e.cancel=function(){t.cancel()}
var o=e.then
e.then=function(){var r=o.apply(e,arguments)
t.fixupAnimationPromise(r)
return r}
var r=e.catch
e.catch=function(){var o=r.apply(e,arguments)
t.fixupAnimationPromise(o)
return o}}
e.prototype.cancel=function(){}
Object.defineProperty(e.prototype,"isPlaying",{get:function(){return this._isPlaying},enumerable:!0,configurable:!0})
e.prototype._resolveAnimationFinishedPromise=function(){this._isPlaying=!1
this._resolve()}
e.prototype._rejectAnimationFinishedPromise=function(){this._isPlaying=!1
this._reject(new Error("Animation cancelled."))}
e._createPropertyAnimations=function(e){if(!e.target)throw new Error("No animation target specified.")
for(var t in e)if(void 0!==e[t]){if((t===a.opacity||t===a.rotate||"duration"===t||"delay"===t||"iterations"===t)&&"number"!=typeof e[t])throw new Error("Property "+t+" must be valid number. Value: "+e[t])
if(!(t!==a.scale&&t!==a.translate||"number"==typeof e[t].x&&"number"==typeof e[t].y))throw new Error("Property "+t+" must be valid Pair. Value: "+e[t])
if(t===a.backgroundColor&&!n.Color.isValid(e.backgroundColor))throw new Error("Property "+t+" must be valid color. Value: "+e[t])
t!==a.width&&t!==a.height||(e[t]=s.PercentLength.parse(e[t]))}var o=new Array
void 0!==e.opacity&&o.push({target:e.target,property:a.opacity,value:e.opacity,duration:e.duration,delay:e.delay,iterations:e.iterations,curve:e.curve})
void 0!==e.backgroundColor&&o.push({target:e.target,property:a.backgroundColor,value:"string"==typeof e.backgroundColor?new n.Color(e.backgroundColor):e.backgroundColor,duration:e.duration,delay:e.delay,iterations:e.iterations,curve:e.curve})
void 0!==e.translate&&o.push({target:e.target,property:a.translate,value:e.translate,duration:e.duration,delay:e.delay,iterations:e.iterations,curve:e.curve})
void 0!==e.scale&&o.push({target:e.target,property:a.scale,value:e.scale,duration:e.duration,delay:e.delay,iterations:e.iterations,curve:e.curve})
void 0!==e.rotate&&o.push({target:e.target,property:a.rotate,value:e.rotate,duration:e.duration,delay:e.delay,iterations:e.iterations,curve:e.curve})
void 0!==e.height&&o.push({target:e.target,property:a.height,value:e.height,duration:e.duration,delay:e.delay,iterations:e.iterations,curve:e.curve})
void 0!==e.width&&o.push({target:e.target,property:a.width,value:e.width,duration:e.duration,delay:e.delay,iterations:e.iterations,curve:e.curve})
if(0===o.length)throw new Error("No known animation properties specified")
return o}
e._getAnimationInfo=function(e){return JSON.stringify({target:e.target.id,property:e.property,value:e.value,duration:e.duration,delay:e.delay,iterations:e.iterations,curve:e.curve})}
return e}()
t.AnimationBase=l
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/animation/animation-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/animation/animation-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/animation/animation.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/ui/animation/animation-common.js"),a=o("../node_modules/tns-core-modules/ui/styling/style-properties.js"),s=o("../node_modules/tns-core-modules/utils/utils.js"),u=o("../node_modules/tns-core-modules/platform/platform.js"),l=o("../node_modules/tns-core-modules/utils/lazy.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/animation/animation-common.js"))
var c=l.default(function(){return new android.view.animation.AccelerateInterpolator(1)}),d=l.default(function(){return new android.view.animation.DecelerateInterpolator(1)}),p=l.default(function(){return new android.view.animation.AccelerateDecelerateInterpolator}),f=l.default(function(){return new android.view.animation.LinearInterpolator}),h=l.default(function(){return new android.view.animation.BounceInterpolator}),m="ui.animation.",y={}
y[i.Properties.backgroundColor]=Symbol(m+i.Properties.backgroundColor)
y[i.Properties.opacity]=Symbol(m+i.Properties.opacity)
y[i.Properties.rotate]=Symbol(m+i.Properties.rotate)
y[i.Properties.scale]=Symbol(m+i.Properties.scale)
y[i.Properties.translate]=Symbol(m+i.Properties.translate)
y[i.Properties.height]=Symbol(m+i.Properties.height)
y[i.Properties.width]=Symbol(m+i.Properties.width)
function g(e){switch(e){case"easeIn":i.traceEnabled()&&i.traceWrite("Animation curve resolved to android.view.animation.AccelerateInterpolator(1).",i.traceCategories.Animation)
return c()
case"easeOut":i.traceEnabled()&&i.traceWrite("Animation curve resolved to android.view.animation.DecelerateInterpolator(1).",i.traceCategories.Animation)
return d()
case"easeInOut":i.traceEnabled()&&i.traceWrite("Animation curve resolved to android.view.animation.AccelerateDecelerateInterpolator().",i.traceCategories.Animation)
return p()
case"linear":i.traceEnabled()&&i.traceWrite("Animation curve resolved to android.view.animation.LinearInterpolator().",i.traceCategories.Animation)
return f()
case"spring":i.traceEnabled()&&i.traceWrite("Animation curve resolved to android.view.animation.BounceInterpolator().",i.traceCategories.Animation)
return h()
case"ease":return androidx.core.view.animation.PathInterpolatorCompat.create(.25,.1,.25,1)
default:i.traceEnabled()&&i.traceWrite("Animation curve resolved to original: "+e,i.traceCategories.Animation)
if(e instanceof i.CubicBezierAnimationCurve)return androidx.core.view.animation.PathInterpolatorCompat.create(e.x1,e.y1,e.x2,e.y2)
if(e&&e.getInterpolation)return e
if(e instanceof android.view.animation.LinearInterpolator)return e
throw new Error("Invalid animation curve: "+e)}}t._resolveAnimationCurve=g
var v=function(e){__extends(t,e)
function t(t,o){var r=e.call(this,t,o)||this
r._resetOnFinish=!0
r._valueSource="animation"
t.length>0&&void 0!==t[0].valueSource&&(r._valueSource=t[0].valueSource)
var n=new WeakRef(r)
r._animatorListener=new android.animation.Animator.AnimatorListener({onAnimationStart:function(e){i.traceEnabled()&&i.traceWrite("MainAnimatorListener.onAndroidAnimationStart("+e+")",i.traceCategories.Animation)},onAnimationRepeat:function(e){i.traceEnabled()&&i.traceWrite("MainAnimatorListener.onAnimationRepeat("+e+")",i.traceCategories.Animation)},onAnimationEnd:function(e){i.traceEnabled()&&i.traceWrite("MainAnimatorListener.onAnimationEnd("+e+")",i.traceCategories.Animation)
var t=n.get()
t&&t._onAndroidAnimationEnd()},onAnimationCancel:function(e){i.traceEnabled()&&i.traceWrite("MainAnimatorListener.onAnimationCancel("+e+")",i.traceCategories.Animation)
var t=n.get()
t&&t._onAndroidAnimationCancel()}})
return r}t.prototype.play=function(e){void 0!==e&&(this._resetOnFinish=e)
if(this.isPlaying)return this._rejectAlreadyPlaying()
if(this._animatorSet)return this._play()
this._animators=new Array
this._propertyUpdateCallbacks=new Array
this._propertyResetCallbacks=new Array
for(var t=0,o=this._propertyAnimations.length;t<o;t++)this._createAnimators(this._propertyAnimations[t])
this._nativeAnimatorsArray=Array.create(android.animation.Animator,this._animators.length)
t=0
for(var r=this._animators.length;t<r;t++)this._nativeAnimatorsArray[t]=this._animators[t]
this._animatorSet=new android.animation.AnimatorSet
this._animatorSet.addListener(this._animatorListener)
return this._play()}
t.prototype.cancel=function(){if(this.isPlaying){i.traceWrite("Cancelling AnimatorSet.",i.traceCategories.Animation)
this._animatorSet.cancel()}else i.traceWrite("Animation is not currently playing.",i.traceCategories.Animation,i.traceType.warn)}
t.prototype._resolveAnimationCurve=function(e){return g(e)}
t.prototype._play=function(){var t=e.prototype.play.call(this)
if(u.device.sdkVersion<="23"){this._animatorSet=new android.animation.AnimatorSet
this._animatorSet.addListener(this._animatorListener)}this._animators.length>0&&(this._playSequentially?this._animatorSet.playSequentially(this._nativeAnimatorsArray):this._animatorSet.playTogether(this._nativeAnimatorsArray))
i.traceEnabled()&&i.traceWrite("Starting "+this._nativeAnimatorsArray.length+" animations "+(this._playSequentially?"sequentially.":"together."),i.traceCategories.Animation)
this._animatorSet.setupStartValues()
this._animatorSet.start()
return t}
t.prototype._onAndroidAnimationEnd=function(){if(this.isPlaying){this._propertyUpdateCallbacks.forEach(function(e){return e()})
this._resolveAnimationFinishedPromise()
this._resetOnFinish&&this._target&&this._target._removeAnimation(this)}}
t.prototype._onAndroidAnimationCancel=function(){this._propertyResetCallbacks.forEach(function(e){return e()})
this._rejectAnimationFinishedPromise()
this._target&&this._target._removeAnimation(this)}
t.prototype._createAnimators=function(e){if(e.target.nativeViewProtected){i.traceEnabled()&&i.traceWrite("Creating ObjectAnimator(s) for animation: "+t._getAnimationInfo(e)+"...",i.traceCategories.Animation)
if(null===e.target||void 0===e.target)throw new Error("Animation target cannot be null or undefined; property: "+e.property+"; value: "+e.value+";")
if(null===e.property||void 0===e.property)throw new Error("Animation property cannot be null or undefined; target: "+e.target+"; value: "+e.value+";")
if(null===e.value||void 0===e.value)throw new Error("Animation value cannot be null or undefined; target: "+e.target+"; property: "+e.property+";")
this._target=e.target
var o,r,l,c,d,p=e.target.nativeViewProtected,f=new Array,h=new Array,m=new Array,g=s.layout.getDisplayDensity(),v=y[e.property]
v&&(e.target[v]=e)
var b="animation"===this._valueSource,_=e.target.style
switch(e.property){case i.Properties.opacity:a.opacityProperty._initDefaultNativeValue(_)
r=p.getAlpha()
o=Array.create("float",1)
o[0]=e.value
h.push(N(function(){e.target.style[b?a.opacityProperty.name:a.opacityProperty.keyframe]=e.value}))
m.push(N(function(){b?e.target.style[a.opacityProperty.name]=r:e.target.style[a.opacityProperty.keyframe]=r
e.target.nativeViewProtected&&e.target[a.opacityProperty.setNative](e.target.style.opacity)}))
f.push(android.animation.ObjectAnimator.ofFloat(p,"alpha",o))
break
case i.Properties.backgroundColor:a.backgroundColorProperty._initDefaultNativeValue(_)
n||(n=new android.animation.ArgbEvaluator)
r=e.target.backgroundColor
o=Array.create(java.lang.Object,2)
o[0]=e.target.backgroundColor?java.lang.Integer.valueOf(e.target.backgroundColor.argb):java.lang.Integer.valueOf(-1)
o[1]=java.lang.Integer.valueOf(e.value.argb)
var w=android.animation.ValueAnimator.ofObject(n,o)
w.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener({onAnimationUpdate:function(t){var o=t.getAnimatedValue().intValue()
e.target.style[b?a.backgroundColorProperty.name:a.backgroundColorProperty.keyframe]=new i.Color(o)}}))
h.push(N(function(){e.target.style[b?a.backgroundColorProperty.name:a.backgroundColorProperty.keyframe]=e.value}))
m.push(N(function(){b?e.target.style[a.backgroundColorProperty.name]=r:e.target.style[a.backgroundColorProperty.keyframe]=r
e.target.nativeViewProtected&&e.target[a.backgroundColorProperty.setNative]&&e.target[a.backgroundColorProperty.setNative](e.target.style.backgroundColor)}))
f.push(w)
break
case i.Properties.translate:a.translateXProperty._initDefaultNativeValue(_)
a.translateYProperty._initDefaultNativeValue(_)
c=Array.create(android.animation.Animator,2)
o=Array.create("float",1)
o[0]=e.value.x*g
c[0]=android.animation.ObjectAnimator.ofFloat(p,"translationX",o)
c[0].setRepeatCount(t._getAndroidRepeatCount(e.iterations))
o=Array.create("float",1)
o[0]=e.value.y*g
c[1]=android.animation.ObjectAnimator.ofFloat(p,"translationY",o)
c[1].setRepeatCount(t._getAndroidRepeatCount(e.iterations))
r=p.getTranslationX()/g
l=p.getTranslationY()/g
h.push(N(function(){e.target.style[b?a.translateXProperty.name:a.translateXProperty.keyframe]=e.value.x
e.target.style[b?a.translateYProperty.name:a.translateYProperty.keyframe]=e.value.y}))
m.push(N(function(){if(b){e.target.style[a.translateXProperty.name]=r
e.target.style[a.translateYProperty.name]=l}else{e.target.style[a.translateXProperty.keyframe]=r
e.target.style[a.translateYProperty.keyframe]=l}if(e.target.nativeViewProtected){e.target[a.translateXProperty.setNative](e.target.style.translateX)
e.target[a.translateYProperty.setNative](e.target.style.translateY)}}))
d=new android.animation.AnimatorSet
d.playTogether(c)
d.setupStartValues()
f.push(d)
break
case i.Properties.scale:a.scaleXProperty._initDefaultNativeValue(_)
a.scaleYProperty._initDefaultNativeValue(_)
c=Array.create(android.animation.Animator,2)
o=Array.create("float",1)
o[0]=e.value.x
c[0]=android.animation.ObjectAnimator.ofFloat(p,"scaleX",o)
c[0].setRepeatCount(t._getAndroidRepeatCount(e.iterations))
o=Array.create("float",1)
o[0]=e.value.y
c[1]=android.animation.ObjectAnimator.ofFloat(p,"scaleY",o)
c[1].setRepeatCount(t._getAndroidRepeatCount(e.iterations))
r=p.getScaleX()
l=p.getScaleY()
h.push(N(function(){e.target.style[b?a.scaleXProperty.name:a.scaleXProperty.keyframe]=e.value.x
e.target.style[b?a.scaleYProperty.name:a.scaleYProperty.keyframe]=e.value.y}))
m.push(N(function(){if(b){e.target.style[a.scaleXProperty.name]=r
e.target.style[a.scaleYProperty.name]=l}else{e.target.style[a.scaleXProperty.keyframe]=r
e.target.style[a.scaleYProperty.keyframe]=l}if(e.target.nativeViewProtected){e.target[a.scaleXProperty.setNative](e.target.style.scaleX)
e.target[a.scaleYProperty.setNative](e.target.style.scaleY)}}))
d=new android.animation.AnimatorSet
d.playTogether(c)
d.setupStartValues()
f.push(d)
break
case i.Properties.rotate:a.rotateProperty._initDefaultNativeValue(_)
r=p.getRotation()
o=Array.create("float",1)
o[0]=e.value
h.push(N(function(){e.target.style[b?a.rotateProperty.name:a.rotateProperty.keyframe]=e.value}))
m.push(N(function(){b?e.target.style[a.rotateProperty.name]=r:e.target.style[a.rotateProperty.keyframe]=r
e.target.nativeViewProtected&&e.target[a.rotateProperty.setNative](e.target.style.rotate)}))
f.push(android.animation.ObjectAnimator.ofFloat(p,"rotation",o))
break
case i.Properties.width:case i.Properties.height:var P="height"===e.property,C=P?a.heightProperty:a.widthProperty
C._initDefaultNativeValue(_)
o=Array.create("float",2)
var S=e.value,T=e.target.parent
if(!T)throw new Error("cannot animate "+e.property+" on root view")
var x=P?T.getMeasuredHeight():T.getMeasuredWidth()
S=a.PercentLength.toDevicePixels(S,x,x)/u.screen.mainScreen.scale
var I=P?p.getHeight():p.getWidth(),j=b?C.name:C.keyframe
r=I/u.screen.mainScreen.scale
o[0]=r
o[1]=S
var L=android.animation.ValueAnimator.ofFloat(o)
L.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener({onAnimationUpdate:function(t){var o=t.getAnimatedValue().floatValue()
e.target.style[b?C.name:C.keyframe]=o}}))
h.push(N(function(){e.target.style[j]=e.value}))
m.push(N(function(){e.target.style[j]=r
if(e.target.nativeViewProtected){var t=e.target[C.setNative]
t(e.target.style[e.property])}}))
f.push(L)
break
default:throw new Error("Animating property '"+e.property+"' is unsupported")}for(var E=0,V=f.length;E<V;E++){void 0!==e.duration&&f[E].setDuration(e.duration)
void 0!==e.delay&&f[E].setStartDelay(e.delay)
void 0!==e.iterations&&f[E]instanceof android.animation.ValueAnimator&&f[E].setRepeatCount(t._getAndroidRepeatCount(e.iterations))
void 0!==e.curve&&f[E].setInterpolator(e.curve)
i.traceEnabled()&&i.traceWrite("Animator created: "+f[E],i.traceCategories.Animation)}this._animators=this._animators.concat(f)
this._propertyUpdateCallbacks=this._propertyUpdateCallbacks.concat(h)
this._propertyResetCallbacks=this._propertyResetCallbacks.concat(m)}function N(t){return function(){if(e.target[v]===e){delete e.target[v]
t()}}}}
t._getAndroidRepeatCount=function(e){return e===Number.POSITIVE_INFINITY?android.view.animation.Animation.INFINITE:e-1}
return t}(i.AnimationBase)
t.Animation=v
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/animation/animation.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/animation/animation.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/animation/keyframe-animation.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/enums/enums.js"),i=o("../node_modules/tns-core-modules/trace/trace.js"),a=o("../node_modules/tns-core-modules/ui/core/properties/properties.js"),s=o("../node_modules/tns-core-modules/ui/animation/animation.js"),u=o("../node_modules/tns-core-modules/ui/styling/style-properties.js"),l=function(){return function(){}}()
t.Keyframes=l
var c=function(){return function(){}}()
t.UnparsedKeyframe=c
var d=function(){return function(){}}()
t.KeyframeDeclaration=d
var p=function(){return function(){this.curve=n.AnimationCurve.ease}}()
t.KeyframeInfo=p
var f=function(){return function(){this.name=""
this.duration=.3
this.delay=0
this.iterations=1
this.curve="ease"
this.isForwards=!1
this.isReverse=!1}}()
t.KeyframeAnimationInfo=f
var h=function(){function e(){this.delay=0
this.iterations=1}e.keyframeAnimationFromInfo=function(t){var o=t.keyframes.length,r=new Array,n=0
if(t.isReverse)for(var i=o-1;i>=0;i--){var a=t.keyframes[i]
n=e.parseKeyframe(t,a,r,n)}else{for(var s=0;s<o;s++){a=t.keyframes[s]
n=e.parseKeyframe(t,a,r,n)}for(var u=o-1;u>0;u--){var l=r[u],c=r[u-1]
if(void 0!==c.curve){l.curve=c.curve
c.curve=void 0}}}r.map(function(e){return e.curve?e:Object.assign(e,{curve:t.curve})})
var d=new e
d.delay=t.delay
d.iterations=t.iterations
d.animations=r
d._isForwards=t.isForwards
return d}
e.parseKeyframe=function(e,t,o,r){for(var n={},i=0,a=t.declarations;i<a.length;i++){var s=a[i]
n[s.property]=s.value}var u=t.duration
if(0===u)u=.01
else{u=e.duration*u-r
r+=u}n.duration=e.isReverse?e.duration-u:u
n.curve=t.curve
n.forceLayer=!0
n.valueSource="keyframe"
o.push(n)
return r}
Object.defineProperty(e.prototype,"isPlaying",{get:function(){return this._isPlaying},enumerable:!0,configurable:!0})
e.prototype.cancel=function(){if(this.isPlaying){this._isPlaying=!1
for(var e=this._nativeAnimations.length-1;e>=0;e--){var t=this._nativeAnimations[e]
t.isPlaying&&t.cancel()}if(this._nativeAnimations.length>0){t=this._nativeAnimations[0]
this._resetAnimationValues(this._target,t)}this._resetAnimations()}else i.write("Keyframe animation is already playing.",i.categories.Animation,i.messageType.warn)}
e.prototype.play=function(e){var t=this
if(this._isPlaying){i.write("Keyframe animation is already playing.",i.categories.Animation,i.messageType.warn)
return new Promise(function(e){e()})}var o=new Promise(function(e){t._resolve=e})
this._isPlaying=!0
this._nativeAnimations=new Array
this._target=e
0!==this.delay?setTimeout(function(){return t.animate(e,0,t.iterations)},this.delay):this.animate(e,0,this.iterations)
return o}
e.prototype.animate=function(e,t,o){var r=this
if(this._isPlaying)if(0===t){var n=this.animations[0]
"backgroundColor"in n&&(e.style[u.backgroundColorProperty.keyframe]=n.backgroundColor)
if("scale"in n){e.style[u.scaleXProperty.keyframe]=n.scale.x
e.style[u.scaleYProperty.keyframe]=n.scale.y}if("translate"in n){e.style[u.translateXProperty.keyframe]=n.translate.x
e.style[u.translateYProperty.keyframe]=n.translate.y}"rotate"in n&&(e.style[u.rotateProperty.keyframe]=n.rotate)
"opacity"in n&&(e.style[u.opacityProperty.keyframe]=n.opacity)
"height"in n&&(e.style[u.heightProperty.keyframe]=n.height)
"width"in n&&(e.style[u.widthProperty.keyframe]=n.width)
setTimeout(function(){return r.animate(e,1,o)},1)}else if(t<0||t>=this.animations.length){o-=1
if(o>0)this.animate(e,0,o)
else{if(!1===this._isForwards){n=this.animations[this.animations.length-1]
this._resetAnimationValues(e,n)}this._resolveAnimationFinishedPromise()}}else{n=void 0
var a=this._nativeAnimations[t-1]
if(a)n=a
else{var l=this.animations[t]
l.target=e
n=new s.Animation([l])
this._nativeAnimations.push(n)}var c=o-1<=0
n.play(c).then(function(){r.animate(e,t+1,o)},function(e){i.write("string"==typeof e?e:e.message,i.categories.Animation,i.messageType.warn)}).catch(function(e){i.write("string"==typeof e?e:e.message,i.categories.Animation,i.messageType.warn)})}}
e.prototype._resolveAnimationFinishedPromise=function(){this._nativeAnimations=new Array
this._isPlaying=!1
this._target=null
this._resolve()}
e.prototype._resetAnimations=function(){this._nativeAnimations=new Array
this._isPlaying=!1
this._target=null}
e.prototype._resetAnimationValues=function(e,t){"backgroundColor"in t&&(e.style[u.backgroundColorProperty.keyframe]=a.unsetValue)
if("scale"in t){e.style[u.scaleXProperty.keyframe]=a.unsetValue
e.style[u.scaleYProperty.keyframe]=a.unsetValue}if("translate"in t){e.style[u.translateXProperty.keyframe]=a.unsetValue
e.style[u.translateYProperty.keyframe]=a.unsetValue}"rotate"in t&&(e.style[u.rotateProperty.keyframe]=a.unsetValue)
"opacity"in t&&(e.style[u.opacityProperty.keyframe]=a.unsetValue)
"height"in t&&(e.style[u.heightProperty.keyframe]=a.unsetValue)
"width"in t&&(e.style[u.widthProperty.keyframe]=a.unsetValue)}
return e}()
t.KeyframeAnimation=h
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/animation/keyframe-animation.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/animation/keyframe-animation.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/border/border.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/content-view/content-view.js"),i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}Object.defineProperty(t.prototype,"cornerRadius",{get:function(){return"number"==typeof this.borderRadius?this.borderRadius:0},set:function(e){this.borderRadius=e},enumerable:!0,configurable:!0})
t.prototype.onMeasure=function(e,t){var o=n.layout.getMeasureSpecSize(e),r=n.layout.getMeasureSpecMode(e),i=n.layout.getMeasureSpecSize(t),a=n.layout.getMeasureSpecMode(t),s=this.effectiveBorderLeftWidth+this.effectiveBorderRightWidth,u=this.effectiveBorderTopWidth+this.effectiveBorderBottomWidth,l=n.View.measureChild(this,this.layoutView,n.layout.makeMeasureSpec(o-s,r),n.layout.makeMeasureSpec(i-u,a)),c=n.View.resolveSizeAndState(l.measuredWidth+s,o,r,0),d=n.View.resolveSizeAndState(l.measuredHeight+u,i,a,0)
this.setMeasuredDimension(c,d)}
t.prototype.onLayout=function(e,t,o,r){var i=this.effectiveBorderLeftWidth+this.effectiveBorderRightWidth,a=this.effectiveBorderTopWidth+this.effectiveBorderBottomWidth
n.View.layoutChild(this,this.layoutView,this.effectiveBorderLeftWidth,this.effectiveBorderTopWidth,o-e-i,r-t-a)}
t=__decorate([Deprecated,n.CSSType("Border")],t)
return t}(n.ContentView)
t.Border=i
i.prototype.recycleNativeView="auto"
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/border/border.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/border/border.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/bottom-navigation/bottom-navigation.js":function(e,t,o){(function(r){function n(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}Object.defineProperty(t,"__esModule",{value:!0})
var i=o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-strip-item/tab-strip-item.js"),a=o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-navigation-base/tab-navigation-base.js"),s=o("../node_modules/tns-core-modules/ui/styling/font.js"),u=o("../node_modules/tns-core-modules/ui/text-base/text-base.js"),l=o("../node_modules/tns-core-modules/ui/core/view/view.js"),c=o("../node_modules/tns-core-modules/ui/frame/frame.js"),d=o("../node_modules/tns-core-modules/utils/utils.js"),p=o("../node_modules/tns-core-modules/image-source/image-source.js"),f=o("../node_modules/tns-core-modules/application/application.js")
n(o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-content-item/tab-content-item.js"))
n(o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-navigation-base/tab-navigation-base.js"))
n(o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-strip/tab-strip.js"))
n(o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-strip-item/tab-strip-item.js"))
var h,m,y,g=8,v="_tabId",b="_index",_=Symbol("_owner")
function w(){if(!m){var e=function(e){__extends(o,e)
function o(){var t=e.call(this)||this
return r.__native(t)}o.newInstance=function(e,t){var r=new android.os.Bundle
r.putInt(v,e)
r.putInt(b,t)
var n=new o
n.setArguments(r)
return n}
o.prototype.onCreate=function(o){e.prototype.onCreate.call(this,o)
var r,n,i=this.getArguments()
this.tab=(r=i.getInt(v),n=t.tabs.find(function(e){var t=e.get()
return t&&t._domId===r}),n&&n.get())
this.index=i.getInt(b)
if(!this.tab)throw new Error("Cannot find BottomNavigation")}
o.prototype.onCreateView=function(e,t,o){var r=this.tab.items[this.index]
return r.view.nativeViewProtected}
return o}(org.nativescript.widgets.FragmentBase),o=function(e){__extends(t,e)
function t(t,o){var n=e.call(this,t)||this
n.owner=o
return r.__native(n)}t.prototype.onSelectedPositionChange=function(e,t){var o=this.owner
if(o){o.changeTab(e)
var r=o.tabStrip&&o.tabStrip.items
e>=0&&r&&r[e]&&r[e]._emit(i.TabStripItem.selectEvent)
t>=0&&r&&r[t]&&r[t]._emit(i.TabStripItem.unselectEvent)
o.selectedIndex=e}}
t.prototype.onTap=function(e){var t=this.owner
if(t){var o=t.tabStrip&&t.tabStrip.items
e>=0&&o[e]&&o[e]._emit(i.TabStripItem.tapEvent)}}
return t}(org.nativescript.widgets.BottomNavigationBar),n=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
return r.__native(t)}t.prototype.onViewAttachedToWindow=function(e){var t=e[_]
t&&t._onAttachedToWindow()}
t.prototype.onViewDetachedFromWindow=function(e){var t=e[_]
t&&t._onDetachedFromWindow()}
t=__decorate([Interfaces([android.view.View.OnAttachStateChangeListener])],t)
return t}(java.lang.Object)
h=e
m=o
y=new n}}function P(e){var t,o=new org.nativescript.widgets.TabItemSpec
t=e.image?e.image.src:e.iconSource
o.title=e.label?e.label.text:e.title
e.backgroundColor instanceof l.Color&&(o.backgroundColor=e.backgroundColor.android)
if(t)if(0===t.indexOf(d.RESOURCE_PREFIX)){o.iconId=d.ad.resources.getDrawableId(t.substr(d.RESOURCE_PREFIX.length))
o.iconId}else{var r=new p.ImageSource
if(d.isFontIconURI(e.iconSource)){var n=e.iconSource.split("//")[1],i=e.style.fontInternal,a=e.style.color
r=p.fromFontIconCode(n,i,a)}else r=p.fromFileOrResource(e.iconSource)
r&&(o.iconDrawable=new android.graphics.drawable.BitmapDrawable(f.android.context.getResources(),r.android))}return o}t.tabs=new Array
var C=function(e){__extends(o,e)
function o(){var o=e.call(this)||this
o._contentViewId=-1
o._attachedToWindow=!1
t.tabs.push(new WeakRef(o))
return o}Object.defineProperty(o.prototype,"_hasFragments",{get:function(){return!0},enumerable:!0,configurable:!0})
o.prototype.onItemsChanged=function(t,o){e.prototype.onItemsChanged.call(this,t,o)
t&&t.forEach(function(e,t,o){e.index=0
e.tabItemSpec=null
e.setNativeView(null)})}
o.prototype.createNativeView=function(){w()
var e=this._context,t=new org.nativescript.widgets.GridLayout(e)
t.addRow(new org.nativescript.widgets.ItemSpec(1,org.nativescript.widgets.GridUnitType.star))
t.addRow(new org.nativescript.widgets.ItemSpec(1,org.nativescript.widgets.GridUnitType.auto))
var o=new org.nativescript.widgets.ContentLayout(this._context),r=new org.nativescript.widgets.CommonLayoutParams
r.row=0
o.setLayoutParams(r)
t.addView(o)
t.contentView=o
var n=new m(e,this),i=new org.nativescript.widgets.CommonLayoutParams
i.row=1
n.setLayoutParams(i)
t.addView(n)
t.bottomNavigationBar=n
!function(e,t){var o=androidx.core.view.ViewCompat
if(o.setElevation){var r=g*d.layout.getDisplayDensity()
o.setElevation(e,r)
o.setElevation(t,r)}}(t,n)
var a=d.ad.resources.getPaletteColor("colorPrimary",e)
a&&n.setBackgroundColor(a)
return t}
o.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
this._contentViewId<0&&(this._contentViewId=android.view.View.generateViewId())
var t=this.nativeViewProtected
t.addOnAttachStateChangeListener(y)
t[_]=this
this._contentView=t.contentView
this._contentView.setId(this._contentViewId)
this._bottomNavigationBar=t.bottomNavigationBar
this._bottomNavigationBar.owner=this
this.tabStrip&&this.tabStrip.setNativeView(this._bottomNavigationBar)}
o.prototype._loadUnloadTabItems=function(e){var t=this,o=this.items,r=this.items.length-1,n=[],i=[]
!function(e,t,o,r){for(var n=Math.max(0,e-t),i=Math.min(e+t,o),a=n;a<=i;a++)r(a)}(e,0,r,function(e){return i.push(e)})
o.forEach(function(e,t){var o=i.indexOf(t)
o<0&&n.push(t)})
n.forEach(function(e){var t=o[e]
o[e]&&t.unloadView(t.view)})
var a=o[e],s=a&&a.view
s instanceof c.Frame&&s._pushInFrameStackRecursive()
i.forEach(function(e){var r=o[e]
t.isLoaded&&o[e]&&r.loadView(r.view)})}
o.prototype.onLoaded=function(){e.prototype.onLoaded.call(this)
var t=this.tabStrip?this.tabStrip.items:null
this.setTabStripItems(t)
this._attachedToWindow&&this.changeTab(this.selectedIndex)}
o.prototype._onAttachedToWindow=function(){e.prototype._onAttachedToWindow.call(this)
this._attachedToWindow=!0
this.changeTab(this.selectedIndex)}
o.prototype._onDetachedFromWindow=function(){e.prototype._onDetachedFromWindow.call(this)
this._attachedToWindow=!1}
o.prototype.onUnloaded=function(){e.prototype.onUnloaded.call(this)
this.setTabStripItems(null)
var t=this._currentFragment
if(t){this.destroyItem(t.index,t)
this.commitCurrentTransaction()}}
o.prototype.disposeNativeView=function(){this._bottomNavigationBar.setItems(null)
this._bottomNavigationBar=null
this.nativeViewProtected.removeOnAttachStateChangeListener(y)
this.nativeViewProtected[_]=null
e.prototype.disposeNativeView.call(this)}
o.prototype._onRootViewReset=function(){e.prototype._onRootViewReset.call(this)
this.disposeTabFragments()}
o.prototype.disposeTabFragments=function(){for(var e=this._getFragmentManager(),t=e.beginTransaction(),o=0,r=e.getFragments().toArray();o<r.length;o++){var n=r[o]
t.remove(n)}t.commitNowAllowingStateLoss()}
Object.defineProperty(o.prototype,"currentTransaction",{get:function(){if(!this._currentTransaction){var e=this._getFragmentManager()
this._currentTransaction=e.beginTransaction()}return this._currentTransaction},enumerable:!0,configurable:!0})
o.prototype.commitCurrentTransaction=function(){if(this._currentTransaction){this._currentTransaction.commitNowAllowingStateLoss()
this._currentTransaction=null}}
o.prototype.changeTab=function(e){if(-1!==e){var t=this._currentFragment
t&&this.destroyItem(t.index,t)
var o=this.instantiateItem(this._contentView,e)
this.setPrimaryItem(e,o)
this.commitCurrentTransaction()}}
o.prototype.instantiateItem=function(e,t){var o,r,n=(o=e.getId(),r=t,"android:bottomnavigation:"+o+":"+r),i=this._getFragmentManager(),a=i.findFragmentByTag(n)
if(null!=a)this.currentTransaction.attach(a)
else{a=h.newInstance(this._domId,t)
this.currentTransaction.add(e.getId(),a,n)}if(a!==this._currentFragment){a.setMenuVisibility(!1)
a.setUserVisibleHint(!1)}return a}
o.prototype.setPrimaryItem=function(e,t){if(t!==this._currentFragment){if(null!=this._currentFragment){this._currentFragment.setMenuVisibility(!1)
this._currentFragment.setUserVisibleHint(!1)}if(null!=t){t.setMenuVisibility(!0)
t.setUserVisibleHint(!0)}this._currentFragment=t
var o=this.items,r=o?o[e]:null
if(r){r.canBeLoaded=!0
this._loadUnloadTabItems(e)}}}
o.prototype.destroyItem=function(e,t){if(t){this.currentTransaction.detach(t)
this._currentFragment===t&&(this._currentFragment=null)}this.items&&this.items[e]&&(this.items[e].canBeLoaded=!1)}
o.prototype.setTabStripItems=function(e){var t=this
if(this.tabStrip&&e){var o=new Array
e.forEach(function(t,r,n){t.index=r
if(e[r]){var i=P(e[r])
o.push(i)}})
this._bottomNavigationBar.setItems(o)
e.forEach(function(e,o,r){var n=t._bottomNavigationBar.getTextViewForItemAt(o)
e.setNativeView(n)})}else this._bottomNavigationBar.setItems(null)}
o.prototype.updateAndroidItemAt=function(e,t){this._bottomNavigationBar.updateItemAt(e,t)}
o.prototype.getTabBarBackgroundColor=function(){return this._bottomNavigationBar.getBackground()}
o.prototype.setTabBarBackgroundColor=function(e){e instanceof l.Color?this._bottomNavigationBar.setBackgroundColor(e.android):this._bottomNavigationBar.setBackground(function(e,t){if(e){var o=e.getConstantState()
if(o)return o.newDrawable(t)}return e}(e,this.nativeViewProtected.getResources))}
o.prototype.getTabBarColor=function(){return this._bottomNavigationBar.getTabTextColor()}
o.prototype.setTabBarColor=function(e){if(e instanceof l.Color){this._bottomNavigationBar.setTabTextColor(e.android)
this._bottomNavigationBar.setSelectedTabTextColor(e.android)}else{this._bottomNavigationBar.setTabTextColor(e)
this._bottomNavigationBar.setSelectedTabTextColor(e)}}
o.prototype.setTabBarItemBackgroundColor=function(e,t){var o=this.tabStrip.items.indexOf(e),r=P(e)
this.updateAndroidItemAt(o,r)}
o.prototype.getTabBarItemColor=function(e){return e.nativeViewProtected.getCurrentTextColor()}
o.prototype.setTabBarItemColor=function(e,t){"number"==typeof t?e.nativeViewProtected.setTextColor(t):e.nativeViewProtected.setTextColor(t.android)}
o.prototype.getTabBarItemFontSize=function(e){return{nativeSize:e.nativeViewProtected.getTextSize()}}
o.prototype.setTabBarItemFontSize=function(e,t){"number"==typeof t?e.nativeViewProtected.setTextSize(t):e.nativeViewProtected.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX,t.nativeSize)}
o.prototype.getTabBarItemFontInternal=function(e){return e.nativeViewProtected.getTypeface()}
o.prototype.setTabBarItemFontInternal=function(e,t){e.nativeViewProtected.setTypeface(t instanceof s.Font?t.getAndroidTypeface():t)}
o.prototype.getTabBarItemTextTransform=function(e){return"default"}
o.prototype.setTabBarItemTextTransform=function(e,t){var o=e.nativeViewProtected
this._defaultTransformationMethod=this._defaultTransformationMethod||o.getTransformationMethod()
if("default"===t){o.setTransformationMethod(this._defaultTransformationMethod)
o.setText(e.title)}else{var r=u.getTransformedText(e.title,t)
o.setText(r)
o.setTransformationMethod(null)}}
o.prototype[a.selectedIndexProperty.setNative]=function(e){this._bottomNavigationBar.setSelectedPosition(e)}
o.prototype[a.itemsProperty.getDefault]=function(){return null}
o.prototype[a.itemsProperty.setNative]=function(e){e&&e.forEach(function(e,t){e.index=t})
a.selectedIndexProperty.coerce(this)}
o.prototype[a.tabStripProperty.getDefault]=function(){return null}
o.prototype[a.tabStripProperty.setNative]=function(e){var t=this.tabStrip?this.tabStrip.items:null
this.setTabStripItems(t)}
o=__decorate([l.CSSType("BottomNavigation")],o)
return o}(a.TabNavigationBase)
t.BottomNavigation=C
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/bottom-navigation/bottom-navigation.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/bottom-navigation/bottom-navigation.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/builder/binding-builder.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
var r,n=/[\+\-\*\/%\?:<>=!\|&\(\)^~]/
!function(e){e.sourceProperty="sourceProperty"
e.targetProperty="targetProperty"
e.expression="expression"
e.twoWay="twoWay"
e.source="source"
e.bindingValueKey="$value"
e.parentValueKey="$parent"
e.parentsValueKey="$parents"
e.newPropertyValueKey="$newPropertyValue"}(r=t.bindingConstants||(t.bindingConstants={}))
var i=/=+/,a=/(==|===|>=|<=|!=|!==)/
t.parentsRegex=/\$parents\s*\[\s*(['"]*)\w*\1\s*\]/g
function s(e){var t=e.search(i)
if(t>-1){var o=e.substr(t>0?t-1:0,3)
if(-1===o.search(a))return!0}return!1}var u={propName:"propName",propValue:"propValue"}
function l(e,t,o){var r={},n=e.substr(0,e.indexOf("=")).trim(),i=e.substr(e.indexOf("=")+1).trim()
t&&(n=n?n in t?n:null:t.defaultProperty)
if(n){if(o)r=o(n,i)
else{r[u.propName]=n
r[u.propValue]=i}return r}return null}t.getBindingOptions=function(e,o){var i=[],a=function(e){for(var t=[],o=0,r=0,n=!1,i=!1,a=0;a<e.length;a++){'"'===e[a]&&(i=!i)
"'"===e[a]&&(n=!n)
"("!==e[a]&&"["!==e[a]||o++
")"!==e[a]&&"]"!==e[a]||o--
if(","===e[a]&&0===o&&!n&&!i){t.push(e.substr(r,a-r))
r=a+1}}t.push(e.substr(r))
return t}(o)
if(function(e){for(var t=0;t<e.length;t++)if(s(e[t]))return!0
return!1}(a))i=a
else if(1===a.length){var d=a[0].trim(),p=void 0
if(function(e){if(e.search(n)>-1){var o=e.match(t.parentsRegex)
if(o){var r=e.substr(e.indexOf(o[0])+o[0].length)
if(!(r.search(n)>-1))return!1}return!0}return!1}(d)){p=r.bindingValueKey
i.push(r.expression+" = "+d)}else p=d
i.push(r.sourceProperty+" = "+p)
i.push(r.twoWay+" = true")}else{i.push(r.sourceProperty+" = "+a[0].trim())
i.push(r.expression+" = "+a[1].trim())
var f=!a[2]||"true"===a[2].toLowerCase().trim()
i.push(r.twoWay+" = "+f)}var h=function(e,t,o){for(var r,n={},i=0;i<e.length;i++){r=l(e[i],t,o)
r&&(n[r[u.propName]]=r[u.propValue])}return n}(i,c,function(e,t){var o={}
o[u.propName]=e
e===r.twoWay?o[u.propValue]="true"===t:o[u.propValue]=t
return o}),m={targetProperty:e}
for(var y in h)h.hasOwnProperty(y)&&(m[y]=h[y])
void 0===m[r.twoWay]&&(m[r.twoWay]=!0)
return m}
var c={sourceProperty:!0,expression:!0,twoWay:!0,source:!0,defaultProperty:r.sourceProperty}
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/builder/binding-builder.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/builder/binding-builder.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/builder/builder.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/utils/debug.js"),a=o("../node_modules/tns-core-modules/xml/xml.js"),s=o("../node_modules/tns-core-modules/utils/types.js"),u=o("../node_modules/tns-core-modules/ui/builder/component-builder/component-builder.js"),l=o("../node_modules/tns-core-modules/platform/platform.js"),c=o("../node_modules/tns-core-modules/profiling/profiling.js"),d=o("../node_modules/tns-core-modules/ui/builder/module-name-sanitizer.js"),p=o("../node_modules/tns-core-modules/module-name-resolver/module-name-resolver.js"),f=l.platformNames.ios.toLowerCase(),h=l.platformNames.android.toLowerCase(),m=/tns\.xsd$/i
t.parse=function(e,t){if("function"==typeof e)return e()
var o=t?v(t):void 0,r=b(e,o)
return r&&r.component}
t.parseMultipleTemplates=function(e,t){var o="<ListView><ListView.itemTemplates>"+e+"</ListView.itemTemplates></ListView>"
return b(o,t).component.itemTemplates}
t.load=function(e,t){var o
if("string"==typeof e){var r=d.sanitizeModuleName(e)
o=y(r,t)}else o=g(e.path,e.name,e.attributes,e.exports,e.page,!0)
return o&&o.component}
t.createViewFromEntry=c.profile("createViewFromEntry",function(e){if(e.create){var t=e.create()
if(!t)throw new Error("Failed to create View with entry.create() function.")
return t}if(e.moduleName){var o=d.sanitizeModuleName(e.moduleName),n=p.resolveModuleName(o,""),i=n?r.loadModule(n,!0):null
if(i&&i.createPage){t=i.createPage()
var a=p.resolveModuleName(o,"css")
a&&t.addCssFile(a)
return t}var s=y(o,i),u=s&&s.component
return u}throw new Error("Failed to load page XML file for module: "+e.moduleName)})
function y(e,t){var o,n=p.resolveModuleName(e,"xml")
if(n){var i=r.loadModule(n,!0)
o=b(i,t,n,e)}var a=o&&o.component
if(a){a.exports=t
a._moduleName=e}if(!o)throw new Error("Failed to load component from module: "+e)
return o}function g(e,t,o,n,i,a,l){void 0===a&&(a=!0)
if(!i&&n){i=n._parentPage
delete n._parentPage}var c
e=d.sanitizeModuleName(e)
var f=e+"/"+t,h=p.resolveModuleName(f,""),m=p.resolveModuleName(f,"xml"),g=p.resolveModuleName(f,"css")
if(m){var v=n
h&&(v=r.loadModule(h,!0))
v||(v={})
v._parentPage=i
c=y(f,v)
if(s.isDefined(c)&&s.isDefined(c.component)&&s.isDefined(o))for(var b in o)u.setPropertyValue(c.component,v,n,b,o[b])}else{c=u.getComponentModule(t,e,o,n,l,a)
g||(g=p.resolveModuleName(e,"css"))}i&&g&&i.addCssFile(g)
return c}function v(e){var t=!!e._domId
if(!t)return e.exports||e
for(var o=e.exports,r=e.parent;void 0===o&&r;){o=r.exports
r=r.parent}return o}function b(e,t,o,r){var a,s,u=i.debug&&o?n.SourceErrorFormat(o):n.PositionErrorFormat,l=i.debug&&o?n.ComponentSourceTracker(o):function(){};(a=new n.XmlStringParser(u)).pipe(new n.PlatformFilter).pipe(new n.XmlStateParser(s=new n.ComponentParser(t,u,l,r)))
a.parse(e)
return s.rootComponentModule}!function(e){var t=function(){function e(){}e.prototype.pipe=function(e){this._next=e
return e}
e.prototype.next=function(e){this._next.parse(e)}
return e}()
e.XmlProducerBase=t
var o=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.error=t||r
return o}t.prototype.parse=function(e){var t=this,o=new a.XmlParser(function(e){try{t.next(e)}catch(o){throw t.error(o,e.position)}},function(e,o){throw t.error(e,o)},!0)
s.isString(e)&&o.parse(e)}
return t}(t)
e.XmlStringParser=o
function r(e,t){return new i.ScopeError(e,"Parsing XML at "+t.line+":"+t.column)}e.PositionErrorFormat=r
e.SourceErrorFormat=function(e){return function(t,o){var r=o?new i.Source(e,o.line,o.column):new i.Source(e,-1,-1)
t=new i.SourceError(t,r,"Building UI from XML.")
return t}}
e.ComponentSourceTracker=function(e){return function(t,o){if(!i.Source.get(t)){var r=o?new i.Source(e,o.line,o.column):new i.Source(e,-1,-1)
i.Source.set(t,r)}}}
var n=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.parse=function(e){if(e.eventType===a.ParserEventType.StartElement&&t.isPlatform(e.elementName)){if(this.currentPlatformContext)throw new Error("Already in '"+this.currentPlatformContext+"' platform context and cannot switch to '"+e.elementName+"' platform! Platform tags cannot be nested.")
this.currentPlatformContext=e.elementName}else e.eventType===a.ParserEventType.EndElement&&t.isPlatform(e.elementName)?this.currentPlatformContext=void 0:this.currentPlatformContext&&!t.isCurentPlatform(this.currentPlatformContext)||this.next(e)}
t.isPlatform=function(e){if(e){var t=e.toLowerCase()
return t===h||t===f}return!1}
t.isCurentPlatform=function(e){return e&&e.toLowerCase()===l.device.os.toLowerCase()}
return t}(t)
e.PlatformFilter=n
var d=function(e){__extends(t,e)
function t(t,o){var r=e.call(this)||this
r.args=t
r.error=o
return r}t.prototype.replay=function(){var e=this
this.args.forEach(function(t){try{e.next(t)}catch(o){throw e.error(o,t.position)}})}
return t}(t)
e.XmlArgsReplay=d
var p=function(){function e(e){this.state=e}e.prototype.parse=function(e){this.state=this.state.parse(e)}
return e}()
e.XmlStateParser=p
var y=function(){function t(e,t,o){void 0===o&&(o=!0)
this.parent=e
this._context=t.context
this._recordedXmlStream=new Array
this._templateProperty=t
this._nestingLevel=0
this._state=0
this._setTemplateProperty=o}t.prototype.parse=function(e){e.eventType===a.ParserEventType.StartElement?this.parseStartElement(e.prefix,e.namespace,e.elementName,e.attributes):e.eventType===a.ParserEventType.EndElement&&this.parseEndElement(e.prefix,e.elementName)
this._recordedXmlStream.push(e)
return 2===this._state?this.parent:this}
Object.defineProperty(t.prototype,"elementName",{get:function(){return this._templateProperty.elementName},enumerable:!0,configurable:!0})
t.prototype.parseStartElement=function(e,t,o,r){if(0===this._state)this._state=1
else if(2===this._state)throw new Error("Template must have exactly one root element but multiple elements were found.")
this._nestingLevel++}
t.prototype.parseEndElement=function(e,t){if(0===this._state)throw new Error("Template must have exactly one root element but none was found.")
if(2===this._state)throw new Error("No more closing elements expected for this template.")
this._nestingLevel--
if(0===this._nestingLevel){this._state=2
if(this._setTemplateProperty&&this._templateProperty.name in this._templateProperty.parent.component){var o=this.buildTemplate()
this._templateProperty.parent.component[this._templateProperty.name]=o}}}
t.prototype.buildTemplate=function(){var t=this,o=this._context,r=this._templateProperty.errorFormat,n=this._templateProperty.sourceTracker,i=c.profile("Template()",function(){var i,a;(i=new e.XmlArgsReplay(t._recordedXmlStream,r)).pipe(new p(a=new _(o,r,n)))
i.replay()
return a.rootComponentModule.component})
return i}
return t}()
e.TemplateParser=y
var b=function(){function e(e,t){this.parent=e
this.templateProperty=t
this._childParsers=new Array}Object.defineProperty(e.prototype,"value",{get:function(){return this._value},enumerable:!0,configurable:!0})
e.prototype.parse=function(e){if(e.eventType===a.ParserEventType.StartElement&&"template"===e.elementName){var t=new y(this,this.templateProperty,!1)
t.key=e.attributes.key
this._childParsers.push(t)
return t}if(e.eventType===a.ParserEventType.EndElement){var o=_.getComplexPropertyName(e.elementName)
if(o===this.templateProperty.name){for(var r=new Array,n=0;n<this._childParsers.length;n++)r.push({key:this._childParsers[n].key,createView:this._childParsers[n].buildTemplate()})
this._value=r
return this.parent.parse(e)}}return this}
return e}()
e.MultiTemplateParser=b
var _=function(){function e(e,t,o,r){this.moduleName=r
this.parents=new Array
this.complexProperties=new Array
this.context=e
this.error=t
this.sourceTracker=o}e.prototype.buildComponent=function(e){if(e.prefix&&e.namespace)return g(e.namespace,e.elementName,e.attributes,this.context,this.currentRootView,!this.currentRootView,this.moduleName)
var t=e.namespace
m.test(t||"")&&(t=void 0)
return u.getComponentModule(e.elementName,t,e.attributes,this.context,this.moduleName,!this.currentRootView)}
e.prototype.parse=function(t){var o=this.parents[this.parents.length-1],r=this.complexProperties[this.complexProperties.length-1]
if(t.eventType===a.ParserEventType.StartElement)if(e.isComplexProperty(t.elementName)){var n=e.getComplexPropertyName(t.elementName),i={parent:o,name:n,items:[]}
this.complexProperties.push(i)
if(e.isKnownTemplate(n,o.exports))return new y(this,{context:(o?v(o.component):null)||this.context,parent:o,name:n,elementName:t.elementName,templateItems:[],errorFormat:this.error,sourceTracker:this.sourceTracker})
if(e.isKnownMultiTemplate(n,o.exports)){var s=new b(this,{context:(o?v(o.component):null)||this.context,parent:o,name:n,elementName:t.elementName,templateItems:[],errorFormat:this.error,sourceTracker:this.sourceTracker})
i.parser=s
return s}}else{var u=this.buildComponent(t)
if(u){this.sourceTracker(u.component,t.position)
if(o)r?e.addToComplexProperty(o,r,u):o.component._addChildFromBuilder&&o.component._addChildFromBuilder(t.elementName,u.component)
else if(0===this.parents.length){this.rootComponentModule=u
if(this.rootComponentModule){this.currentRootView=this.rootComponentModule.component
this.currentRootView.exports&&(this.context=this.currentRootView.exports)}}this.parents.push(u)}}else if(t.eventType===a.ParserEventType.EndElement)if(e.isComplexProperty(t.elementName)){if(r)if(r.parser)o.component[r.name]=r.parser.value
else if(o&&o.component._addArrayFromBuilder){o.component._addArrayFromBuilder(r.name,r.items)
r.items=[]}this.complexProperties.pop()}else this.parents.pop()
return this}
e.isComplexProperty=function(e){return s.isString(e)&&-1!==e.indexOf(".")}
e.getComplexPropertyName=function(e){var t
if(s.isString(e)){var o=e.split(".")
t=o[o.length-1]}return t}
e.isKnownTemplate=function(t,o){return e.KNOWNTEMPLATES in o&&o[e.KNOWNTEMPLATES]&&t in o[e.KNOWNTEMPLATES]}
e.isKnownMultiTemplate=function(t,o){return e.KNOWNMULTITEMPLATES in o&&o[e.KNOWNMULTITEMPLATES]&&t in o[e.KNOWNMULTITEMPLATES]}
e.addToComplexProperty=function(t,o,r){var n=t.component
e.isKnownCollection(o.name,t.exports)?o.items.push(r.component):n._addChildFromBuilder?n._addChildFromBuilder(o.name,r.component):n[o.name]=r.component}
e.isKnownCollection=function(t,o){return e.KNOWNCOLLECTIONS in o&&o[e.KNOWNCOLLECTIONS]&&t in o[e.KNOWNCOLLECTIONS]}
e.KNOWNCOLLECTIONS="knownCollections"
e.KNOWNTEMPLATES="knownTemplates"
e.KNOWNMULTITEMPLATES="knownMultiTemplates"
__decorate([c.profile],e.prototype,"buildComponent",null)
return e}()
e.ComponentParser=_}(n||(n={}))
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/builder/builder.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/builder/builder.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/builder/component-builder/component-builder.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/bindable/bindable.js"),i=o("../node_modules/tns-core-modules/ui/builder/binding-builder.js"),a=o("../node_modules/tns-core-modules/profiling/profiling.js"),s=o("../node_modules/tns-core-modules/platform/platform.js"),u=o("../node_modules/tns-core-modules/ui/builder/module-name-sanitizer.js"),l=o("../node_modules/tns-core-modules/module-name-resolver/module-name-resolver.js"),c={TabViewItem:"ui/tab-view",TabStrip:"ui/tab-navigation-base/tab-strip",TabStripItem:"ui/tab-navigation-base/tab-strip-item",TabContentItem:"ui/tab-navigation-base/tab-content-item",FormattedString:"text/formatted-string",Span:"text/span",ActionItem:"ui/action-bar",NavigationButton:"ui/action-bar",SegmentedBarItem:"ui/segmented-bar"},d=a.profile("createComponentInstance",function(e,t){var n,i,a
try{if("string"==typeof t){a=l.resolveModuleName(t,"")
i=r.loadModule(a,!0)}else{a=c[e]||"ui/"+(-1!==e.toLowerCase().indexOf("layout")?"layouts/":"")+e.split(/(?=[A-Z])/).join("-").toLowerCase()
i=r.loadModule(a,!1)}var s=i[e]||Object
n=new s}catch(r){var u=o("../node_modules/tns-core-modules/utils/debug.js")
throw new u.ScopeError(r,"Module '"+a+"' not found for element '"+(t?t+":":"")+e+"'.")}return{instance:n,instanceModule:i}}),p=a.profile("getComponentModuleExports",function(e,t,o){if(o){var n=o.codeFile||o.import
if(n){var i=l.resolveModuleName(u.sanitizeModuleName(n),"")
if(!i)throw new Error('Code file with path "'+n+'" cannot be found! Looking for webpack module with name "'+i+'"')
t=r.loadModule(i,!0)
e.exports=t}}return t}),f=a.profile("applyComponentCss",function(e,t,o){var r=!1
if(o&&o.cssFile){var n=l.resolveModuleName(u.sanitizeModuleName(o.cssFile),"css")
if(!n)throw new Error('Css file with path "'+o.cssFile+'" cannot be found! Looking for webpack module with name "'+n+'"')
e.addCssFile(n)
r=!0}if(t&&!r){n=l.resolveModuleName(t,"css")
n&&e.addCssFile(n)}}),h=a.profile("applyComponentAttributes",function(e,t,o,r){if(e&&t)for(var n in r){var i=r[n]
if(-1!==n.indexOf(":")){var a=n.split(":")[0].trim()
if(a.toLowerCase()!==s.device.os.toLowerCase())continue
n=n.split(":")[1].trim()}if(-1!==n.indexOf(".")){for(var u=e,l=n.split("."),c=l[l.length-1],d=0;d<l.length-1;d++)null!=u&&(u=u[l[d]])
null!=u&&m(u,t,o,c,i)}else m(e,t,o,n,i)}})
t.getComponentModule=function(e,t,o,r,n,i){e=e.split("-").map(function(e){return e[0].toUpperCase()+e.substring(1)}).join("")
var a,s=d(e,t),u=s.instance,l=s.instanceModule
r=p(u,r,o)
i&&f(u,n,o)
h(u,l,r,o)
u&&l&&(a={component:u,exports:l})
return a}
function m(e,t,o,r,a){if(function(e){var t
if("string"==typeof e){var o=e.trim()
t=0===o.indexOf("{{")&&o.lastIndexOf("}}")===o.length-2}return t}(a)&&e.bind){var s=i.getBindingOptions(r,(l=a,l.replace("{{","").replace("}}","").trim()))
e.bind({sourceProperty:s[i.bindingConstants.sourceProperty],targetProperty:s[i.bindingConstants.targetProperty],expression:s[i.bindingConstants.expression],twoWay:s[i.bindingConstants.twoWay]},s[i.bindingConstants.source])}else if(n.isEventOrGesture(r,e)){var u=o&&o[a]
"function"==typeof u&&e.on(r,u)}else(function(e,t){return t.constructor&&y in t.constructor&&-1!==t.constructor[y].indexOf(e)})(r,e)&&o&&"function"==typeof o[a]?e[r]=o[a]:e[r]=a
var l}t.setPropertyValue=m
var y="knownFunctions"
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/builder/component-builder/component-builder.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/builder/component-builder/component-builder.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/builder/module-name-sanitizer.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
t.sanitizeModuleName=function(e,t){void 0===t&&(t=!0)
e=e.trim()
e.startsWith("~/")?e=e.substring(2):e.startsWith("/")&&(e=e.substring(1))
if(t){var o=e.lastIndexOf(".")
o>0&&(e=e.substr(0,o))}return e}
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/builder/module-name-sanitizer.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/builder/module-name-sanitizer.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/button/button-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/text-base/text-base.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/text-base/text-base.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}Object.defineProperty(t.prototype,"textWrap",{get:function(){return"normal"===this.style.whiteSpace},set:function(e){"string"==typeof e&&(e=n.booleanConverter(e))
this.style.whiteSpace=e?"normal":"nowrap"},enumerable:!0,configurable:!0})
t.tapEvent="tap"
t=__decorate([n.CSSType("Button")],t)
return t}(n.TextBase)
t.ButtonBase=i
i.prototype.recycleNativeView="auto"
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/button/button-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/button/button-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/button/button.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/button/button-common.js"),i=o("../node_modules/tns-core-modules/profiling/profiling.js"),a=o("../node_modules/tns-core-modules/ui/gestures/gestures.js"),s=o("../node_modules/tns-core-modules/platform/platform.js"),u=o("../node_modules/tns-core-modules/utils/lazy.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/button/button-common.js"))
var l,c,d,p=u.default(function(){return parseInt(s.device.sdkVersion)})
var f=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
c||(c=android.os.Build.VERSION.SDK_INT)
return t}t.prototype.createNativeView=function(){d||(d=android.widget.Button)
return new d(this._context)}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
var t=this.nativeViewProtected
!function(){if(!l){var e=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}t.prototype.onClick=function(e){var t=this.owner
t&&t._emit(n.ButtonBase.tapEvent)}
t=__decorate([Interfaces([android.view.View.OnClickListener])],t)
return t}(java.lang.Object)
l=e}}()
var o=new l(this)
t.setOnClickListener(o)
t.clickListener=o}
t.prototype.disposeNativeView=function(){this.nativeViewProtected&&(this.nativeViewProtected.clickListener.owner=null)
e.prototype.disposeNativeView.call(this)}
t.prototype.resetNativeView=function(){e.prototype.resetNativeView.call(this)
if(this._stateListAnimator&&c>=21){this.nativeViewProtected.setStateListAnimator(this._stateListAnimator)
this._stateListAnimator=void 0}}
t.prototype._updateButtonStateChangeHandler=function(e){var t=this
if(e){this._highlightedHandler=this._highlightedHandler||function(e){switch(e.action){case a.TouchAction.up:case a.TouchAction.cancel:t._goToVisualState("normal")
break
case a.TouchAction.down:t._goToVisualState("highlighted")}}
this.on(a.GestureTypes.touch,this._highlightedHandler)}else this.off(a.GestureTypes.touch,this._highlightedHandler)}
t.prototype[n.paddingTopProperty.getDefault]=function(){return{value:this._defaultPaddingTop,unit:"px"}}
t.prototype[n.paddingTopProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setPaddingTop(this.nativeViewProtected,n.Length.toDevicePixels(e,0)+n.Length.toDevicePixels(this.style.borderTopWidth,0))}
t.prototype[n.paddingRightProperty.getDefault]=function(){return{value:this._defaultPaddingRight,unit:"px"}}
t.prototype[n.paddingRightProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setPaddingRight(this.nativeViewProtected,n.Length.toDevicePixels(e,0)+n.Length.toDevicePixels(this.style.borderRightWidth,0))}
t.prototype[n.paddingBottomProperty.getDefault]=function(){return{value:this._defaultPaddingBottom,unit:"px"}}
t.prototype[n.paddingBottomProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setPaddingBottom(this.nativeViewProtected,n.Length.toDevicePixels(e,0)+n.Length.toDevicePixels(this.style.borderBottomWidth,0))}
t.prototype[n.paddingLeftProperty.getDefault]=function(){return{value:this._defaultPaddingLeft,unit:"px"}}
t.prototype[n.paddingLeftProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setPaddingLeft(this.nativeViewProtected,n.Length.toDevicePixels(e,0)+n.Length.toDevicePixels(this.style.borderLeftWidth,0))}
t.prototype[n.zIndexProperty.setNative]=function(e){if(c>=21){var t=this.nativeViewProtected
this._stateListAnimator||(this._stateListAnimator=t.getStateListAnimator())
t.setStateListAnimator(null)}org.nativescript.widgets.ViewHelper.setZIndex(this.nativeViewProtected,e)}
t.prototype[n.textAlignmentProperty.setNative]=function(t){var o="initial"===t?"center":t
e.prototype[n.textAlignmentProperty.setNative].call(this,o)}
t.prototype.getDefaultElevation=function(){return p()<21?0:2}
t.prototype.getDefaultDynamicElevationOffset=function(){return p()<21?0:4}
__decorate([i.profile],t.prototype,"createNativeView",null)
__decorate([n.PseudoClassHandler("normal","highlighted","pressed","active")],t.prototype,"_updateButtonStateChangeHandler",null)
return t}(n.ButtonBase)
t.Button=f
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/button/button.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/button/button.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/content-view/content-view.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}Object.defineProperty(t.prototype,"content",{get:function(){return this._content},set:function(e){var t=this._content
this._content&&this._removeView(this._content)
this._content=e
this._content&&this._addView(this._content)
this._onContentChanged(t,e)
n.isIOS&&t!==e&&this.requestLayout()},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"layoutView",{get:function(){var e
if(this._content){var t=!0
this._content._eachLayoutView(function(o){if(!t)throw new Error("More than one layout child inside a ContentView")
t=!1
e=o})}return e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"_childrenCount",{get:function(){return this._content?1:0},enumerable:!0,configurable:!0})
t.prototype._onContentChanged=function(e,t){}
t.prototype._addChildFromBuilder=function(e,t){t instanceof n.View&&(this.content=t)}
t.prototype.eachChildView=function(e){var t=this._content
t&&e(t)}
t.prototype.onMeasure=function(e,t){var o=n.View.measureChild(this,this.layoutView,e,t),r=n.layout.getMeasureSpecSize(e),i=n.layout.getMeasureSpecMode(e),a=n.layout.getMeasureSpecSize(t),s=n.layout.getMeasureSpecMode(t),u=Math.max(o.measuredWidth,this.effectiveMinWidth),l=Math.max(o.measuredHeight,this.effectiveMinHeight),c=n.View.resolveSizeAndState(u,r,i,0),d=n.View.resolveSizeAndState(l,a,s,0)
this.setMeasuredDimension(c,d)}
t.prototype.onLayout=function(e,t,o,r){n.View.layoutChild(this,this.layoutView,0,0,o-e,r-t)}
return t}(n.CustomLayoutView)
t.ContentView=i
i.prototype.recycleNativeView="auto"
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/content-view/content-view.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/content-view/content-view.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/core/bindable/bindable.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/properties/properties.js"),i=o("../node_modules/tns-core-modules/data/observable/observable.js")
t.Observable=i.Observable
t.WrappedValue=i.WrappedValue
var a=o("../node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js"),s=o("../node_modules/tns-core-modules/ui/builder/binding-builder.js"),u=o("../node_modules/tns-core-modules/utils/utils.js"),l=o("../node_modules/tns-core-modules/trace/trace.js")
t.traceEnabled=l.isEnabled
t.traceWrite=l.write
t.traceError=l.error
t.traceCategories=l.categories
t.traceNotifyEvent=l.notifyEvent
t.isCategorySet=l.isCategorySet
t.traceMessageType=l.messageType
var c=o("../node_modules/tns-core-modules/utils/types.js"),d=o("../node_modules/tns-core-modules/application/application-common.js"),p=o("../node_modules/tns-core-modules/js-libs/polymer-expressions/polymer-expressions.js"),f=/\[\s*(['"])*(\w*)\1\s*\]/,h=s.bindingConstants,m=[],y={}
function g(e){if(!e)return m
var t=y[e]
if(t)return t
var o=e.match(s.parentsRegex)
t=e.replace(s.parentsRegex,"parentsMatch").replace(/\]/g,"").split(/\.|\[/)
for(var r=0,n=0,i=t.length;n<i;n++)"parentsMatch"===t[n]&&(t[n]=o[r++])
y[e]=t
return t}function v(e){return 0===e.indexOf("on")?e.substr(2,e.length-2):e}t.getEventOrGestureName=v
function b(e){var t=e.trim().toLowerCase()
return"tap"===t||"doubletap"===t||"pinch"===t||"pan"===t||"swipe"===t||"rotation"===t||"longpress"===t||"touch"===t}t.isGesture=b
function _(e,t){if("string"==typeof e){var o=v(e),r=o+"Event"
return t.constructor&&r in t.constructor||b(o.toLowerCase())}return!1}t.isEventOrGesture=_
var w=function(){function e(e,t){this.propertyChangeListeners=new Map
this.target=new WeakRef(e)
this.options=t
this.sourceProperties=g(t.sourceProperty)
this.targetOptions=this.resolveOptions(e,g(t.targetProperty))
if(!this.targetOptions)throw new Error("Invalid property: "+t.targetProperty+" for target: "+e)
if(t.twoWay){var o=this.targetOptions.instance.get()
o instanceof i.Observable&&o.on(this.targetOptions.property+"Change",this.onTargetPropertyChanged,this)}}e.prototype.onTargetPropertyChanged=function(e){this.updateTwoWay(e.value)}
e.prototype.loadedHandlerVisualTreeBinding=function(e){var t=e.object
t.off("loaded",this.loadedHandlerVisualTreeBinding,this)
var o=t.bindingContext
null!=o&&this.update(o)}
e.prototype.clearSource=function(){var e=this
this.propertyChangeListeners.forEach(function(t,o,r){a.removeWeakEventListener(t,i.Observable.propertyChangeEvent,e.onSourcePropertyChanged,e)})
this.propertyChangeListeners.clear()
this.source&&this.source.clear()
if(this.sourceOptions){this.sourceOptions.instance.clear()
this.sourceOptions=void 0}}
e.prototype.sourceAsObject=function(e){var t=typeof e
"number"===t?e=new Number(e):"boolean"===t?e=new Boolean(e):"string"===t&&(e=new String(e))
return e}
e.prototype.bindingContextChanged=function(e){var t=this.targetOptions.instance.get()
if(t){var o=e.value
null!=o?this.update(o):this.clearBinding()}else this.unbind()}
e.prototype.bind=function(e){var t=this.targetOptions.instance.get()
this.sourceIsBindingContext&&t instanceof i.Observable&&"bindingContext"!==this.targetOptions.property&&t.on("bindingContextChange",this.bindingContextChanged,this)
this.update(e)}
e.prototype.update=function(e){this.clearSource()
e=this.sourceAsObject(e)
if(c.isNullOrUndefined(e)){if(!this.sourceIsBindingContext){t=this.getSourcePropertyValue()
this.updateTarget(t||e)}}else{this.source=new WeakRef(e)
this.sourceOptions=this.resolveOptions(e,this.sourceProperties)
var t=this.getSourcePropertyValue()
this.updateTarget(t)
this.addPropertyChangeListeners(this.source,this.sourceProperties)}}
e.prototype.unbind=function(){var e=this.targetOptions.instance.get()
if(e instanceof i.Observable){this.options.twoWay&&e.off(this.targetOptions.property+"Change",this.onTargetPropertyChanged,this)
this.sourceIsBindingContext&&"bindingContext"!==this.targetOptions.property&&e.off("bindingContextChange",this.bindingContextChanged,this)}this.targetOptions&&(this.targetOptions=void 0)
this.sourceProperties=void 0
this.source&&this.clearSource()}
e.prototype.resolveObjectsAndProperties=function(e,t){for(var o=[],r=e,n=!1,i=0,a=t.length;i<a;i++){var s=t[i]
s===h.bindingValueKey&&(n=!0)
if(s===h.parentValueKey||0===s.indexOf(h.parentsValueKey)){var u=this.getParentView(this.target.get(),s).view
if(u)r=u.bindingContext
else{var l=this.target.get()
l.off("loaded",this.loadedHandlerVisualTreeBinding,this)
l.on("loaded",this.loadedHandlerVisualTreeBinding,this)}n=!0}if(!r)break
o.push({instance:r,property:s})
!n&&i<a-1&&(r=r?r[t[i]]:null)
n=!1}return o}
e.prototype.addPropertyChangeListeners=function(e,t,o){for(var r=this.resolveObjectsAndProperties(e.get(),t),n=o||"",s=0,u=r.length;s<u;s++){var l=r[s].property
n+="$"+l
var c=r[s].instance
if(!this.propertyChangeListeners.has(n)&&c instanceof i.Observable&&c._isViewBase){a.addWeakEventListener(c,l+"Change",this.onSourcePropertyChanged,this)
a.addWeakEventListener(c,i.Observable.propertyChangeEvent,this.onSourcePropertyChanged,this)
this.propertyChangeListeners.set(n,c)}else if(!this.propertyChangeListeners.has(n)&&c instanceof i.Observable){a.addWeakEventListener(c,i.Observable.propertyChangeEvent,this.onSourcePropertyChanged,this)
this.propertyChangeListeners.set(n,c)}}}
e.prototype.prepareExpressionForUpdate=function(){var e=u.escapeRegexSymbols(this.options.sourceProperty),t=new RegExp(e,"g"),o=this.options.expression.replace(t,h.newPropertyValueKey)
return o}
e.prototype.updateTwoWay=function(e){if(!this.updating&&this.options.twoWay){var t=e
if(this.options.expression){var o={}
o[h.bindingValueKey]=e
o[h.newPropertyValueKey]=e
var r=""
this.sourceOptions?r=this.sourceOptions.property:"string"==typeof this.options.sourceProperty&&-1===this.options.sourceProperty.indexOf(".")&&(r=this.options.sourceProperty)
""!==r&&(o[r]=e)
var n=this.prepareExpressionForUpdate()
this.prepareContextForExpression(o,n,void 0)
var i=this._getExpressionValue(n,!0,o)
i instanceof Error&&l.write(i.message,l.categories.Binding,l.messageType.error)
t=i}this.updateSource(t)}}
e.prototype._getExpressionValue=function(e,t,o){try{var n=p.PolymerExpressions.getExpression(e)
if(n){var i=this.source&&this.source.get&&this.source.get()||r,a={},s=[],u=d.getResources()
for(var l in u)if(u.hasOwnProperty(l)&&!i.hasOwnProperty(l)){i[l]=u[l]
s.push(l)}this.prepareContextForExpression(i,e,s)
a.context=i
for(var c=n.getValue(a,t,o||a),f=s.length,h=0;h<f;h++)delete i[s[h]]
s.length=0
return c}return new Error(e+" is not a valid expression.")}catch(e){var m="Run-time error occured in file: "+e.sourceURL+" at line: "+e.line+" and column: "+e.column
return new Error(m)}}
e.prototype.onSourcePropertyChanged=function(e){var t=this.sourceProperties,o=t.length,r=t.indexOf(e.propertyName),n=""
if(r>-1){n="$"+t.slice(0,r+1).join("$")
for(;this.propertyChangeListeners.get(n)!==e.object;){r+=t.slice(r+1).indexOf(e.propertyName)+1
n="$"+t.slice(0,r+1).join("$")}}if(this.options.expression){var s=this._getExpressionValue(this.options.expression,!1,void 0)
s instanceof Error?l.write(s.message,l.categories.Binding,l.messageType.error):this.updateTarget(s)}else if(r>-1){var u=t.slice(r+1),d=u.length
if(d>0){for(var p=e.value,f=0;f<d;f++)p=p[u[f]]
this.updateTarget(p)}else e.propertyName===this.sourceOptions.property&&this.updateTarget(e.value)}if(r>-1&&r<o-1){var h=this.propertyChangeListeners.get(n)
if(h&&h!==e.object[t[r]]){for(f=o-1;f>r;f--){var m="$"+t.slice(0,f+1).join("$")
if(this.propertyChangeListeners.has(m)){a.removeWeakEventListener(this.propertyChangeListeners.get(m),i.Observable.propertyChangeEvent,this.onSourcePropertyChanged,this)
this.propertyChangeListeners.delete(m)}}var y=t.slice(r+1),g=e.object[t[r]]
c.isNullOrUndefined(g)||"object"!=typeof g||this.addPropertyChangeListeners(new WeakRef(g),y,n)}}}
e.prototype.prepareContextForExpression=function(e,t,o){var r,n,i=o||[]
if(t.indexOf(h.bindingValueKey)>-1){e[h.bindingValueKey]=e
i.push(h.bindingValueKey)}if(t.indexOf(h.parentValueKey)>-1){n=this.getParentView(this.target.get(),h.parentValueKey).view
if(n){e[h.parentValueKey]=n.bindingContext
i.push(h.parentValueKey)}}var a=t.match(s.parentsRegex)
if(a)for(var u=0;u<a.length;u++){r=this.getParentView(this.target.get(),a[u])
if(r.view){e[h.parentsValueKey]=e[h.parentsValueKey]||{}
e[h.parentsValueKey][r.index]=r.view.bindingContext
i.push(h.parentsValueKey)}}}
e.prototype.getSourcePropertyValue=function(){if(this.options.expression){var e={}
e[h.bindingValueKey]=this.source?this.source.get():void 0
var t=this._getExpressionValue(this.options.expression,!1,e)
if(!(t instanceof Error))return t
l.write(t.message,l.categories.Binding,l.messageType.error)}if(this.sourceOptions){var o=this.sourceOptions.instance.get()
if(this.sourceOptions.property===h.bindingValueKey)return o
if(o instanceof i.Observable&&this.sourceOptions.property&&""!==this.sourceOptions.property)return o.get(this.sourceOptions.property)
if(o&&this.sourceOptions.property&&""!==this.sourceOptions.property&&this.sourceOptions.property in o)return o[this.sourceOptions.property]
l.write("Property: '"+this.sourceOptions.property+"' is invalid or does not exist. SourceProperty: '"+this.options.sourceProperty+"'",l.categories.Binding,l.messageType.error)}return null}
e.prototype.clearBinding=function(){this.clearSource()
this.updateTarget(n.unsetValue)}
e.prototype.updateTarget=function(e){this.updating||this.updateOptions(this.targetOptions,c.isNullOrUndefined(e)?n.unsetValue:e)}
e.prototype.updateSource=function(e){!this.updating&&this.source&&this.source.get()&&this.updateOptions(this.sourceOptions,e)}
e.prototype.getParentView=function(e,t){if(!e)return{view:null,index:null}
var o
t===h.parentValueKey&&(o=e.parent)
var r=null
if(0===t.indexOf(h.parentsValueKey)){o=e.parent
var n=f.exec(t)
n&&n.length>1&&(r=n[2])
if(isNaN(r)){if(c.isString(r))for(;o&&o.typeName!==r;)o=o.parent}else for(var i=parseInt(r);i>0;){o=o.parent
i--}}return{view:o,index:r}}
e.prototype.resolveOptions=function(e,t){var o=this.resolveObjectsAndProperties(e,t)
if(o.length>0){var r=o[o.length-1].instance,n=o[o.length-1].property
return{instance:new WeakRef(this.sourceAsObject(r)),property:n}}return null}
e.prototype.updateOptions=function(e,t){var o
e&&e.instance&&(o=e.instance.get())
if(o){this.updating=!0
try{if(_(e.property,o)&&c.isFunction(t)){o.off(e.property,null,o.bindingContext)
o.on(e.property,t,o.bindingContext)}else o instanceof i.Observable?o.set(e.property,t):o[e.property]=t}catch(t){l.write("Binding error while setting property "+e.property+" of "+o+": "+t,l.categories.Binding,l.messageType.error)}this.updating=!1}}
return e}()
t.Binding=w
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/core/bindable/bindable.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/core/bindable/bindable.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/core/properties/properties.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/data/observable/observable.js"),i=o("../node_modules/tns-core-modules/trace/trace.js"),a=o("../node_modules/tns-core-modules/ui/styling/style/style.js")
t.Style=a.Style
var s=o("../node_modules/tns-core-modules/profiling/profiling.js")
t.unsetValue=new Object
var u=[],l={},c={},d=new Array,p=new Array
function f(e){for(var t=Object.getOwnPropertySymbols(e),o=0,r=t;o<r.length;o++){var n=r[o],i=e[n]
i.registered||console.log("Property "+i.name+" not Registered!!!!!")}}t._printUnregisteredProperties=function(){f(l)
f(c)}
t._getProperties=function(){return h(l)}
t._getStyleProperties=function(){return h(c)}
function h(e){var t=[]
Object.getOwnPropertySymbols(e).forEach(function(o){return t.push(e[o])})
return t}var m=function(){function e(e){this.enumerable=!0
this.configurable=!0
var o=e.name
this.name=o
var r=Symbol(o+":propertyKey")
this.key=r
var i=Symbol(o+":getDefault")
this.getDefault=i
var a=Symbol(o+":setNative")
this.setNative=a
var s=Symbol(o+":nativeDefaultValue")
this.defaultValueKey=s
var u=e.defaultValue
this.defaultValue=u
var c=o+"Change",d=e.equalityComparer,p=e.affectsLayout,f=e.valueChanged,h=e.valueConverter,m=this
this.set=function(e){var l,y,g=e===t.unsetValue
if(g)l=u
else{y=e&&e.wrapped
l=y?n.WrappedValue.unwrap(e):e
h&&"string"==typeof l&&(l=h(l))}var v=r in this?this[r]:u,b=d?!d(v,l):v!==l
if(y||b){p&&this.requestLayout()
if(g){delete this[r]
f&&f(this,v,l)
if(this[a])if(this._suspendNativeUpdatesCount)this._suspendedUpdates&&(this._suspendedUpdates[o]=m)
else if(s in this){this[a](this[s])
delete this[s]}else this[a](u)}else{this[r]=l
f&&f(this,v,l)
if(this[a])if(this._suspendNativeUpdatesCount)this._suspendedUpdates&&(this._suspendedUpdates[o]=m)
else{s in this||(this[s]=this[i]?this[i]():u)
this[a](l)}}this.hasListeners(c)&&this.notify({object:this,eventName:c,propertyName:o,value:l,oldValue:v})
this.domNode&&(g?this.domNode.attributeRemoved(o):this.domNode.attributeModified(o,l))}}
this.get=function(){return r in this?this[r]:u}
this.nativeValueChange=function(e,t){var n=r in e?e[r]:u,a=d?!d(n,t):n!==t
if(a){e[r]=t
f&&f(e,n,t)
!e.nativeViewProtected||s in e||(e[s]=e[i]?e[i]():u)
e.hasListeners(c)&&e.notify({object:e,eventName:c,propertyName:o,value:t,oldValue:n})
p&&e.requestLayout()
e.domNode&&e.domNode.attributeModified(o,t)}}
l[r]=this}e.prototype.register=function(e){if(this.registered)throw new Error("Property "+this.name+" already registered.")
this.registered=!0
Object.defineProperty(e.prototype,this.name,this)}
e.prototype.isSet=function(e){return this.key in e}
return e}()
t.Property=m
m.prototype.isStyleProperty=!1
var y=function(e){__extends(o,e)
function o(o){var r=e.call(this,o)||this,i=o.name,a=r.key,s=r.getDefault,u=r.setNative,l=r.defaultValueKey,c=r.defaultValue,d=Symbol(i+":coerceKey"),p=i+"Change",f=o.affectsLayout,h=o.equalityComparer,m=o.valueChanged,y=o.valueConverter,g=o.coerceValue,v=r
r.coerce=function(e){var t=d in e?e[d]:c
e[i]=t}
r.set=function(e){var o,r,b=e===t.unsetValue
if(b){o=c
delete this[d]}else{r=e&&e.wrapped
o=r?n.WrappedValue.unwrap(e):e
y&&"string"==typeof o&&(o=y(o))
this[d]=o
o=g(this,o)}var _=a in this?this[a]:c,w=h?!h(_,o):_!==o
if(r||w){if(b){delete this[a]
m&&m(this,_,o)
if(this[u])if(this._suspendNativeUpdatesCount)this._suspendedUpdates&&(this._suspendedUpdates[i]=v)
else if(l in this){this[u](this[l])
delete this[l]}else this[u](c)}else{this[a]=o
m&&m(this,_,o)
if(this[u])if(this._suspendNativeUpdatesCount)this._suspendedUpdates&&(this._suspendedUpdates[i]=v)
else{l in this||(this[l]=this[s]?this[s]():c)
this[u](o)}}this.hasListeners(p)&&this.notify({object:this,eventName:p,propertyName:i,value:o,oldValue:_})
f&&this.requestLayout()
this.domNode&&(b?this.domNode.attributeRemoved(i):this.domNode.attributeModified(i,o))}}
return r}return o}(m)
t.CoercibleProperty=y
var g=function(e){__extends(o,e)
function o(o){var r=e.call(this,o)||this,n=o.name,i=r.key,a=o.defaultValue,s=Symbol(n+":valueSourceKey")
r.sourceKey=s
var u=r.set,l=function(e){return function(o){var r,d
if(o===t.unsetValue){var p=this.parent
if(p&&0!==p[s]){r=p[n]
d=1}else{r=a
d=0}}else{r=o
d=e}var f=this[i]
u.call(this,r)
var h=this[i]
this[s]=d
if(f!==h){var m=0===d
this.eachChild(function(e){var o=e[s]||0
m?1===o&&l.call(e,t.unsetValue):o<=1&&c.call(e,h)
return!0})}}},c=l(1)
r.setInheritedValue=c
r.set=l(3)
d.push(r)
return r}return o}(m)
t.InheritedProperty=g
var v=function(){function e(e){var o=e.name
this.name=o
u.push(e.cssName)
this.cssName="css:"+e.cssName
this.cssLocalName=e.cssName
var r=Symbol(o+":propertyKey")
this.key=r
var n=Symbol(o+":valueSourceKey")
this.sourceKey=n
var a=Symbol(o+":getDefault")
this.getDefault=a
var s=Symbol(o+":setNative")
this.setNative=s
var l=Symbol(o+":nativeDefaultValue")
this.defaultValueKey=l
var d=e.defaultValue
this.defaultValue=d
var p=o+"Change",f=e.affectsLayout,h=e.equalityComparer,m=e.valueChanged,y=e.valueConverter,g=this
function v(){return r in this?this[r]:d}this.cssValueDescriptor={enumerable:!0,configurable:!0,get:v,set:function(e){var u=this.viewRef.get()
if(u){var c=this[n]||0
if(3!==c){var v,b=e===t.unsetValue||""===e
if(b){v=d
delete this[n]}else{v=y&&"string"==typeof e?y(e):e
this[n]=2}var _=r in this?this[r]:d,w=h?!h(_,v):_!==v
if(w){if(b){delete this[r]
m&&m(this,_,v)
if(u[s])if(u._suspendNativeUpdatesCount)u._suspendedUpdates&&(u._suspendedUpdates[o]=g)
else if(l in this){u[s](this[l])
delete this[l]}else u[s](d)}else{this[r]=v
m&&m(this,_,v)
if(u[s])if(u._suspendNativeUpdatesCount)u._suspendedUpdates&&(u._suspendedUpdates[o]=g)
else{l in this||(this[l]=u[a]?u[a]():d)
u[s](v)}}this.hasListeners(p)&&this.notify({object:this,eventName:p,propertyName:o,value:v,oldValue:_})
f&&u.requestLayout()}}}else i.write(e+' not set to view because ".viewRef" is cleared',i.categories.Style,i.messageType.warn)}}
this.localValueDescriptor={enumerable:!0,configurable:!0,get:v,set:function(e){var u=this.viewRef.get()
if(u){var c,v=e===t.unsetValue||""===e
if(v){c=d
delete this[n]}else{this[n]=3
c=y&&"string"==typeof e?y(e):e}var b=r in this?this[r]:d,_=h?!h(b,c):b!==c
if(_){if(v){delete this[r]
m&&m(this,b,c)
if(u[s])if(u._suspendNativeUpdatesCount)u._suspendedUpdates&&(u._suspendedUpdates[o]=g)
else if(l in this){u[s](this[l])
delete this[l]}else u[s](d)}else{this[r]=c
m&&m(this,b,c)
if(u[s])if(u._suspendNativeUpdatesCount)u._suspendedUpdates&&(u._suspendedUpdates[o]=g)
else{l in this||(this[l]=u[a]?u[a]():d)
u[s](c)}}this.hasListeners(p)&&this.notify({object:this,eventName:p,propertyName:o,value:c,oldValue:b})
f&&u.requestLayout()}}else i.write(e+' not set to view because ".viewRef" is cleared',i.categories.Style,i.messageType.warn)}}
c[r]=this}e.prototype.register=function(e){if(this.registered)throw new Error("Property "+this.name+" already registered.")
this.registered=!0
Object.defineProperty(e.prototype,this.name,this.localValueDescriptor)
Object.defineProperty(e.prototype,this.cssName,this.cssValueDescriptor)
this.cssLocalName!==this.cssName&&Object.defineProperty(e.prototype,this.cssLocalName,this.localValueDescriptor)}
e.prototype.isSet=function(e){return this.key in e}
return e}()
t.CssProperty=v
v.prototype.isStyleProperty=!0
var b=function(){function e(o){var r=o.valueConverter,n=o.equalityComparer,a=o.valueChanged,s=o.defaultValue,d=o.name
this.name=d
u.push(o.cssName)
e.properties[d]=this
o.cssName&&o.cssName!==d&&(e.properties[o.cssName]=this)
this._valueConverter=o.valueConverter
var p=o.cssName||d
this.cssLocalName=p
var f="css:"+p
this.cssName=f
var h="keyframe:"+d
this.keyframe=h
var m="default:"+d,y=Symbol(m)
this.defaultValueKey=y
this.defaultValue=s
var g=Symbol(f),v=Symbol("local:"+d),b=Symbol(h),_=Symbol("computed-value:"+d)
this.key=_
var w=Symbol("computed-source:"+d)
this.source=w
this.getDefault=Symbol(d+":getDefault")
var P=this.getDefault,C=this.setNative=Symbol(d+":setNative"),S=d+"Change",T=this
function x(e,o,u,l,c){return{enumerable:u,configurable:l,get:c?function(){return this[_]}:function(){return this[e]},set:function(u){var l=this.viewRef.get()
if(l){var c=this[_],p=this[w],f=0!==p,h=u===t.unsetValue||""===u
if(h){this[e]=t.unsetValue
if(this[w]===o)if(this[v]!==t.unsetValue){this[w]=3
this[_]=this[v]}else if(this[g]!==t.unsetValue){this[w]=2
this[_]=this[g]}else{delete this[w]
delete this[_]}}else{r&&"string"==typeof u&&(u=r(u))
this[e]=u
if(this[w]<=o){this[w]=o
this[_]=u}}var m=this[_],b=this[w],x=0!==b,I=!(c===m||n&&n(c,m))
I&&a&&a(this,c,m)
if(l[C]&&(I||x!==f))if(l._suspendNativeUpdatesCount)l._suspendedUpdates&&(l._suspendedUpdates[d]=T)
else if(x){f||y in this||(this[y]=l[P]?l[P]():s)
l[C](m)}else f&&(y in this?l[C](this[y]):l[C](s))
I&&this.hasListeners(S)&&this.notify({object:this,eventName:S,propertyName:d,value:m,oldValue:c})}else i.write(u+' not set to view because ".viewRef" is cleared',i.categories.Animation,i.messageType.warn)}}}var I=x(y,0,!1,!1,!1),j=x(g,2,!1,!1,!1),L=x(v,3,!0,!0,!0),E=x(b,4,!1,!1,!1)
l[_]=this
c[_]=this
this.register=function(e){e.prototype[_]=o.defaultValue
e.prototype[w]=0
e.prototype[g]=t.unsetValue
e.prototype[v]=t.unsetValue
e.prototype[b]=t.unsetValue
Object.defineProperty(e.prototype,m,I)
Object.defineProperty(e.prototype,f,j)
Object.defineProperty(e.prototype,d,L)
o.cssName&&o.cssName!==o.name&&Object.defineProperty(e.prototype,o.cssName,L)
Object.defineProperty(e.prototype,h,E)}}e.prototype._initDefaultNativeValue=function(e){var t=e.viewRef.get()
if(t){var o=this.defaultValueKey
if(!(o in e)){var r=this.getDefault
e[o]=t[r]?t[r]():this.defaultValue}}else i.write('_initDefaultNativeValue not executed to view because ".viewRef" is cleared',i.categories.Animation,i.messageType.warn)}
e._getByCssName=function(e){return this.properties[e]}
e._getPropertyNames=function(){return Object.keys(e.properties)}
e.prototype.isSet=function(e){return 0!==e[this.source]}
e.properties={}
return e}()
t.CssAnimationProperty=b
b.prototype.isStyleProperty=!0
var _=function(e){__extends(o,e)
function o(o){var r=e.call(this,o)||this,n=o.name,a=r.key,s=r.sourceKey,u=r.getDefault,l=r.setNative,c=r.defaultValueKey,d=n+"Change",f=o.defaultValue,h=o.affectsLayout,m=o.equalityComparer,y=o.valueChanged,g=o.valueConverter,v=r,b=function(e){return function(o){var r=this.viewRef.get()
if(r){var p=o===t.unsetValue||""===o,b=this[s]||0
if(p){if(2===e&&3===b)return}else if(b>e)return
var P,C=a in this?this[a]:f,S=!1
if(p){var T=r.parent,x=T?T.style:null
if(x&&x[s]>0){P=x[n]
this[s]=1
this[a]=P}else{P=f
delete this[s]
delete this[a]
S=!0}}else{this[s]=e
P=g&&"string"==typeof o?g(o):o
this[a]=P}var I=m?!m(C,P):C!==P
if(I){y&&y(this,C,P)
if(r[l])if(r._suspendNativeUpdatesCount)r._suspendedUpdates&&(r._suspendedUpdates[n]=v)
else if(S)if(c in this){r[l](this[c])
delete this[c]}else r[l](f)
else{c in this||(this[c]=r[u]?r[u]():f)
r[l](P)}this.hasListeners(d)&&this.notify({object:this,eventName:d,propertyName:n,value:P,oldValue:C})
h&&r.requestLayout()
r.eachChild(function(e){var o=e.style,r=o[s]||0
p?1===r&&_.call(o,t.unsetValue):r<=1&&w.call(o,P)
return!0})}}else i.write(o+' not set to view\'s property because ".viewRef" is cleared',i.categories.Style,i.messageType.warn)}},_=b(0),w=b(1)
r.setInheritedValue=w
r.cssValueDescriptor.set=b(2)
r.localValueDescriptor.set=b(3)
p.push(r)
return r}return o}(v)
t.InheritedCssProperty=_
var w=function(){function e(e){this.name=e.name
var t=Symbol(this.name+":propertyKey")
this.key=t
this.cssName="css:"+e.cssName
this.cssLocalName=""+e.cssName
var o=e.converter
this.cssValueDescriptor={enumerable:!0,configurable:!0,get:e.getter,set:function(e){var t=this,r=this.viewRef.get()
r?r._batchUpdate(function(){for(var r=0,n=o(e);r<n.length;r++){var i=n[r],a=i[0],s=i[1]
t[a.cssName]=s}}):i.write('setCssValue not executed to view because ".viewRef" is cleared',i.categories.Animation,i.messageType.warn)}}
this.localValueDescriptor={enumerable:!0,configurable:!0,get:e.getter,set:function(e){var t=this,r=this.viewRef.get()
r?r._batchUpdate(function(){for(var r=0,n=o(e);r<n.length;r++){var i=n[r],a=i[0],s=i[1]
t[a.name]=s}}):i.write('setLocalValue not executed to view because ".viewRef" is cleared',i.categories.Animation,i.messageType.warn)}}
this.propertyBagDescriptor={enumerable:!1,configurable:!0,set:function(e){var t=this
o(e).forEach(function(e){var o=e[0],r=e[1]
t[o.cssLocalName]=r})}}
c[t]=this}e.prototype.register=function(e){if(this.registered)throw new Error("Property "+this.name+" already registered.")
this.registered=!0
Object.defineProperty(e.prototype,this.name,this.localValueDescriptor)
Object.defineProperty(e.prototype,this.cssName,this.cssValueDescriptor)
this.cssLocalName!==this.cssName&&Object.defineProperty(e.prototype,this.cssLocalName,this.localValueDescriptor)
Object.defineProperty(e.prototype.PropertyBag,this.cssLocalName,this.propertyBagDescriptor)}
return e}()
t.ShorthandProperty=w
t.initNativeView=s.profile('"properties".initNativeView',function(e){e._suspendedUpdates?P(e):C(e)
e._suspendedUpdates={}})
function P(e){var t=e._suspendedUpdates
for(var o in t){var r=t[o],n=r.setNative
if(e[n]){var i=r.getDefault,a=r.isStyleProperty,s=r.defaultValueKey,u=r.defaultValue,l=void 0
if(a){var c=e.style
if(r.isSet(e.style)){s in c||(c[s]=e[i]?e[i]():u)
l=e.style[o]}else l=c[s]}else if(r.isSet(e)){s in e||(e[s]=e[i]?e[i]():u)
l=e[o]}else l=e[s]
e[n](l)}}}t.applyPendingNativeSetters=P
function C(e){for(var t=Object.getOwnPropertySymbols(e),o=0,r=t;o<r.length;o++){var n=r[o],i=l[n]
if(i){var a=i.setNative,s=i.getDefault
if(a in e){var u=i.defaultValueKey
u in e||(e[u]=e[s]?e[s]():i.defaultValue)
var d=e[n]
e[a](d)}}}var p=e.style
t=Object.getOwnPropertySymbols(p)
for(var f=0,h=t;f<h.length;f++){n=h[f],i=c[n]
if(i&&e[i.setNative]){u=i.defaultValueKey
u in p||(p[u]=e[i.getDefault]?e[i.getDefault]():i.defaultValue)
d=p[n]
e[i.setNative](d)}}}t.applyAllNativeSetters=C
t.resetNativeView=function(e){for(var t=Object.getOwnPropertySymbols(e),o=0,r=t;o<r.length;o++){var n=r[o],i=l[n]
if(i&&e[i.setNative])if(i.defaultValueKey in e){e[i.setNative](e[i.defaultValueKey])
delete e[i.defaultValueKey]}else e[i.setNative](i.defaultValue)}var a=e.style
t=Object.getOwnPropertySymbols(a)
for(var s=0,u=t;s<u.length;s++){n=u[s],i=c[n]
if(i&&e[i.setNative])if(i.defaultValueKey in a){e[i.setNative](a[i.defaultValueKey])
delete a[i.defaultValueKey]}else e[i.setNative](i.defaultValue)}}
t.clearInheritedProperties=function(e){for(var o=0,r=d;o<r.length;o++){var n=r[o],i=n.sourceKey
1===e[i]&&n.set.call(e,t.unsetValue)}for(var a=e.style,s=0,u=p;s<u.length;s++){n=u[s],i=n.sourceKey
1===a[i]&&n.setInheritedValue.call(a,t.unsetValue)}}
t.resetCSSProperties=function(e){for(var o=Object.getOwnPropertySymbols(e),r=0,n=o;r<n.length;r++){var i,a=n[r]
if(i=c[a]){e[i.cssName]=t.unsetValue
i instanceof b&&(e[i.keyframe]=t.unsetValue)}}}
t.propagateInheritableProperties=function(e,t){for(var o=function(e){for(var t=new Array,o=0,r=d;o<r.length;o++){var n=r[o],i=n.sourceKey,a=e[i]||0
0!==a&&t.push({property:n,value:e[n.name]})}return t}(e),r=0,n=o;r<n.length;r++){var i=n[r],a=i.property,s=a.sourceKey,u=t[s]||0
u<=1&&a.setInheritedValue.call(t,i.value)}}
t.propagateInheritableCssProperties=function(e,t){for(var o=function(e){for(var t=new Array,o=0,r=p;o<r.length;o++){var n=r[o],i=n.sourceKey,a=e[i]||0
0!==a&&t.push({property:n,value:e[n.name]})}return t}(e),r=0,n=o;r<n.length;r++){var i=n[r],a=i.property,s=a.sourceKey,u=t[s]||0
u<=1&&a.setInheritedValue.call(t,i.value,1)}}
t.makeValidator=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]
var o=new Set(e)
return function(e){return o.has(e)}}
t.makeParser=function(e){return function(t){var o=t&&t.toLowerCase()
if(e(o))return o
throw new Error("Invalid value: "+t)}}
t.getSetProperties=function(e){var t=[]
Object.getOwnPropertyNames(e).forEach(function(o){t.push([o,e[o]])})
for(var o=Object.getOwnPropertySymbols(e),r=0,n=o;r<n.length;r++){var i=n[r],a=l[i]
if(a){var s=e[a.key]
t.push([a.name,s])}}return t}
t.getComputedCssValues=function(e){for(var t=[],o=e.style,r=0,n=u;r<n.length;r++){var i=n[r]
t.push([i,o[i]])}t.push(["top","auto"])
t.push(["left","auto"])
t.push(["bottom","auto"])
t.push(["right","auto"])
return t}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/core/properties/properties.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/core/properties/properties.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/core/view-base/view-base.js":function(e,t,o){(function(r){function n(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}Object.defineProperty(t,"__esModule",{value:!0})
var i=o("../node_modules/tns-core-modules/ui/core/properties/properties.js"),a=o("../node_modules/tns-core-modules/utils/debug.js"),s=o("../node_modules/tns-core-modules/ui/core/bindable/bindable.js"),u=o("../node_modules/tns-core-modules/platform/platform.js")
t.isIOS=u.isIOS
t.isAndroid=u.isAndroid
var l=o("../node_modules/tns-core-modules/utils/utils.js")
t.layout=l.layout
var c=o("../node_modules/tns-core-modules/ui/styling/style-properties.js"),d=o("../node_modules/tns-core-modules/utils/types.js"),p=o("../node_modules/tns-core-modules/color/color.js")
t.Color=p.Color
var f=o("../node_modules/tns-core-modules/profiling/profiling.js")
n(o("../node_modules/tns-core-modules/ui/core/bindable/bindable.js"))
n(o("../node_modules/tns-core-modules/ui/core/properties/properties.js"))
var h,m,y=o("../node_modules/tns-core-modules/ui/styling/style-scope.js")
var g={}
t.getAncestor=function(e,t){var o=null
o="string"==typeof t?function(e){return e.typeName===t}:function(e){return e instanceof t}
for(var r=e.parent;null!=r;r=r.parent)if(o(r))return r
return null}
function v(e,t){if(e){if(e.id===t)return e
var o
b(e,function(e){if(e.id===t){o=e
return!1}return!0})
return o}}t.getViewById=v
function b(e,t){if(t&&e){var o,r=function(e){o=t(e)
o&&e.eachChild(r)
return o}
e.eachChild(r)}}t.eachDescendant=b
var _,w,P=1
!function(e){e.superOnLoadedCalled="Loaded"
e.superOnUnloadedCalled="Unloaded"}(_||(_={}))
!function(e){e[e.Incremental=0]="Incremental"
e[e.Loaded=1048576]="Loaded"
e[e.NativeView=2097152]="NativeView"
e[e.UISetup=4194304]="UISetup"
e[e.IncrementalCountMask=-7340033]="IncrementalCountMask"}(w||(w={}))
!function(e){e.toString=function(t){return(t?"suspended":"resumed")+"(Incremental: "+(t&e.IncrementalCountMask)+", Loaded: "+!(t&e.Loaded)+", NativeView: "+!(t&e.NativeView)+", UISetup: "+!(t&e.UISetup)+")"}}(w||(w={}))
var C=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
t._onLoadedCalled=!1
t._onUnloadedCalled=!1
t._cssState=new y.CssState(new WeakRef(t))
t.pseudoClassAliases={highlighted:["active","pressed"]}
t.cssClasses=new Set
t.cssPseudoClasses=new Set
t._domId=P++
t._style=new i.Style(new WeakRef(t))
return t}Object.defineProperty(t.prototype,"parentNode",{get:function(){return this._templateParent||this.parent},set:function(e){this._templateParent=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"nativeView",{get:function(){return this.nativeViewProtected},set:function(e){this.setNativeView(e)},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"typeName",{get:function(){return d.getClass(this)},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"style",{get:function(){return this._style},set:function(e){if("string"!=typeof e)throw new Error("View.style property is read-only.")
this.setInlineStyle(e)},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"android",{get:function(){return this._androidView},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"ios",{get:function(){return this._iosView},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"isLoaded",{get:function(){return this._isLoaded},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"class",{get:function(){return this.className},set:function(e){this.className=e},enumerable:!0,configurable:!0})
t.prototype.getViewById=function(e){return v(this,e)}
Object.defineProperty(t.prototype,"page",{get:function(){return this.parent?this.parent.page:null},enumerable:!0,configurable:!0})
t.prototype.ensureDomNode=function(){if(!this.domNode){h||(h=o("../node_modules/tns-core-modules/debugger/dom-node.js"))
this.domNode=new h.DOMNode(this)}}
t.prototype.set=function(e,t){this[e]=s.WrappedValue.unwrap(t)}
t.prototype.onLoaded=function(){var e=this
this.setFlag(_.superOnLoadedCalled,!0)
if(!this._isLoaded){this._isLoaded=!0
this._cssState.onLoaded()
this._resumeNativeUpdates(w.Loaded)
this.eachChild(function(t){e.loadView(t)
return!0})
this._emit("loaded")}}
t.prototype.onUnloaded=function(){var e=this
this.setFlag(_.superOnUnloadedCalled,!0)
if(this._isLoaded){this._suspendNativeUpdates(w.Loaded)
this.eachChild(function(t){e.unloadView(t)
return!0})
this._isLoaded=!1
this._cssState.onUnloaded()
this._emit("unloaded")}}
t.prototype._suspendNativeUpdates=function(e){e?this._suspendNativeUpdatesCount=this._suspendNativeUpdatesCount|e:this._suspendNativeUpdatesCount++}
t.prototype._resumeNativeUpdates=function(e){if(e)this._suspendNativeUpdatesCount=this._suspendNativeUpdatesCount&~e
else{if(0==(this._suspendNativeUpdatesCount&w.IncrementalCountMask))throw new Error("Invalid call to "+this+"._resumeNativeUpdates")
this._suspendNativeUpdatesCount--}this._suspendNativeUpdatesCount||this.onResumeNativeUpdates()}
t.prototype._batchUpdate=function(e){try{this._suspendNativeUpdates(w.Incremental)
return e()}finally{this._resumeNativeUpdates(w.Incremental)}}
t.prototype.setFlag=function(e,t){switch(e){case _.superOnLoadedCalled:this._onLoadedCalled=t
break
case _.superOnUnloadedCalled:this._onUnloadedCalled=t}}
t.prototype.isFlagSet=function(e){switch(e){case _.superOnLoadedCalled:return this._onLoadedCalled
case _.superOnUnloadedCalled:return this._onUnloadedCalled}}
t.prototype.callFunctionWithSuper=function(e,t){this.setFlag(e,!1)
t()
if(!this.isFlagSet(e))throw new Error("super."+e+" not called in "+this)}
t.prototype.callLoaded=function(){var e=this
this.callFunctionWithSuper(_.superOnLoadedCalled,function(){return e.onLoaded()})}
t.prototype.callUnloaded=function(){var e=this
this.callFunctionWithSuper(_.superOnUnloadedCalled,function(){return e.onUnloaded()})}
t.prototype.notifyPseudoClassChanged=function(e){this.notify({eventName:":"+e,object:this})}
t.prototype.getAllAliasedStates=function(e){var t=[]
t.push(e)
if(e in this.pseudoClassAliases)for(var o=0;o<this.pseudoClassAliases[e].length;o++)t.push(this.pseudoClassAliases[e][o])
return t}
t.prototype.addPseudoClass=function(e){for(var t=this.getAllAliasedStates(e),o=0;o<t.length;o++)if(!this.cssPseudoClasses.has(t[o])){this.cssPseudoClasses.add(t[o])
this.notifyPseudoClassChanged(t[o])}}
t.prototype.deletePseudoClass=function(e){for(var t=this.getAllAliasedStates(e),o=0;o<t.length;o++)if(this.cssPseudoClasses.has(t[o])){this.cssPseudoClasses.delete(t[o])
this.notifyPseudoClassChanged(t[o])}}
t.prototype.bindingContextChanged=function(e){this.bindings.get("bindingContext").bind(e.value)}
t.prototype.bind=function(e,t){void 0===t&&(t=g)
var o=e.targetProperty
this.unbind(o)
this.bindings||(this.bindings=new Map)
var r=new s.Binding(this,e)
this.bindings.set(o,r)
var n=t
if(n===g){n=this.bindingContext
r.sourceIsBindingContext=!0
if("bindingContext"===o){this.bindingContextBoundToParentBindingContextChanged=!0
var i=this.parent
i?i.on("bindingContextChange",this.bindingContextChanged,this):this.shouldAddHandlerToParentBindingContextChanged=!0}}r.bind(n)}
t.prototype.unbind=function(e){var t=this.bindings
if(t){var o=t.get(e)
if(o){o.unbind()
t.delete(e)
if(o.sourceIsBindingContext&&"bindingContext"===e){this.shouldAddHandlerToParentBindingContextChanged=!1
this.bindingContextBoundToParentBindingContextChanged=!1
var r=this.parent
r&&r.off("bindingContextChange",this.bindingContextChanged,this)}}}}
t.prototype.requestLayout=function(){var e=this.parent
e&&e.requestLayout()}
t.prototype.eachChild=function(e){}
t.prototype._addView=function(e,o){s.traceEnabled()&&s.traceWrite(this+"._addView("+e+", "+o+")",s.traceCategories.ViewHierarchy)
if(!e)throw new Error("Expecting a valid View instance.")
if(!(e instanceof t))throw new Error(e+" is not a valid View instance.")
if(e.parent)throw new Error("View already has a parent. View: "+e+" Parent: "+e.parent)
e.parent=this
this._addViewCore(e,o)
e._parentChanged(null)
this.domNode&&this.domNode.onChildAdded(e)}
t.prototype._addViewCore=function(e,t){i.propagateInheritableProperties(this,e)
e._inheritStyleScope(this._styleScope)
i.propagateInheritableCssProperties(this.style,e.style)
this._context&&e._setupUI(this._context,t)
this._isLoaded&&this.loadView(e)}
t.prototype.loadView=function(e){e&&!e.isLoaded&&e.callLoaded()}
t.prototype.unloadView=function(e){e&&e.isLoaded&&e.callUnloaded()}
t.prototype._removeView=function(e){s.traceEnabled()&&s.traceWrite(this+"._removeView("+e+")",s.traceCategories.ViewHierarchy)
if(e.parent!==this)throw new Error("View not added to this instance. View: "+e+" CurrentParent: "+e.parent+" ExpectedParent: "+this)
this.domNode&&this.domNode.onChildRemoved(e)
this._removeViewCore(e)
e.parent=void 0
e._parentChanged(this)}
t.prototype._removeViewCore=function(e){this.unloadView(e)
e._context&&e._tearDownUI()}
t.prototype.createNativeView=function(){}
t.prototype.disposeNativeView=function(){}
t.prototype.initNativeView=function(){}
t.prototype.resetNativeView=function(){}
t.prototype.resetNativeViewInternal=function(){}
t.prototype._setupAsRootView=function(e){this._setupUI(e)}
t.prototype._setupUI=function(e,t,o){if(this._context!==e){this._context&&this._tearDownUI(!0)
this._context=e
var r=this.nativeViewProtected
r||(r=this.createNativeView())
if(u.isAndroid){this._androidView=r
if(r){void 0===this._isPaddingRelative&&(this._isPaddingRelative=r.isPaddingRelative())
var n=r.defaultPaddings
if(void 0===n){n=org.nativescript.widgets.ViewHelper.getPadding(r)
r.defaultPaddings=n}this._defaultPaddingTop=n.top
this._defaultPaddingRight=n.right
this._defaultPaddingBottom=n.bottom
this._defaultPaddingLeft=n.left
var i=this.style
c.paddingTopProperty.isSet(i)||(this.effectivePaddingTop=this._defaultPaddingTop)
c.paddingRightProperty.isSet(i)||(this.effectivePaddingRight=this._defaultPaddingRight)
c.paddingBottomProperty.isSet(i)||(this.effectivePaddingBottom=this._defaultPaddingBottom)
c.paddingLeftProperty.isSet(i)||(this.effectivePaddingLeft=this._defaultPaddingLeft)}}else this._iosView=r
this.setNativeView(r)
if(this.parent){var a=this.parent._childIndexToNativeChildIndex(t)
this._isAddedToNativeVisualTree=this.parent._addViewToNativeVisualTree(this,a)}this._resumeNativeUpdates(w.UISetup)
this.eachChild(function(t){t._setupUI(e)
return!0})}}
t.prototype.setNativeView=function(e){if(this.__nativeView!==e){this.__nativeView&&this._suspendNativeUpdates(w.NativeView)
this.__nativeView=this.nativeViewProtected=e
if(this.__nativeView){this._suspendedUpdates=void 0
this.initNativeView()
this._resumeNativeUpdates(w.NativeView)}}}
t.prototype._tearDownUI=function(e){if(this._context){this.resetNativeViewInternal()
this.eachChild(function(t){t._tearDownUI(e)
return!0})
this.parent&&this.parent._removeViewFromNativeVisualTree(this)
this.disposeNativeView()
this._suspendNativeUpdates(w.UISetup)
if(u.isAndroid){this.setNativeView(null)
this._androidView=null}this._context=null
if(this.domNode){this.domNode.dispose()
this.domNode=void 0}}}
t.prototype._childIndexToNativeChildIndex=function(e){return e}
t.prototype._addViewToNativeVisualTree=function(e,t){if(e._isAddedToNativeVisualTree)throw new Error("Child already added to the native visual tree.")
return!0}
t.prototype._removeViewFromNativeVisualTree=function(e){e._isAddedToNativeVisualTree=!1}
t.prototype._goToVisualState=function(e){s.traceEnabled()&&s.traceWrite(this+" going to state: "+e,s.traceCategories.Style)
if(e!==this._visualState){this.deletePseudoClass(this._visualState)
this._visualState=e
this.addPseudoClass(e)}}
t.prototype._applyXmlAttribute=function(e,t){console.log("ViewBase._applyXmlAttribute(...) is deprecated; set attributes as plain properties instead")
if("style"===e||"rows"===e||"columns"===e||"fontAttributes"===e){this[e]=t
return!0}return!1}
t.prototype.setInlineStyle=function(e){if("string"!=typeof e)throw new Error("Parameter should be valid CSS string!")
m||(m=o("../node_modules/tns-core-modules/ui/styling/style-scope.js"))
m.applyInlineStyle(this,e)}
t.prototype._parentChanged=function(e){var t=this.parent
if(e){i.clearInheritedProperties(this)
this.bindingContextBoundToParentBindingContextChanged&&e.off("bindingContextChange",this.bindingContextChanged,this)}else if(this.shouldAddHandlerToParentBindingContextChanged){t.on("bindingContextChange",this.bindingContextChanged,this)
this.bindings.get("bindingContext").bind(t.bindingContext)}}
t.prototype.onResumeNativeUpdates=function(){i.initNativeView(this)}
t.prototype.toString=function(){var e=this.typeName
this.id?e+="<"+this.id+">":e+="("+this._domId+")"
var t=a.Source.get(this)
t&&(e+="@"+t+";")
return e}
t.prototype._onCssStateChange=function(){this._cssState.onChange()
b(this,function(e){e._cssState.onChange()
return!0})}
t.prototype._inheritStyleScope=function(e){if(!this._isStyleScopeHost&&this._styleScope!==e){this._styleScope=e
this._onCssStateChange()
this.eachChild(function(t){t._inheritStyleScope(e)
return!0})}}
t.prototype.showModal=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]
var o=this.parent
return o&&o.showModal.apply(o,e)}
t.prototype.closeModal=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]
var o=this.parent
o&&o.closeModal.apply(o,e)}
t.prototype._dialogClosed=function(){b(this,function(e){e._dialogClosed()
return!0})}
t.prototype._onRootViewReset=function(){b(this,function(e){e._onRootViewReset()
return!0})}
t.loadedEvent="loaded"
t.unloadedEvent="unloaded"
__decorate([f.profile],t.prototype,"onLoaded",null)
__decorate([f.profile],t.prototype,"onUnloaded",null)
__decorate([f.profile],t.prototype,"addPseudoClass",null)
__decorate([f.profile],t.prototype,"deletePseudoClass",null)
__decorate([f.profile],t.prototype,"requestLayout",null)
__decorate([f.profile],t.prototype,"_addView",null)
__decorate([f.profile],t.prototype,"_setupUI",null)
__decorate([f.profile],t.prototype,"_tearDownUI",null)
return t}(s.Observable)
t.ViewBase=C
C.prototype.isCollapsed=!1
C.prototype._oldLeft=0
C.prototype._oldTop=0
C.prototype._oldRight=0
C.prototype._oldBottom=0
C.prototype.effectiveMinWidth=0
C.prototype.effectiveMinHeight=0
C.prototype.effectiveWidth=0
C.prototype.effectiveHeight=0
C.prototype.effectiveMarginTop=0
C.prototype.effectiveMarginRight=0
C.prototype.effectiveMarginBottom=0
C.prototype.effectiveMarginLeft=0
C.prototype.effectivePaddingTop=0
C.prototype.effectivePaddingRight=0
C.prototype.effectivePaddingBottom=0
C.prototype.effectivePaddingLeft=0
C.prototype.effectiveBorderTopWidth=0
C.prototype.effectiveBorderRightWidth=0
C.prototype.effectiveBorderBottomWidth=0
C.prototype.effectiveBorderLeftWidth=0
C.prototype._defaultPaddingTop=0
C.prototype._defaultPaddingRight=0
C.prototype._defaultPaddingBottom=0
C.prototype._defaultPaddingLeft=0
C.prototype._isViewBase=!0
C.prototype.recycleNativeView="never"
C.prototype._suspendNativeUpdatesCount=w.Loaded|w.NativeView|w.UISetup
t.bindingContextProperty=new i.InheritedProperty({name:"bindingContext"})
t.bindingContextProperty.register(C)
t.classNameProperty=new i.Property({name:"className",valueChanged:function(e,t,o){var r=e.cssClasses
r.clear()
"string"==typeof o&&""!==o&&o.split(" ").forEach(function(e){return r.add(e)})
e._onCssStateChange()}})
t.classNameProperty.register(C)
t.idProperty=new i.Property({name:"id",valueChanged:function(e,t,o){return e._onCssStateChange()}})
t.idProperty.register(C)
t.booleanConverter=function(e){var t=(e+"").toLowerCase()
if("true"===t)return!0
if("false"===t)return!1
throw new Error("Invalid boolean: "+e)}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/core/view-base/view-base.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/core/view-base/view-base.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/core/view/view-common.js":function(e,t,o){(function(r){function n(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}Object.defineProperty(t,"__esModule",{value:!0})
var i,a=o("../node_modules/tns-core-modules/ui/core/view-base/view-base.js"),s=o("../node_modules/tns-core-modules/ui/styling/style-properties.js"),u=o("../node_modules/tns-core-modules/ui/gestures/gestures.js"),l=o("../node_modules/tns-core-modules/ui/builder/builder.js"),c=o("../node_modules/tns-core-modules/ui/builder/module-name-sanitizer.js"),d=o("../node_modules/tns-core-modules/ui/styling/style-scope.js"),p=o("../node_modules/tns-core-modules/ui/styling/linear-gradient.js")
t.LinearGradient=p.LinearGradient
n(o("../node_modules/tns-core-modules/ui/styling/style-properties.js"))
n(o("../node_modules/tns-core-modules/ui/core/view-base/view-base.js"))
t.CSSType=function(e){return function(t){t.prototype.cssType=e}}
function f(e,t,o){return t&&e._moduleName&&t.type&&o.some(function(e){return e===t.type})&&t.path&&t.path.includes(e._moduleName)}t.viewMatchesModuleContext=f
t.PseudoClassHandler=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]
var o=e.map(function(e){return":"+e}),r=Symbol("listeners")
return function(e,t,n){function i(e){var o=this[r]||0,n=o+e
o<=0&&n>0?this[t](!0):o>0&&n<=0&&this[t](!1)}o.forEach(function(t){return e[t]=i})}}
t._rootModalViews=new Array
var h=function(e){__extends(r,e)
function r(){var t=null!==e&&e.apply(this,arguments)||this
t._gestureObservers={}
return t}Object.defineProperty(r.prototype,"css",{get:function(){var e=this._styleScope
return e&&e.css},set:function(e){this._updateStyleScope(void 0,void 0,e)},enumerable:!0,configurable:!0})
r.prototype.addCss=function(e){this._updateStyleScope(void 0,e)}
r.prototype.addCssFile=function(e){this._updateStyleScope(e)}
r.prototype.changeCssFile=function(e){var t=this._styleScope
if(t&&e){t.changeCssFile(e)
this._onCssStateChange()}}
r.prototype._updateStyleScope=function(e,t,o){var r=this._styleScope
if(r){this.setScopeProperty(r,e,t,o)
this._onCssStateChange()}else{r=new d.StyleScope
this.setScopeProperty(r,e,t,o)
this._inheritStyleScope(r)
this._isStyleScopeHost=!0}}
r.prototype.setScopeProperty=function(e,t,o,r){void 0!==t?e.addCssFile(t):void 0!==o?e.addCss(o):void 0!==r&&(e.css=r)}
r.prototype._onLivesync=function(e){a.traceEnabled()&&a.traceWrite(this+"._onLivesync("+JSON.stringify(e)+")",a.traceCategories.Livesync)
if(this._handleLivesync(e))return!0
var t=!1
this.eachChildView(function(o){if(o._onLivesync(e)){t=!0
return!1}})
return t}
r.prototype._handleLivesync=function(e){a.traceEnabled()&&a.traceWrite(this+"._handleLivesync("+JSON.stringify(e)+")",a.traceCategories.Livesync)
if(f(this,e,["style"])){a.traceEnabled()&&a.traceWrite("Change Handled: Changing CSS for "+this,a.traceCategories.Livesync)
var t=c.sanitizeModuleName(e.path)+".css"
this.changeCssFile(t)
return!0}if(f(this,e,["markup","script"])&&this.page&&this.page.frame){a.traceEnabled()&&a.traceWrite("Change Handled: Changing "+e.type+" for "+this+" inside "+this.page,a.traceCategories.Livesync)
return this.page.frame._handleLivesync({type:e.type,path:this.page._moduleName})}return!1}
r.prototype._setupAsRootView=function(t){e.prototype._setupAsRootView.call(this,t)
this._styleScope||this._updateStyleScope()}
r.prototype._observe=function(e,t,o){this._gestureObservers[e]||(this._gestureObservers[e]=[])
this._gestureObservers[e].push(u.observe(this,e,t,o))}
r.prototype.getGestureObservers=function(e){return this._gestureObservers[e]}
r.prototype.addEventListener=function(t,o,r){if("string"==typeof t){t=a.getEventOrGestureName(t)
var n=u.fromString(t)
if(n&&!this._isEvent(t))this._observe(n,o,r)
else{var i=t.split(",")
if(i.length>0)for(var s=0;s<i.length;s++){var l=i[s].trim(),c=u.fromString(l)
c&&!this._isEvent(t)?this._observe(c,o,r):e.prototype.addEventListener.call(this,l,o,r)}else e.prototype.addEventListener.call(this,t,o,r)}}else"number"==typeof t&&this._observe(t,o,r)}
r.prototype.removeEventListener=function(t,o,r){if("string"==typeof t){var n=u.fromString(t)
if(n&&!this._isEvent(t))this._disconnectGestureObservers(n)
else{var i=t.split(",")
if(i.length>0)for(var a=0;a<i.length;a++){var s=i[a].trim(),l=u.fromString(s)
l&&!this._isEvent(t)?this._disconnectGestureObservers(l):e.prototype.removeEventListener.call(this,s,o,r)}else e.prototype.removeEventListener.call(this,t,o,r)}}else"number"==typeof t&&this._disconnectGestureObservers(t)}
r.prototype.onBackPressed=function(){return!1}
r.prototype._getFragmentManager=function(){}
r.prototype.getModalOptions=function(e){if(0===e.length)throw new Error("showModal without parameters is deprecated. Please call showModal on a view instance instead.")
var t=null
if(2===e.length)t=e[1]
else{e[0]instanceof r?console.log("showModal(view: ViewBase, context: any, closeCallback: Function, fullscreen?: boolean, animated?: boolean, stretched?: boolean) is deprecated. Use showModal(view: ViewBase, modalOptions: ShowModalOptions) instead."):console.log("showModal(moduleName: string, context: any, closeCallback: Function, fullscreen?: boolean, animated?: boolean, stretched?: boolean) is deprecated. Use showModal(moduleName: string, modalOptions: ShowModalOptions) instead.")
t={context:e[1],closeCallback:e[2],fullscreen:e[3],animated:e[4],stretched:e[5]}}var o=e[0],n=o instanceof r?o:l.createViewFromEntry({moduleName:o})
return{view:n,options:t}}
r.prototype.showModal=function(){var e=this.getModalOptions(arguments),t=e.view,o=e.options
t._showNativeModalView(this,o)
return t}
r.prototype.closeModal=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]
var o=this._closeModalCallback
if(o)o.apply(void 0,arguments)
else{var r=this.parent
r&&r.closeModal.apply(r,e)}}
Object.defineProperty(r.prototype,"modal",{get:function(){return this._modal},enumerable:!0,configurable:!0})
r.prototype._showNativeModalView=function(e,o){t._rootModalViews.push(this)
e._modal=this
this._modalParent=e
this._modalContext=o.context
var r=this
this._closeModalCallback=function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i]
if(r._closeModalCallback){var a=t._rootModalViews.indexOf(r)
t._rootModalViews.splice(a)
r._modalParent=null
r._modalContext=null
r._closeModalCallback=null
r._dialogClosed()
e._modal=null
r._hideNativeModalView(e,function(){"function"==typeof o.closeCallback&&o.closeCallback.apply(void 0,n)})}}}
r.prototype._raiseLayoutChangedEvent=function(){var e={eventName:r.layoutChangedEvent,object:this}
this.notify(e)}
r.prototype._raiseShownModallyEvent=function(){var e={eventName:r.shownModallyEvent,object:this,context:this._modalContext,closeCallback:this._closeModalCallback}
this.notify(e)}
r.prototype._raiseShowingModallyEvent=function(){var e={eventName:r.showingModallyEvent,object:this,context:this._modalContext,closeCallback:this._closeModalCallback}
this.notify(e)}
r.prototype._isEvent=function(e){return this.constructor&&e+"Event"in this.constructor}
r.prototype._disconnectGestureObservers=function(e){var t=this.getGestureObservers(e)
if(t)for(var o=0;o<t.length;o++)t[o].disconnect()}
Object.defineProperty(r.prototype,"borderColor",{get:function(){return this.style.borderColor},set:function(e){this.style.borderColor=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"borderTopColor",{get:function(){return this.style.borderTopColor},set:function(e){this.style.borderTopColor=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"borderRightColor",{get:function(){return this.style.borderRightColor},set:function(e){this.style.borderRightColor=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"borderBottomColor",{get:function(){return this.style.borderBottomColor},set:function(e){this.style.borderBottomColor=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"borderLeftColor",{get:function(){return this.style.borderLeftColor},set:function(e){this.style.borderLeftColor=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"borderWidth",{get:function(){return this.style.borderWidth},set:function(e){this.style.borderWidth=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"borderTopWidth",{get:function(){return this.style.borderTopWidth},set:function(e){this.style.borderTopWidth=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"borderRightWidth",{get:function(){return this.style.borderRightWidth},set:function(e){this.style.borderRightWidth=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"borderBottomWidth",{get:function(){return this.style.borderBottomWidth},set:function(e){this.style.borderBottomWidth=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"borderLeftWidth",{get:function(){return this.style.borderLeftWidth},set:function(e){this.style.borderLeftWidth=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"borderRadius",{get:function(){return this.style.borderRadius},set:function(e){this.style.borderRadius=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"borderTopLeftRadius",{get:function(){return this.style.borderTopLeftRadius},set:function(e){this.style.borderTopLeftRadius=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"borderTopRightRadius",{get:function(){return this.style.borderTopRightRadius},set:function(e){this.style.borderTopRightRadius=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"borderBottomRightRadius",{get:function(){return this.style.borderBottomRightRadius},set:function(e){this.style.borderBottomRightRadius=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"borderBottomLeftRadius",{get:function(){return this.style.borderBottomLeftRadius},set:function(e){this.style.borderBottomLeftRadius=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"color",{get:function(){return this.style.color},set:function(e){this.style.color=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"background",{get:function(){return this.style.background},set:function(e){this.style.background=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"backgroundColor",{get:function(){return this.style.backgroundColor},set:function(e){this.style.backgroundColor=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"backgroundImage",{get:function(){return this.style.backgroundImage},set:function(e){this.style.backgroundImage=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"backgroundSize",{get:function(){return this.style.backgroundSize},set:function(e){this.style.backgroundSize=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"backgroundPosition",{get:function(){return this.style.backgroundPosition},set:function(e){this.style.backgroundPosition=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"backgroundRepeat",{get:function(){return this.style.backgroundRepeat},set:function(e){this.style.backgroundRepeat=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"minWidth",{get:function(){return this.style.minWidth},set:function(e){this.style.minWidth=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"minHeight",{get:function(){return this.style.minHeight},set:function(e){this.style.minHeight=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"width",{get:function(){return this.style.width},set:function(e){this.style.width=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"height",{get:function(){return this.style.height},set:function(e){this.style.height=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"margin",{get:function(){return this.style.margin},set:function(e){this.style.margin=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"marginLeft",{get:function(){return this.style.marginLeft},set:function(e){this.style.marginLeft=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"marginTop",{get:function(){return this.style.marginTop},set:function(e){this.style.marginTop=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"marginRight",{get:function(){return this.style.marginRight},set:function(e){this.style.marginRight=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"marginBottom",{get:function(){return this.style.marginBottom},set:function(e){this.style.marginBottom=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"horizontalAlignment",{get:function(){return this.style.horizontalAlignment},set:function(e){this.style.horizontalAlignment=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"verticalAlignment",{get:function(){return this.style.verticalAlignment},set:function(e){this.style.verticalAlignment=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"visibility",{get:function(){return this.style.visibility},set:function(e){this.style.visibility=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"opacity",{get:function(){return this.style.opacity},set:function(e){this.style.opacity=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"rotate",{get:function(){return this.style.rotate},set:function(e){this.style.rotate=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"translateX",{get:function(){return this.style.translateX},set:function(e){this.style.translateX=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"translateY",{get:function(){return this.style.translateY},set:function(e){this.style.translateY=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"scaleX",{get:function(){return this.style.scaleX},set:function(e){this.style.scaleX=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"scaleY",{get:function(){return this.style.scaleY},set:function(e){this.style.scaleY=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"androidElevation",{get:function(){return this.style.androidElevation},set:function(e){this.style.androidElevation=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"androidDynamicElevationOffset",{get:function(){return this.style.androidDynamicElevationOffset},set:function(e){this.style.androidDynamicElevationOffset=e},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"isLayoutValid",{get:function(){return this._isLayoutValid},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"cssType",{get:function(){this._cssType||(this._cssType=this.typeName.toLowerCase())
return this._cssType},set:function(e){this._cssType=e.toLowerCase()},enumerable:!0,configurable:!0})
Object.defineProperty(r.prototype,"isLayoutRequired",{get:function(){return!0},enumerable:!0,configurable:!0})
r.prototype.measure=function(e,t){this._setCurrentMeasureSpecs(e,t)}
r.prototype.layout=function(e,t,o,r){this._setCurrentLayoutBounds(e,t,o,r)}
r.prototype.getMeasuredWidth=function(){return this._measuredWidth&a.layout.MEASURED_SIZE_MASK||0}
r.prototype.getMeasuredHeight=function(){return this._measuredHeight&a.layout.MEASURED_SIZE_MASK||0}
r.prototype.getMeasuredState=function(){return this._measuredWidth&a.layout.MEASURED_STATE_MASK|this._measuredHeight>>a.layout.MEASURED_HEIGHT_STATE_SHIFT&a.layout.MEASURED_STATE_MASK>>a.layout.MEASURED_HEIGHT_STATE_SHIFT}
r.prototype.setMeasuredDimension=function(e,t){this._measuredWidth=e
this._measuredHeight=t
a.traceEnabled()&&a.traceWrite(this+" :setMeasuredDimension: "+e+", "+t,a.traceCategories.Layout)}
r.prototype.requestLayout=function(){this._isLayoutValid=!1
e.prototype.requestLayout.call(this)}
r.resolveSizeAndState=function(e,t,o,r){var n=e
switch(o){case a.layout.UNSPECIFIED:n=Math.ceil(e)
break
case a.layout.AT_MOST:t<e&&(n=Math.ceil(t)|a.layout.MEASURED_STATE_TOO_SMALL)
break
case a.layout.EXACTLY:n=Math.ceil(t)}return n|r&a.layout.MEASURED_STATE_MASK}
r.combineMeasuredStates=function(e,t){return e|t}
r.layoutChild=function(e,t,o,r,n,i,s){void 0===s&&(s=!0)
if(t&&!t.isCollapsed){var u,l,c,d=t.style,p=t.getMeasuredWidth(),f=t.getMeasuredHeight(),h=t.effectiveMarginTop,m=t.effectiveMarginBottom
c=t.effectiveHeight>=0&&"stretch"===d.verticalAlignment?"middle":d.verticalAlignment
switch(c){case"top":u=r+h
break
case"middle":u=r+(i-r-f+(h-m))/2
break
case"bottom":u=i-f-m
break
case"stretch":default:u=r+h
f=i-r-(h+m)}var y,g=t.effectiveMarginLeft,v=t.effectiveMarginRight
y=t.effectiveWidth>=0&&"stretch"===d.horizontalAlignment?"center":d.horizontalAlignment
switch(y){case"left":l=o+g
break
case"center":l=o+(n-o-p+(g-v))/2
break
case"right":l=n-p-v
break
case"stretch":default:l=o+g
p=n-o-(g+v)}var b=Math.round(l+p),_=Math.round(u+f)
l=Math.round(l)
u=Math.round(u)
a.traceEnabled()&&a.traceWrite(t.parent+" :layoutChild: "+t+" "+l+", "+u+", "+b+", "+_,a.traceCategories.Layout)
t.layout(l,u,b,_,s)}}
r.measureChild=function(e,t,o,n){var i=0,s=0
if(t&&!t.isCollapsed){var u=e?e._currentWidthMeasureSpec:o,l=e?e._currentHeightMeasureSpec:n,c=a.layout.getMeasureSpecSize(u),d=a.layout.getMeasureSpecMode(u),p=a.layout.getMeasureSpecSize(l),f=a.layout.getMeasureSpecMode(l)
t._updateEffectiveLayoutValues(c,d,p,f)
var h=t.style,m=t.effectiveMarginLeft+t.effectiveMarginRight,y=t.effectiveMarginTop+t.effectiveMarginBottom,g=r.getMeasureSpec(o,m,t.effectiveWidth,"stretch"===h.horizontalAlignment),v=r.getMeasureSpec(n,y,t.effectiveHeight,"stretch"===h.verticalAlignment)
a.traceEnabled()&&a.traceWrite(t.parent+" :measureChild: "+t+" "+a.layout.measureSpecToString(g)+", "+a.layout.measureSpecToString(v)+"}",a.traceCategories.Layout)
t.measure(g,v)
i=Math.round(t.getMeasuredWidth()+m)
s=Math.round(t.getMeasuredHeight()+y)}return{measuredWidth:i,measuredHeight:s}}
r.getMeasureSpec=function(e,t,o,r){var n,i,s=a.layout.getMeasureSpecSize(e),u=a.layout.getMeasureSpecMode(e)
if(o>=0){n=u===a.layout.UNSPECIFIED?o:Math.min(s,o)
i=a.layout.EXACTLY}else switch(u){case a.layout.EXACTLY:n=Math.max(0,s-t)
i=r?a.layout.EXACTLY:a.layout.AT_MOST
break
case a.layout.AT_MOST:n=Math.max(0,s-t)
i=a.layout.AT_MOST
break
case a.layout.UNSPECIFIED:n=0
i=a.layout.UNSPECIFIED}return a.layout.makeMeasureSpec(n,i)}
r.prototype._setCurrentMeasureSpecs=function(e,t){var o=this._currentWidthMeasureSpec!==e||this._currentHeightMeasureSpec!==t
this._currentWidthMeasureSpec=e
this._currentHeightMeasureSpec=t
return o}
r.prototype._getCurrentLayoutBounds=function(){return{left:0,top:0,right:0,bottom:0}}
r.prototype._setCurrentLayoutBounds=function(e,t,o,r){this._isLayoutValid=!0
var n=this._oldLeft!==e||this._oldTop!==t||this._oldRight!==o||this._oldBottom!==r,i=this._oldRight-this._oldLeft!=o-e||this._oldBottom-this._oldTop!=r-t
this._oldLeft=e
this._oldTop=t
this._oldRight=o
this._oldBottom=r
return{boundsChanged:n,sizeChanged:i}}
r.prototype.eachChild=function(e){this.eachChildView(e)}
r.prototype.eachChildView=function(e){}
r.prototype._getNativeViewsCount=function(){return this._isAddedToNativeVisualTree?1:0}
r.prototype._eachLayoutView=function(e){return e(this)}
r.prototype.focus=function(){}
r.prototype.getSafeAreaInsets=function(){return{left:0,top:0,right:0,bottom:0}}
r.prototype.getLocationInWindow=function(){}
r.prototype.getLocationOnScreen=function(){}
r.prototype.getLocationRelativeTo=function(e){}
r.prototype.getActualSize=function(){var e=this._getCurrentLayoutBounds()
if(e)return{width:a.layout.toDeviceIndependentPixels(e.right-e.left),height:a.layout.toDeviceIndependentPixels(e.bottom-e.top)}}
r.prototype.animate=function(e){return this.createAnimation(e).play()}
r.prototype.createAnimation=function(e){i||(i=o("../node_modules/tns-core-modules/ui/animation/animation.js"))
this._localAnimations||(this._localAnimations=new Set)
e.target=this
var t=new i.Animation([e])
this._localAnimations.add(t)
return t}
r.prototype._removeAnimation=function(e){var t=this._localAnimations
if(t&&t.has(e)){t.delete(e)
e.isPlaying&&e.cancel()
return!0}return!1}
r.prototype.resetNativeView=function(){var t=this
this._localAnimations&&this._localAnimations.forEach(function(e){return t._removeAnimation(e)})
e.prototype.resetNativeView.call(this)}
r.prototype._setNativeViewFrame=function(e,t){}
r.prototype._getValue=function(){throw new Error("The View._getValue is obsolete. There is a new property system.")}
r.prototype._setValue=function(){throw new Error("The View._setValue is obsolete. There is a new property system.")}
r.prototype._updateEffectiveLayoutValues=function(e,t,o,r){var n=this.style,i=t===a.layout.UNSPECIFIED?-1:e
this.effectiveWidth=s.PercentLength.toDevicePixels(n.width,-2,i)
this.effectiveMarginLeft=s.PercentLength.toDevicePixels(n.marginLeft,0,i)
this.effectiveMarginRight=s.PercentLength.toDevicePixels(n.marginRight,0,i)
var u=r===a.layout.UNSPECIFIED?-1:o
this.effectiveHeight=s.PercentLength.toDevicePixels(n.height,-2,u)
this.effectiveMarginTop=s.PercentLength.toDevicePixels(n.marginTop,0,u)
this.effectiveMarginBottom=s.PercentLength.toDevicePixels(n.marginBottom,0,u)}
r.prototype._setNativeClipToBounds=function(){}
r.prototype._redrawNativeBackground=function(e){}
r.prototype._onAttachedToWindow=function(){}
r.prototype._onDetachedFromWindow=function(){}
r.prototype._hasAncestorView=function(e){for(var t,o=this.parent;null!=o;o=o.parent)if(t=o,t===e)return!0
return!1}
r.layoutChangedEvent="layoutChanged"
r.shownModallyEvent="shownModally"
r.showingModallyEvent="showingModally"
return r}(a.ViewBase)
t.ViewCommon=h
t.automationTextProperty=new a.Property({name:"automationText"})
t.automationTextProperty.register(h)
t.originXProperty=new a.Property({name:"originX",defaultValue:.5,valueConverter:function(e){return parseFloat(e)}})
t.originXProperty.register(h)
t.originYProperty=new a.Property({name:"originY",defaultValue:.5,valueConverter:function(e){return parseFloat(e)}})
t.originYProperty.register(h)
t.isEnabledProperty=new a.Property({name:"isEnabled",defaultValue:!0,valueConverter:a.booleanConverter,valueChanged:function(e,t,o){e._goToVisualState(o?"normal":"disabled")}})
t.isEnabledProperty.register(h)
t.isUserInteractionEnabledProperty=new a.Property({name:"isUserInteractionEnabled",defaultValue:!0,valueConverter:a.booleanConverter})
t.isUserInteractionEnabledProperty.register(h)
t.iosOverflowSafeAreaProperty=new a.Property({name:"iosOverflowSafeArea",defaultValue:!1,valueConverter:a.booleanConverter})
t.iosOverflowSafeAreaProperty.register(h)
t.iosOverflowSafeAreaEnabledProperty=new a.InheritedProperty({name:"iosOverflowSafeAreaEnabled",defaultValue:!0,valueConverter:a.booleanConverter})
t.iosOverflowSafeAreaEnabledProperty.register(h)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/core/view/view-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/core/view/view-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/core/view/view.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view-common.js"),i=o("../node_modules/tns-core-modules/ui/styling/style-properties.js"),a=o("../node_modules/tns-core-modules/ui/styling/background.js"),s=o("../node_modules/tns-core-modules/profiling/profiling.js"),u=o("../node_modules/tns-core-modules/ui/frame/frame-stack.js"),l=o("../node_modules/tns-core-modules/application/application.js"),c=o("../node_modules/tns-core-modules/platform/platform.js"),d=o("../node_modules/tns-core-modules/utils/lazy.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view-common.js"))
var p,f,h="_domId",m=d.default(function(){return parseInt(c.device.sdkVersion)}),y=new Map
function g(){if(!f){var e=function(e){__extends(t,e)
function t(t,o,n){var i=e.call(this,o,n)||this
i.fragment=t
return r.__native(i)}t.prototype.onDetachedFromWindow=function(){e.prototype.onDetachedFromWindow.call(this)
this.fragment=null}
t.prototype.onBackPressed=function(){var t=this.fragment.owner,o={eventName:"activityBackPressed",object:t,activity:t._context,cancel:!1}
l.android.notify(o)
if(!o.cancel){t.notify(o)
o.cancel||t.onBackPressed()||e.prototype.onBackPressed.call(this)}}
return t}(android.app.Dialog),t=function(t){__extends(o,t)
function o(){var e=t.call(this)||this
return r.__native(e)}o.prototype.onCreateDialog=function(t){var o,r=this.getArguments().getInt(h),n=(o=r,y.get(o))
this.owner=n.owner
this._fullscreen=n.fullscreen
this._cancelable=n.cancelable
this._stretched=n.stretched
this._dismissCallback=n.dismissCallback
this._shownCallback=n.shownCallback
this.setStyle(androidx.fragment.app.DialogFragment.STYLE_NO_TITLE,0)
var i=this.getTheme()
this._fullscreen&&(i=this.getActivity().getApplicationInfo().theme)
var a=new e(this,this.getActivity(),i)
if(this._fullscreen||this._stretched){this.owner.horizontalAlignment="stretch"
this.owner.verticalAlignment="stretch"}else{this.owner.horizontalAlignment="center"
this.owner.verticalAlignment="middle"}a.setCanceledOnTouchOutside(this._cancelable)
return a}
o.prototype.onCreateView=function(e,t,o){var r=this.owner
r._setupAsRootView(this.getActivity())
r._isAddedToNativeVisualTree=!0
return r.nativeViewProtected}
o.prototype.onStart=function(){t.prototype.onStart.call(this)
if(this._fullscreen){var e=this.getDialog().getWindow(),o=android.view.ViewGroup.LayoutParams.MATCH_PARENT
e.setLayout(o,o)
e.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.WHITE))}var r=this.owner
r&&!r.isLoaded&&r.callLoaded()
this._shownCallback()}
o.prototype.onDismiss=function(e){t.prototype.onDismiss.call(this,e)
var o,r=this.getFragmentManager()
if(r){o=this.owner._domId,y.delete(o)
this._dismissCallback()}var n=this.owner
n&&n.isLoaded&&n.callUnloaded()}
o.prototype.onDestroy=function(){t.prototype.onDestroy.call(this)
var e=this.owner
if(e){e.isLoaded&&e.callUnloaded()
e._isAddedToNativeVisualTree=!1
e._tearDownUI(!0)}}
return o}(androidx.fragment.app.DialogFragment)
f=t}}var v=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype._observe=function(t,o,r){e.prototype._observe.call(this,t,o,r)
this.isLoaded&&!this.touchListenerIsSet&&this.setOnTouchListener()}
t.prototype.on=function(t,o,r){e.prototype.on.call(this,t,o,r)
var i="string"==typeof t&&-1!==t.indexOf(n.ViewCommon.layoutChangedEvent)
this.isLoaded&&!this.layoutChangeListenerIsSet&&i&&this.setOnLayoutChangeListener()}
t.prototype.off=function(t,o,r){e.prototype.off.call(this,t,o,r)
var i="string"==typeof t&&-1!==t.indexOf(n.ViewCommon.layoutChangedEvent)
if(this.isLoaded&&this.layoutChangeListenerIsSet&&i&&!this.hasListeners(n.ViewCommon.layoutChangedEvent)){this.nativeViewProtected.removeOnLayoutChangeListener(this.layoutChangeListener)
this.layoutChangeListenerIsSet=!1}}
t.prototype._getChildFragmentManager=function(){return null}
t.prototype._getRootFragmentManager=function(){!this._rootManager&&this._context&&(this._rootManager=this._context.getSupportFragmentManager())
return this._rootManager}
t.prototype._getFragmentManager=function(){var e=this._manager
if(!e){for(var t=this,o=!1;t;){var r=t._dialogFragment
if(r){e=r.getChildFragmentManager()
break}if(t._hasFragments){if(o){e=t._getChildFragmentManager()
break}o=!0}t=t.parent}e||(e=this._getRootFragmentManager())
this._manager=e}return e}
t.prototype.onLoaded=function(){this._manager=null
this._rootManager=null
e.prototype.onLoaded.call(this)
this.setOnTouchListener()}
t.prototype.onUnloaded=function(){if(this.touchListenerIsSet){this.nativeViewProtected.setOnTouchListener(null)
this.touchListenerIsSet=!1
this.nativeViewProtected.setClickable(this._isClickable)}this._manager=null
this._rootManager=null
e.prototype.onUnloaded.call(this)}
t.prototype.onBackPressed=function(){var e=u.topmost()
return!(!e||!e._hasAncestorView(this))&&e.onBackPressed()}
t.prototype.handleGestureTouch=function(e){for(var o in this._gestureObservers){var r=this._gestureObservers[o]
r.forEach(function(t){t.androidOnTouchEvent(e)})}this.parent instanceof t&&this.parent.handleGestureTouch(e)}
t.prototype.hasGestureObservers=function(){return this._gestureObservers&&Object.keys(this._gestureObservers).length>0}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
this._isClickable=this.nativeViewProtected.isClickable()
this.hasListeners(n.ViewCommon.layoutChangedEvent)&&this.setOnLayoutChangeListener()}
t.prototype.disposeNativeView=function(){e.prototype.disposeNativeView.call(this)
if(this.layoutChangeListenerIsSet){this.layoutChangeListenerIsSet=!1
this.nativeViewProtected.removeOnLayoutChangeListener(this.layoutChangeListener)}}
t.prototype.setOnTouchListener=function(){if(this.nativeViewProtected&&this.hasGestureObservers()){!function(){if(!p){var e=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=new WeakRef(t)
return r.__native(o)}t.prototype.onTouch=function(e,t){var o=this.owner.get()
if(o){o.handleGestureTouch(t)
var r=o.nativeViewProtected
return!(!r||!r.onTouchEvent)&&r.onTouchEvent(t)}}
t=__decorate([Interfaces([android.view.View.OnTouchListener])],t)
return t}(java.lang.Object)
p=e}}()
this.touchListener=this.touchListener||new p(this)
this.nativeViewProtected.setOnTouchListener(this.touchListener)
this.touchListenerIsSet=!0
this.nativeViewProtected.setClickable&&this.nativeViewProtected.setClickable(this.isUserInteractionEnabled)}}
t.prototype.setOnLayoutChangeListener=function(){if(this.nativeViewProtected){var e=this
this.layoutChangeListenerIsSet=!0
this.layoutChangeListener=this.layoutChangeListener||new android.view.View.OnLayoutChangeListener({onLayoutChange:function(t,o,r,n,i,a,s,u,l){o===a&&r===s&&n===u&&i===l||e._raiseLayoutChangedEvent()}})
this.nativeViewProtected.addOnLayoutChangeListener(this.layoutChangeListener)}}
Object.defineProperty(t.prototype,"isLayoutRequired",{get:function(){return!this.isLayoutValid},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"isLayoutValid",{get:function(){return!!this.nativeViewProtected&&!this.nativeViewProtected.isLayoutRequested()},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"_hasFragments",{get:function(){return!1},enumerable:!0,configurable:!0})
t.prototype.layoutNativeView=function(e,t,o,r){this.nativeViewProtected&&this.nativeViewProtected.layout(e,t,o,r)}
t.prototype.requestLayout=function(){e.prototype.requestLayout.call(this)
this.nativeViewProtected&&this.nativeViewProtected.requestLayout()}
t.prototype.measure=function(t,o){e.prototype.measure.call(this,t,o)
this.onMeasure(t,o)}
t.prototype.layout=function(t,o,r,n){e.prototype.layout.call(this,t,o,r,n)
this.onLayout(t,o,r,n)}
t.prototype.onMeasure=function(e,t){var o=this.nativeViewProtected
if(o){o.measure(e,t)
this.setMeasuredDimension(o.getMeasuredWidth(),o.getMeasuredHeight())}}
t.prototype.onLayout=function(e,t,o,r){var n=this.nativeViewProtected
n&&this.layoutNativeView(e,t,o,r)}
t.prototype._getCurrentLayoutBounds=function(){return this.nativeViewProtected&&!this.isCollapsed?{left:this.nativeViewProtected.getLeft(),top:this.nativeViewProtected.getTop(),right:this.nativeViewProtected.getRight(),bottom:this.nativeViewProtected.getBottom()}:{left:0,top:0,right:0,bottom:0}}
t.prototype.getMeasuredWidth=function(){return this.nativeViewProtected?this.nativeViewProtected.getMeasuredWidth():e.prototype.getMeasuredWidth.call(this)}
t.prototype.getMeasuredHeight=function(){return this.nativeViewProtected?this.nativeViewProtected.getMeasuredHeight():e.prototype.getMeasuredHeight.call(this)}
t.prototype.focus=function(){return!!this.nativeViewProtected&&this.nativeViewProtected.requestFocus()}
t.prototype.getLocationInWindow=function(){if(this.nativeViewProtected&&this.nativeViewProtected.getWindowToken()){var e=Array.create("int",2)
this.nativeViewProtected.getLocationInWindow(e)
return{x:n.layout.toDeviceIndependentPixels(e[0]),y:n.layout.toDeviceIndependentPixels(e[1])}}}
t.prototype.getLocationOnScreen=function(){if(this.nativeViewProtected&&this.nativeViewProtected.getWindowToken()){var e=Array.create("int",2)
this.nativeViewProtected.getLocationOnScreen(e)
return{x:n.layout.toDeviceIndependentPixels(e[0]),y:n.layout.toDeviceIndependentPixels(e[1])}}}
t.prototype.getLocationRelativeTo=function(e){if(this.nativeViewProtected&&this.nativeViewProtected.getWindowToken()&&e&&e.nativeViewProtected&&e.nativeViewProtected.getWindowToken()&&this.nativeViewProtected.getWindowToken()===e.nativeViewProtected.getWindowToken()){var t=Array.create("int",2)
this.nativeViewProtected.getLocationOnScreen(t)
var o=Array.create("int",2)
e.nativeViewProtected.getLocationOnScreen(o)
return{x:n.layout.toDeviceIndependentPixels(t[0]-o[0]),y:n.layout.toDeviceIndependentPixels(t[1]-o[1])}}}
t.resolveSizeAndState=function(e,t,o,r){var i=e
switch(o){case n.layout.UNSPECIFIED:i=e
break
case n.layout.AT_MOST:t<e&&(i=t|n.layout.MEASURED_STATE_TOO_SMALL)
break
case n.layout.EXACTLY:i=t}return i|r&n.layout.MEASURED_STATE_MASK}
t.prototype._showNativeModalView=function(t,o){var r=this
e.prototype._showNativeModalView.call(this,t,o)
this.backgroundColor||(this.backgroundColor=new n.Color("White"))
g()
var i=new f,a=new android.os.Bundle
a.putInt(h,this._domId)
i.setArguments(a)
var s={owner:this,fullscreen:!!o.fullscreen,stretched:!!o.stretched,cancelable:!o.android||!!o.android.cancelable,shownCallback:function(){return r._raiseShownModallyEvent()},dismissCallback:function(){return r.closeModal()}}
!function(e){y.set(e.owner._domId,e)}(s)
this._dialogFragment=i
this._raiseShowingModallyEvent()
this._dialogFragment.show(t._getRootFragmentManager(),this._domId.toString())}
t.prototype._hideNativeModalView=function(e,t){var o=this._dialogFragment.getFragmentManager()
o&&this._dialogFragment.dismissAllowingStateLoss()
this._dialogFragment=null
t()}
t.prototype[n.isEnabledProperty.setNative]=function(e){this.nativeViewProtected.setEnabled(e)}
t.prototype[n.originXProperty.getDefault]=function(){return this.nativeViewProtected.getPivotX()}
t.prototype[n.originXProperty.setNative]=function(e){org.nativescript.widgets.OriginPoint.setX(this.nativeViewProtected,e)}
t.prototype[n.originYProperty.getDefault]=function(){return this.nativeViewProtected.getPivotY()}
t.prototype[n.originYProperty.setNative]=function(e){org.nativescript.widgets.OriginPoint.setY(this.nativeViewProtected,e)}
t.prototype[n.automationTextProperty.getDefault]=function(){return this.nativeViewProtected.getContentDescription()}
t.prototype[n.automationTextProperty.setNative]=function(e){this.nativeViewProtected.setContentDescription(e)}
t.prototype[n.isUserInteractionEnabledProperty.setNative]=function(e){this.nativeViewProtected.setClickable(e)
this.nativeViewProtected.setFocusable(e)}
t.prototype[i.visibilityProperty.getDefault]=function(){var e=this.nativeViewProtected.getVisibility()
switch(e){case android.view.View.VISIBLE:return"visible"
case android.view.View.INVISIBLE:return"hidden"
case android.view.View.GONE:return"collapse"
default:throw new Error("Unsupported android.view.View visibility: "+e+". Currently supported values are android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE.")}}
t.prototype[i.visibilityProperty.setNative]=function(e){switch(e){case"visible":this.nativeViewProtected.setVisibility(android.view.View.VISIBLE)
break
case"hidden":this.nativeViewProtected.setVisibility(android.view.View.INVISIBLE)
break
case"collapse":this.nativeViewProtected.setVisibility(android.view.View.GONE)
break
default:throw new Error("Invalid visibility value: "+e+". Valid values are: visible, hidden, collapse.")}}
t.prototype[i.opacityProperty.getDefault]=function(){return this.nativeViewProtected.getAlpha()}
t.prototype[i.opacityProperty.setNative]=function(e){this.nativeViewProtected.setAlpha(float(e))}
t.prototype[i.androidElevationProperty.getDefault]=function(){return this.getDefaultElevation()}
t.prototype[i.androidElevationProperty.setNative]=function(e){m()<21||this.refreshStateListAnimator()}
t.prototype[i.androidDynamicElevationOffsetProperty.getDefault]=function(){return this.getDefaultDynamicElevationOffset()}
t.prototype[i.androidDynamicElevationOffsetProperty.setNative]=function(e){m()<21||this.refreshStateListAnimator()}
t.prototype.getDefaultElevation=function(){return m()<21?0:n.layout.toDeviceIndependentPixels(this.nativeViewProtected.getElevation())}
t.prototype.getDefaultDynamicElevationOffset=function(){return 0}
t.prototype.refreshStateListAnimator=function(){var e=this.nativeViewProtected,t=android.animation.ObjectAnimator,o=android.animation.AnimatorSet,r=e.getContext().getResources().getInteger(17694720)/2,i=this.androidElevation
null==i&&(i=this.getDefaultElevation())
i=n.layout.toDevicePixels(i)
var a=n.layout.toDevicePixels(0),s=this.androidDynamicElevationOffset
null==s&&(s=this.getDefaultDynamicElevationOffset())
s=n.layout.toDevicePixels(s)
var u=new o
u.playTogether(java.util.Arrays.asList([t.ofFloat(e,"translationZ",[s]).setDuration(r),t.ofFloat(e,"elevation",[i]).setDuration(0)]))
var l=new o
l.playTogether(java.util.Arrays.asList([t.ofFloat(e,"translationZ",[a]).setDuration(r),t.ofFloat(e,"elevation",[i]).setDuration(0)]))
var c=new o
c.playTogether(java.util.Arrays.asList([t.ofFloat(e,"translationZ",[0]).setDuration(0),t.ofFloat(e,"elevation",[0]).setDuration(0)]))
var d=new android.animation.StateListAnimator
d.addState([16842919,16842910],u)
d.addState([16842910],l)
d.addState([],c)
e.setStateListAnimator(d)}
t.prototype[i.horizontalAlignmentProperty.getDefault]=function(){return org.nativescript.widgets.ViewHelper.getHorizontalAlignment(this.nativeViewProtected)}
t.prototype[i.horizontalAlignmentProperty.setNative]=function(e){var t=this.nativeViewProtected,o=t.getLayoutParams()||new org.nativescript.widgets.CommonLayoutParams
if(void 0!==o.gravity){switch(e){case"left":o.gravity=android.view.Gravity.LEFT|o.gravity&android.view.Gravity.VERTICAL_GRAVITY_MASK
o.weight<0&&(o.weight=-2)
break
case"center":o.gravity=android.view.Gravity.CENTER_HORIZONTAL|o.gravity&android.view.Gravity.VERTICAL_GRAVITY_MASK
o.weight<0&&(o.weight=-2)
break
case"right":o.gravity=android.view.Gravity.RIGHT|o.gravity&android.view.Gravity.VERTICAL_GRAVITY_MASK
o.weight<0&&(o.weight=-2)
break
case"stretch":o.gravity=android.view.Gravity.FILL_HORIZONTAL|o.gravity&android.view.Gravity.VERTICAL_GRAVITY_MASK
o.weight<0&&(o.weight=-1)}t.setLayoutParams(o)}}
t.prototype[i.verticalAlignmentProperty.getDefault]=function(){return org.nativescript.widgets.ViewHelper.getVerticalAlignment(this.nativeViewProtected)}
t.prototype[i.verticalAlignmentProperty.setNative]=function(e){var t=this.nativeViewProtected,o=t.getLayoutParams()||new org.nativescript.widgets.CommonLayoutParams
if(void 0!==o.gravity){switch(e){case"top":o.gravity=android.view.Gravity.TOP|o.gravity&android.view.Gravity.HORIZONTAL_GRAVITY_MASK
o.height<0&&(o.height=-2)
break
case"middle":o.gravity=android.view.Gravity.CENTER_VERTICAL|o.gravity&android.view.Gravity.HORIZONTAL_GRAVITY_MASK
o.height<0&&(o.height=-2)
break
case"bottom":o.gravity=android.view.Gravity.BOTTOM|o.gravity&android.view.Gravity.HORIZONTAL_GRAVITY_MASK
o.height<0&&(o.height=-2)
break
case"stretch":o.gravity=android.view.Gravity.FILL_VERTICAL|o.gravity&android.view.Gravity.HORIZONTAL_GRAVITY_MASK
o.height<0&&(o.height=-1)}t.setLayoutParams(o)}}
t.prototype[i.rotateProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setRotate(this.nativeViewProtected,float(e))}
t.prototype[i.scaleXProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setScaleX(this.nativeViewProtected,float(e))}
t.prototype[i.scaleYProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setScaleY(this.nativeViewProtected,float(e))}
t.prototype[i.translateXProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setTranslateX(this.nativeViewProtected,n.layout.toDevicePixels(e))}
t.prototype[i.translateYProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setTranslateY(this.nativeViewProtected,n.layout.toDevicePixels(e))}
t.prototype[i.zIndexProperty.getDefault]=function(){return 0}
t.prototype[i.zIndexProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setZIndex(this.nativeViewProtected,e)}
t.prototype[i.backgroundInternalProperty.getDefault]=function(){var e=this.nativeViewProtected,t=e.getBackground()
if(t){var o=t.getConstantState()
if(!o)return t
try{return o.newDrawable(e.getResources())}catch(e){return t}}return null}
t.prototype[i.backgroundInternalProperty.setNative]=function(e){this._redrawNativeBackground(e)}
t.prototype[i.minWidthProperty.setNative]=function(e){this.parent instanceof _&&this.parent.nativeViewProtected?this.parent._setChildMinWidthNative(this):this._setMinWidthNative(this.minWidth)}
t.prototype[i.minHeightProperty.setNative]=function(e){this.parent instanceof _&&this.parent.nativeViewProtected?this.parent._setChildMinHeightNative(this):this._setMinHeightNative(this.minHeight)}
t.prototype._redrawNativeBackground=function(e){if(e instanceof a.Background)a.ad.onBackgroundOrBorderPropertyChanged(this)
else{var t=this.nativeViewProtected
t.setBackground(e)
var o=this.style,r=n.paddingTopProperty.isSet(o)?this.effectivePaddingTop:this._defaultPaddingTop,i=n.paddingRightProperty.isSet(o)?this.effectivePaddingRight:this._defaultPaddingRight,s=n.paddingBottomProperty.isSet(o)?this.effectivePaddingBottom:this._defaultPaddingBottom,u=n.paddingLeftProperty.isSet(o)?this.effectivePaddingLeft:this._defaultPaddingLeft
this._isPaddingRelative?t.setPaddingRelative(u,r,i,s):t.setPadding(u,r,i,s)
t.background=void 0}}
t.androidBackPressedEvent="androidBackPressed"
__decorate([s.profile],t.prototype,"onLoaded",null)
__decorate([s.profile],t.prototype,"onUnloaded",null)
__decorate([s.profile],t.prototype,"requestLayout",null)
return t}(n.ViewCommon)
t.View=v
var b=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}return t}(v)
t.ContainerView=b
var _=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){return new org.nativescript.widgets.ContentLayout(this._context)}
t.prototype._addViewToNativeVisualTree=function(t,o){void 0===o&&(o=Number.MAX_SAFE_INTEGER)
e.prototype._addViewToNativeVisualTree.call(this,t)
if(this.nativeViewProtected&&t.nativeViewProtected){n.traceEnabled()&&n.traceWrite(this+".nativeView.addView("+t+".nativeView, "+o+")",n.traceCategories.VisualTreeEvents)
this.nativeViewProtected.addView(t.nativeViewProtected,o)
t instanceof v&&this._updateNativeLayoutParams(t)
return!0}return!1}
t.prototype._updateNativeLayoutParams=function(e){this._setChildMinWidthNative(e)
this._setChildMinHeightNative(e)}
t.prototype._setChildMinWidthNative=function(e){e._setMinWidthNative(e.minWidth)}
t.prototype._setChildMinHeightNative=function(e){e._setMinHeightNative(e.minHeight)}
t.prototype._removeViewFromNativeVisualTree=function(t){e.prototype._removeViewFromNativeVisualTree.call(this,t)
var o=this.nativeViewProtected,r=t.nativeViewProtected
if(o&&r){o.removeView(r)
if(n.traceEnabled()){n.traceWrite(o+".removeView("+r+")",n.traceCategories.VisualTreeEvents)
n.traceNotifyEvent(t,"childInLayoutRemovedFromNativeVisualTree")}}}
return t}(b)
t.CustomLayoutView=_
var w=function(e,t){throw new Error("PercentLength is not supported.")}
function P(e){var t,o,r,i=e.getter,a=e.setter,s=e.auto,u=void 0===s?0:s
i&&(v.prototype[i]=function(){if(e){t=e.setPixels
o=e.getPixels
r=e.setPercent||w
e=null}var n=o(this.nativeViewProtected)
return n==u?"auto":{value:n,unit:"px"}})
a&&(v.prototype[a]=function(i){if(e){t=e.setPixels
o=e.getPixels
r=e.setPercent||w
e=null}if("auto"==i)t(this.nativeViewProtected,u)
else if("number"==typeof i)t(this.nativeViewProtected,n.layout.round(n.layout.toDevicePixels(i)))
else if("dip"==i.unit)t(this.nativeViewProtected,n.layout.round(n.layout.toDevicePixels(i.value)))
else if("px"==i.unit)t(this.nativeViewProtected,n.layout.round(i.value))
else{if("%"!=i.unit)throw new Error("Unsupported PercentLength "+i)
r(this.nativeViewProtected,i.value)}})}P({setter:i.marginTopProperty.setNative,get setPixels(){return org.nativescript.widgets.ViewHelper.setMarginTop},get setPercent(){return org.nativescript.widgets.ViewHelper.setMarginTopPercent}})
P({setter:i.marginRightProperty.setNative,get setPixels(){return org.nativescript.widgets.ViewHelper.setMarginRight},get setPercent(){return org.nativescript.widgets.ViewHelper.setMarginRightPercent}})
P({setter:i.marginBottomProperty.setNative,get setPixels(){return org.nativescript.widgets.ViewHelper.setMarginBottom},get setPercent(){return org.nativescript.widgets.ViewHelper.setMarginBottomPercent}})
P({setter:i.marginLeftProperty.setNative,get setPixels(){return org.nativescript.widgets.ViewHelper.setMarginLeft},get setPercent(){return org.nativescript.widgets.ViewHelper.setMarginLeftPercent}})
P({setter:i.widthProperty.setNative,auto:-1,get setPixels(){return org.nativescript.widgets.ViewHelper.setWidth},get setPercent(){return org.nativescript.widgets.ViewHelper.setWidthPercent}})
P({setter:i.heightProperty.setNative,auto:-1,get setPixels(){return org.nativescript.widgets.ViewHelper.setHeight},get setPercent(){return org.nativescript.widgets.ViewHelper.setHeightPercent}})
P({setter:"_setMinWidthNative",get setPixels(){return org.nativescript.widgets.ViewHelper.setMinWidth}})
P({setter:"_setMinHeightNative",get setPixels(){return org.nativescript.widgets.ViewHelper.setMinHeight}})
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/core/view/view.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/core/view/view.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
var r=new Map,n=new WeakMap,i=function(){return function(e,t){this.tagetRef=new WeakRef(e)
this.handler=t}}()
function a(e,t,o,r){if(!e)throw new Error("source is null or undefined")
if(!r)throw new Error("target is null or undefined")
if("string"!=typeof t)throw new Error("eventName is not a string")
if("function"!=typeof o)throw new Error("handler is not a function")}t.addWeakEventListener=function(e,t,o,s){a(e,t,o,s)
var u=!1,l=n.get(e)
if(!l){l=new Map
n.set(e,l)
u=!0}var c=l.get(t)
if(!c){c=new Array
l.set(t,c)
u=!0}c.push(new i(s,o))
u&&e.addEventListener(t,function(e){var t=r.get(e)
if(!t){t=function(t){var o=t.object,i=n.get(o)
if(i){var a=i.get(e)
if(a){for(var s,u,l=[],c=0;c<a.length;c++){s=a[c]
u=s.tagetRef.get()
u?s.handler.call(u,t):l.push(c)}if(l.length===a.length){o.removeEventListener(e,r.get(e))
i.delete(e)}else for(var d=l.length-1;d>=0;d--)a.splice(l[d],1)}}else o.removeEventListener(e,r.get(e))}
r.set(e,t)}return t}(t))}
t.removeWeakEventListener=function(e,t,o,i){a(e,t,o,i)
var s=r.get(t)
if(s){var u=n.get(e)
if(u){var l=u.get(t)
if(l){for(var c,d,p=[],f=0;f<l.length;f++){c=l[f]
d=c.tagetRef.get();(!d||d===i&&o===c.handler)&&p.push(f)}if(p.length===l.length){e.removeEventListener(t,s)
u.delete(t)}else for(var h=p.length-1;h>=0;h--)l.splice(p[h],1)}}}}
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/date-picker/date-picker-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
var i=new Date,a=function(e,t){return e<=t&&e>=t},s=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t=__decorate([n.CSSType("DatePicker")],t)
return t}(n.View)
t.DatePickerBase=s
s.prototype.recycleNativeView="auto"
t.yearProperty=new n.Property({name:"year",defaultValue:i.getFullYear(),valueConverter:function(e){return parseInt(e)}})
t.yearProperty.register(s)
t.monthProperty=new n.Property({name:"month",defaultValue:i.getMonth()+1,valueConverter:function(e){return parseInt(e)}})
t.monthProperty.register(s)
t.dayProperty=new n.Property({name:"day",defaultValue:i.getDate(),valueConverter:function(e){return parseInt(e)}})
t.dayProperty.register(s)
t.maxDateProperty=new n.Property({name:"maxDate",equalityComparer:a,valueConverter:function(e){return new Date(e)}})
t.maxDateProperty.register(s)
t.minDateProperty=new n.Property({name:"minDate",equalityComparer:a,valueConverter:function(e){return new Date(e)}})
t.minDateProperty.register(s)
t.dateProperty=new n.Property({name:"date",defaultValue:i,equalityComparer:a,valueConverter:function(e){return new Date(e)}})
t.dateProperty.register(s)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/date-picker/date-picker-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/date-picker/date-picker-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/date-picker/date-picker.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/ui/date-picker/date-picker-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/date-picker/date-picker-common.js"))
var a=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){var e=new android.widget.DatePicker(this._context)
e.setCalendarViewShown(!1)
return e}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
!function(){if(!n){var e=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}t.prototype.onDateChanged=function(e,t,o,r){var n=this.owner,a=!1
if(t!==n.year){i.yearProperty.nativeValueChange(n,t)
a=!0}if(o!==n.month-1){i.monthProperty.nativeValueChange(n,o+1)
a=!0}if(r!==n.day){i.dayProperty.nativeValueChange(n,r)
a=!0}a&&i.dateProperty.nativeValueChange(n,new Date(t,o,r))}
t=__decorate([Interfaces([android.widget.DatePicker.OnDateChangedListener])],t)
return t}(java.lang.Object)
n=e}}()
var t=this.nativeViewProtected,o=new n(this)
t.init(this.year,this.month-1,this.day,o)
t.listener=o}
t.prototype.disposeNativeView=function(){this.nativeViewProtected.listener.owner=null
e.prototype.disposeNativeView.call(this)}
t.prototype.updateNativeDate=function(){var e=this.nativeViewProtected,t="number"==typeof this.year?this.year:e.getYear(),o="number"==typeof this.month?this.month-1:e.getMonth(),r="number"==typeof this.day?this.day:e.getDayOfMonth()
this.date=new Date(t,o,r)}
t.prototype[i.yearProperty.setNative]=function(e){this.nativeViewProtected.getYear()!==e&&this.updateNativeDate()}
t.prototype[i.monthProperty.setNative]=function(e){this.nativeViewProtected.getMonth()!==e-1&&this.updateNativeDate()}
t.prototype[i.dayProperty.setNative]=function(e){this.nativeViewProtected.getDayOfMonth()!==e&&this.updateNativeDate()}
t.prototype[i.dateProperty.setNative]=function(e){var t=this.nativeViewProtected
t.getDayOfMonth()===e.getDate()&&t.getMonth()===e.getMonth()&&t.getYear()===e.getFullYear()||t.updateDate(e.getFullYear(),e.getMonth(),e.getDate())}
t.prototype[i.maxDateProperty.getDefault]=function(){return this.nativeViewProtected.getMaxDate()}
t.prototype[i.maxDateProperty.setNative]=function(e){var t=e instanceof Date?e.getTime():e
this.nativeViewProtected.setMaxDate(t)}
t.prototype[i.minDateProperty.getDefault]=function(){return this.nativeViewProtected.getMinDate()}
t.prototype[i.minDateProperty.setNative]=function(e){var t=e instanceof Date?e.getTime():e
this.nativeViewProtected.setMinDate(t)}
return t}(i.DatePickerBase)
t.DatePicker=a
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/date-picker/date-picker.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/date-picker/date-picker.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/dialogs/dialogs-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i,a,s,u=o("../node_modules/tns-core-modules/platform/platform.js"),l=o("../node_modules/tns-core-modules/utils/types.js")
t.STRING="string"
t.PROMPT="Prompt"
t.CONFIRM="Confirm"
t.ALERT="Alert"
t.LOGIN="Login"
t.OK="OK"
t.CANCEL="Cancel"
!function(e){e.text="text"
e.password="password"
e.email="email"
e.number="number"
e.decimal="decimal"
e.phone="phone"}(t.inputType||(t.inputType={}))
!function(e){e.none="none"
e.all="all"
e.sentences="sentences"
e.words="words"}(t.capitalizationType||(t.capitalizationType={}))
function c(){n||(n=o("../node_modules/tns-core-modules/ui/frame/frame.js"))
var e=n.topmost()
if(e)return e.currentPage}t.getCurrentPage=c
function d(e,t){var o=c()
if(o){var r=o._styleScope
if(r){e._inheritStyleScope(r)
e.onLoaded()
t(e)
e.onUnloaded()}}}t.getButtonColors=function(){if(!i){var e=o("../node_modules/tns-core-modules/ui/button/button.js").Button
i=new e
u.isIOS&&i._setupUI({})}var t,r
d(i,function(e){t=e.color
r=e.backgroundColor})
return{color:t,backgroundColor:r}}
t.getLabelColor=function(){if(!a){var e=o("../node_modules/tns-core-modules/ui/label/label.js").Label
a=new e
u.isIOS&&a._setupUI({})}var t
d(a,function(e){t=e.color})
return t}
t.getTextFieldColor=function(){if(!s){var e=o("../node_modules/tns-core-modules/ui/text-field/text-field.js").TextField
s=new e
u.isIOS&&s._setupUI({})}var t
d(s,function(e){t=e.color})
return t}
t.isDialogOptions=function(e){return e&&(e.message||e.title)}
t.parseLoginOptions=function(e){if(1===e.length&&l.isObject(e[0]))return e[0]
var o={title:t.LOGIN,okButtonText:t.OK,cancelButtonText:t.CANCEL}
l.isString(e[0])&&(o.message=e[0])
l.isString(e[1])&&(o.userNameHint=e[1])
l.isString(e[2])&&(o.passwordHint=e[2])
l.isString(e[3])&&(o.userName=e[3])
l.isString(e[4])&&(o.password=e[4])
return o}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/dialogs/dialogs-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/dialogs/dialogs-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/dialogs/dialogs.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/dialogs/dialogs-common.js"),i=o("../node_modules/tns-core-modules/application/application.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/dialogs/dialogs-common.js"))
function a(e){return"string"==typeof e}function s(e){var t=new android.app.AlertDialog.Builder(i.android.foregroundActivity)
t.setTitle(e&&a(e.title)?e.title:"")
t.setMessage(e&&a(e.message)?e.message:"")
e&&!1===e.cancelable&&t.setCancelable(!1)
return t}function u(e){var t=e.show(),o=n.getLabelColor()
if(o){var r=t.getContext().getResources().getIdentifier("android:id/alertTitle",null,null)
if(r){var i=t.findViewById(r)
i&&i.setTextColor(o.android)}var a=t.getContext().getResources().getIdentifier("android:id/message",null,null)
if(a){var s=t.findViewById(a)
s&&s.setTextColor(o.android)}}var u=n.getButtonColors(),l=u.color,c=u.backgroundColor
if(l){for(var d=[],p=0;p<3;p++){var f=t.getContext().getResources().getIdentifier("android:id/button"+p,null,null)
d[p]=t.findViewById(f)}d.forEach(function(e){if(e){l&&e.setTextColor(l.android)
c&&e.setBackgroundColor(c.android)}})}}function l(e,t,o){if(t){t.okButtonText&&e.setPositiveButton(t.okButtonText,new android.content.DialogInterface.OnClickListener({onClick:function(e,t){e.cancel()
o(!0)}}))
t.cancelButtonText&&e.setNegativeButton(t.cancelButtonText,new android.content.DialogInterface.OnClickListener({onClick:function(e,t){e.cancel()
o(!1)}}))
t.neutralButtonText&&e.setNeutralButton(t.neutralButtonText,new android.content.DialogInterface.OnClickListener({onClick:function(e,t){e.cancel()
o(void 0)}}))
e.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({onDismiss:function(){o(!1)}}))}}t.alert=function(e){return new Promise(function(t,o){try{var r=n.isDialogOptions(e)?e:{title:n.ALERT,okButtonText:n.OK,message:e+""},i=s(r)
i.setPositiveButton(r.okButtonText,new android.content.DialogInterface.OnClickListener({onClick:function(e,o){e.cancel()
t()}}))
i.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({onDismiss:function(){t()}}))
u(i)}catch(e){o(e)}})}
t.confirm=function(e){return new Promise(function(t,o){try{var r=n.isDialogOptions(e)?e:{title:n.CONFIRM,okButtonText:n.OK,cancelButtonText:n.CANCEL,message:e+""},i=s(r)
l(i,r,function(e){t(e)})
u(i)}catch(e){o(e)}})}
t.prompt=function(e){var t,o={title:n.PROMPT,okButtonText:n.OK,cancelButtonText:n.CANCEL,inputType:n.inputType.text}
if(1===arguments.length)if(a(e)){t=o
t.message=e}else t=e
else if(2===arguments.length&&a(arguments[0])&&a(arguments[1])){t=o
t.message=arguments[0]
t.defaultText=arguments[1]}return new Promise(function(e,o){try{var r=s(t),a=new android.widget.EditText(i.android.foregroundActivity)
if(t){t.inputType===n.inputType.password?a.setInputType(android.text.InputType.TYPE_CLASS_TEXT|android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD):t.inputType===n.inputType.email?a.setInputType(android.text.InputType.TYPE_CLASS_TEXT|android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS):t.inputType===n.inputType.number?a.setInputType(android.text.InputType.TYPE_CLASS_NUMBER):t.inputType===n.inputType.decimal?a.setInputType(android.text.InputType.TYPE_CLASS_NUMBER|android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL):t.inputType===n.inputType.phone&&a.setInputType(android.text.InputType.TYPE_CLASS_PHONE)
switch(t.capitalizationType){case n.capitalizationType.all:a.setInputType(a.getInputType()|android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS)
break
case n.capitalizationType.sentences:a.setInputType(a.getInputType()|android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES)
break
case n.capitalizationType.words:a.setInputType(a.getInputType()|android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS)}}a.setText(t&&t.defaultText||"")
r.setView(a)
l(r,t,function(t){e({result:t,text:a.getText().toString()})})
u(r)}catch(e){o(e)}})}
t.login=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]
var o=n.parseLoginOptions(e)
return new Promise(function(e,t){try{var r=i.android.foregroundActivity,n=s(o),a=new android.widget.EditText(r)
a.setHint(o.userNameHint?o.userNameHint:"")
a.setText(o.userName?o.userName:"")
var c=new android.widget.EditText(r)
c.setInputType(android.text.InputType.TYPE_CLASS_TEXT|android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD)
c.setTypeface(android.graphics.Typeface.DEFAULT)
c.setHint(o.passwordHint?o.passwordHint:"")
c.setText(o.password?o.password:"")
var d=new android.widget.LinearLayout(r)
d.setOrientation(1)
d.addView(a)
d.addView(c)
n.setView(d)
l(n,o,function(t){e({result:t,userName:a.getText().toString(),password:c.getText().toString()})})
u(n)}catch(e){t(e)}})}
t.action=function(e){var t,o={title:null,cancelButtonText:n.CANCEL}
if(1===arguments.length)if(a(arguments[0])){t=o
t.message=arguments[0]}else t=arguments[0]
else if(2===arguments.length){if(a(arguments[0])&&a(arguments[1])){t=o
t.message=arguments[0]
t.cancelButtonText=arguments[1]}}else if(3===arguments.length&&a(arguments[0])&&a(arguments[1])&&void 0!==arguments[2]){t=o
t.message=arguments[0]
t.cancelButtonText=arguments[1]
t.actions=arguments[2]}return new Promise(function(e,o){try{var r=i.android.foregroundActivity||i.android.startActivity,n=new android.app.AlertDialog.Builder(r),s=t&&a(t.message)?t.message:"",l=t&&a(t.title)?t.title:""
t&&!1===t.cancelable&&n.setCancelable(!1)
if(l){n.setTitle(l)
t.actions||n.setMessage(s)}else n.setTitle(s)
t.actions&&n.setItems(t.actions,new android.content.DialogInterface.OnClickListener({onClick:function(o,r){e(t.actions[r])}}))
a(t.cancelButtonText)&&n.setNegativeButton(t.cancelButtonText,new android.content.DialogInterface.OnClickListener({onClick:function(o,r){o.cancel()
e(t.cancelButtonText)}}))
n.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({onDismiss:function(){a(t.cancelButtonText)?e(t.cancelButtonText):e("")}}))
u(n)}catch(e){o(e)}})}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/dialogs/dialogs.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/dialogs/dialogs.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/text-base/text-base.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/text-base/text-base.js"))
var i=function(e){__extends(t,e)
function t(){var t=null!==e&&e.apply(this,arguments)||this
t._focusHandler=function(){return t._goToVisualState("focus")}
t._blurHandler=function(){return t._goToVisualState("blur")}
return t}t.prototype._updateTextBaseFocusStateHandler=function(e){var t=e?"on":"off"
this[t]("focus",this._focusHandler)
this[t]("blur",this._blurHandler)}
t.blurEvent="blur"
t.focusEvent="focus"
t.textChangeEvent="textChange"
__decorate([n.PseudoClassHandler("focus","blur")],t.prototype,"_updateTextBaseFocusStateHandler",null)
return t}(n.TextBase)
t.EditableTextBase=i
t.placeholderColorProperty=new n.CssProperty({name:"placeholderColor",cssName:"placeholder-color",equalityComparer:n.Color.equals,valueConverter:function(e){return new n.Color(e)}})
t.placeholderColorProperty.register(n.Style)
var a=n.makeParser(n.makeValidator("datetime","phone","number","url","email"))
t.keyboardTypeProperty=new n.Property({name:"keyboardType",valueConverter:a})
t.keyboardTypeProperty.register(i)
var s=n.makeParser(n.makeValidator("done","next","go","search","send"))
t.returnKeyTypeProperty=new n.Property({name:"returnKeyType",valueConverter:s})
t.returnKeyTypeProperty.register(i)
t.editableProperty=new n.Property({name:"editable",defaultValue:!0,valueConverter:n.booleanConverter})
t.editableProperty.register(i)
t.updateTextTriggerProperty=new n.Property({name:"updateTextTrigger",defaultValue:"textChanged"})
t.updateTextTriggerProperty.register(i)
var u=n.makeParser(n.makeValidator("none","words","sentences","allcharacters"))
t.autocapitalizationTypeProperty=new n.Property({name:"autocapitalizationType",defaultValue:"sentences",valueConverter:u})
t.autocapitalizationTypeProperty.register(i)
t.autocorrectProperty=new n.Property({name:"autocorrect",valueConverter:n.booleanConverter})
t.autocorrectProperty.register(i)
t.hintProperty=new n.Property({name:"hint",defaultValue:""})
t.hintProperty.register(i)
t.maxLengthProperty=new n.Property({name:"maxLength",defaultValue:Number.POSITIVE_INFINITY,valueConverter:parseInt})
t.maxLengthProperty.register(i)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/editable-text-base/editable-text-base-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/editable-text-base/editable-text-base-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base-common.js"),a=o("../node_modules/tns-core-modules/utils/utils.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base-common.js"))
function s(){t.dismissKeyboardOwner=null
if(t.dismissKeyboardTimeoutId){clearTimeout(t.dismissKeyboardTimeoutId)
t.dismissKeyboardTimeoutId=null}}function u(){if(!n){var e=function(e){__extends(o,e)
function o(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}o.prototype.beforeTextChanged=function(e,t,o,r){}
o.prototype.onTextChanged=function(e,t,o,r){}
o.prototype.afterTextChanged=function(e){var t=this.owner
if(t&&!t._changeFromCode)switch(t.updateTextTrigger){case"focusLost":t._dirtyTextAccumulator=e.toString()
break
case"textChanged":i.textProperty.nativeValueChange(t,e.toString())
break
default:throw new Error("Invalid updateTextTrigger: "+t.updateTextTrigger)}}
o.prototype.onFocusChange=function(e,o){var r=this.owner
if(r)if(o){s()
r.notify({eventName:l.focusEvent,object:r})}else{if(r._dirtyTextAccumulator||""===r._dirtyTextAccumulator){i.textProperty.nativeValueChange(r,r._dirtyTextAccumulator)
r._dirtyTextAccumulator=void 0}r.notify({eventName:l.blurEvent,object:r})
!function(e){s()
t.dismissKeyboardTimeoutId||(t.dismissKeyboardTimeoutId=setTimeout(function(){var e=t.dismissKeyboardOwner&&t.dismissKeyboardOwner.get(),o=e&&e._context,r=e&&e.nativeViewProtected
t.dismissKeyboardTimeoutId=null
t.dismissKeyboardOwner=null
var n=o&&o.getCurrentFocus()
n&&n instanceof android.widget.EditText||a.ad.dismissSoftInput(r)},10))}()}}
o.prototype.onEditorAction=function(e,t,o){var r=this.owner
if(!r)return!1
if(t===android.view.inputmethod.EditorInfo.IME_ACTION_DONE||t===android.view.inputmethod.EditorInfo.IME_ACTION_UNSPECIFIED||o&&o.getKeyCode()===android.view.KeyEvent.KEYCODE_ENTER){1===e.getMaxLines()&&r.dismissSoftInput()
r._onReturnPress()}else t!==android.view.inputmethod.EditorInfo.IME_ACTION_NEXT&&t!==android.view.inputmethod.EditorInfo.IME_ACTION_PREVIOUS||r._onReturnPress()
return!1}
o=__decorate([Interfaces([android.text.TextWatcher,android.view.View.OnFocusChangeListener,android.widget.TextView.OnEditorActionListener])],o)
return o}(java.lang.Object)
n=e}}var l=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype._onReturnPress=function(){}
t.prototype.createNativeView=function(){return new android.widget.EditText(this._context)}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
var t=this.nativeTextViewProtected
this._configureEditText(t)
u()
var o=new n(this)
t.addTextChangedListener(o)
t.setOnFocusChangeListener(o)
t.setOnEditorActionListener(o)
t.listener=o
this._inputType=t.getInputType()}
t.prototype.disposeNativeView=function(){this.nativeTextViewProtected.listener.owner=null
this._keyListenerCache=null
e.prototype.disposeNativeView.call(this)}
t.prototype.resetNativeView=function(){e.prototype.resetNativeView.call(this)
this.nativeTextViewProtected.setInputType(this._inputType)}
t.prototype.onUnloaded=function(){this.dismissSoftInput()
e.prototype.onUnloaded.call(this)}
t.prototype.dismissSoftInput=function(){var e=this.nativeTextViewProtected
e&&a.ad.dismissSoftInput(e)}
t.prototype.focus=function(){var t=this.nativeTextViewProtected
if(t){var o=e.prototype.focus.call(this)
o&&a.ad.showSoftInput(this.nativeTextViewProtected)
return o}}
t.prototype._setInputType=function(e){var t=this.nativeTextViewProtected
try{this._changeFromCode=!0
t.setInputType(e)}finally{this._changeFromCode=!1}var o=t.getKeyListener()
o&&(this._keyListenerCache=o)
this.editable||t.setKeyListener(null)}
t.prototype[i.textProperty.getDefault]=function(){return i.resetSymbol}
t.prototype[i.textProperty.setNative]=function(e){try{this._changeFromCode=!0
this._setNativeText(e===i.resetSymbol)}finally{this._changeFromCode=!1}}
t.prototype[i.keyboardTypeProperty.getDefault]=function(){return this.nativeTextViewProtected.getInputType()}
t.prototype[i.keyboardTypeProperty.setNative]=function(e){var t
switch(e){case"datetime":t=android.text.InputType.TYPE_CLASS_DATETIME|android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL
break
case"phone":t=android.text.InputType.TYPE_CLASS_PHONE
break
case"number":t=android.text.InputType.TYPE_CLASS_NUMBER|android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL|android.text.InputType.TYPE_NUMBER_FLAG_SIGNED|android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL
break
case"url":t=android.text.InputType.TYPE_CLASS_TEXT|android.text.InputType.TYPE_TEXT_VARIATION_URI
break
case"email":t=android.text.InputType.TYPE_CLASS_TEXT|android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS
break
default:t=e}this._setInputType(t)}
t.prototype[i.returnKeyTypeProperty.getDefault]=function(){var e=this.nativeTextViewProtected.getImeOptions()
switch(e){case android.view.inputmethod.EditorInfo.IME_ACTION_DONE:return"done"
case android.view.inputmethod.EditorInfo.IME_ACTION_GO:return"go"
case android.view.inputmethod.EditorInfo.IME_ACTION_NEXT:return"next"
case android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH:return"search"
case android.view.inputmethod.EditorInfo.IME_ACTION_SEND:return"send"
default:return e.toString()}}
t.prototype[i.returnKeyTypeProperty.setNative]=function(e){var t
switch(e){case"done":t=android.view.inputmethod.EditorInfo.IME_ACTION_DONE
break
case"go":t=android.view.inputmethod.EditorInfo.IME_ACTION_GO
break
case"next":t=android.view.inputmethod.EditorInfo.IME_ACTION_NEXT
break
case"search":t=android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH
break
case"send":t=android.view.inputmethod.EditorInfo.IME_ACTION_SEND
break
default:var o=+e
t=isNaN(o)?android.view.inputmethod.EditorInfo.IME_ACTION_UNSPECIFIED:o}this.nativeTextViewProtected.setImeOptions(t)}
t.prototype[i.editableProperty.setNative]=function(e){var t=this.nativeTextViewProtected
if(e)t.setKeyListener(this._keyListenerCache)
else{this._keyListenerCache||(this._keyListenerCache=t.getKeyListener())
t.setKeyListener(null)}}
t.prototype[i.autocapitalizationTypeProperty.getDefault]=function(){var e=this.nativeTextViewProtected.getInputType()
return(e&android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS)===android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS?"words":(e&android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES)===android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES?"sentences":(e&android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS)===android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS?"allcharacters":e.toString()}
t.prototype[i.autocapitalizationTypeProperty.setNative]=function(e){var t=this.nativeTextViewProtected.getInputType()
t&=-28673
switch(e){case"none":break
case"words":t|=android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS
break
case"sentences":t|=android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES
break
case"allcharacters":t|=android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS
break
default:var o=+e
isNaN(o)?t|=android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES:t=o}this._setInputType(t)}
t.prototype[i.autocorrectProperty.getDefault]=function(){var e=this.nativeTextViewProtected.getInputType()
return(e&android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT)===android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT}
t.prototype[i.autocorrectProperty.setNative]=function(e){var t=this.nativeTextViewProtected.getInputType()
switch(e){case!0:t|=android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE
t|=android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT
t&=~android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS
break
case!1:t&=~android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE
t&=~android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT
t|=android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS}this._setInputType(t)}
t.prototype[i.hintProperty.getDefault]=function(){return this.nativeTextViewProtected.getHint()}
t.prototype[i.hintProperty.setNative]=function(e){var t=null==e?null:e.toString()
this.nativeTextViewProtected.setHint(t)}
t.prototype[i.placeholderColorProperty.getDefault]=function(){return this.nativeTextViewProtected.getHintTextColors()}
t.prototype[i.placeholderColorProperty.setNative]=function(e){var t=e instanceof i.Color?e.android:e
this.nativeTextViewProtected.setHintTextColor(t)}
t.prototype[i.textTransformProperty.setNative]=function(e){}
t.prototype[i.maxLengthProperty.setNative]=function(e){if(e===Number.POSITIVE_INFINITY)this.nativeTextViewProtected.setFilters([])
else{for(var t=new android.text.InputFilter.LengthFilter(e),o=this.nativeTextViewProtected.getFilters(),r=[],n=0;n<o.length;n++){var i=o[n]
i instanceof android.text.InputFilter.LengthFilter||r.push(i)}r.push(t)
this.nativeTextViewProtected.setFilters(r)}}
return t}(i.EditableTextBase)
t.EditableTextBase=l
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/enums/enums.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n
!function(e){e.datetime="datetime"
e.phone="phone"
e.number="number"
e.url="url"
e.email="email"}(t.KeyboardType||(t.KeyboardType={}))
!function(e){e.done="done"
e.next="next"
e.go="go"
e.search="search"
e.send="send"}(t.ReturnKeyType||(t.ReturnKeyType={}))
!function(e){e.left="left"
e.center="center"
e.right="right"}(t.TextAlignment||(t.TextAlignment={}))
!function(e){e.none="none"
e.underline="underline"
e.lineThrough="line-through"}(t.TextDecoration||(t.TextDecoration={}))
!function(e){e.none="none"
e.capitalize="capitalize"
e.uppercase="uppercase"
e.lowercase="lowercase"}(t.TextTransform||(t.TextTransform={}))
!function(e){e.normal="normal"
e.nowrap="nowrap"}(t.WhiteSpace||(t.WhiteSpace={}))
!function(e){e.horizontal="horizontal"
e.vertical="vertical"}(t.Orientation||(t.Orientation={}))
!function(e){e.portrait="portrait"
e.landscape="landscape"
e.unknown="unknown"}(t.DeviceOrientation||(t.DeviceOrientation={}))
!function(e){e.left="left"
e.center="center"
e.right="right"
e.stretch="stretch"}(t.HorizontalAlignment||(t.HorizontalAlignment={}))
!function(e){e.top="top"
e.middle="middle"
e.bottom="bottom"
e.stretch="stretch"}(t.VerticalAlignment||(t.VerticalAlignment={}))
!function(e){e.none="none"
e.aspectFill="aspectFill"
e.aspectFit="aspectFit"
e.fill="fill"}(t.Stretch||(t.Stretch={}))
!function(e){e.visible="visible"
e.collapse="collapse"
e.collapsed="collapsed"}(t.Visibility||(t.Visibility={}))
!function(e){e.Normal=0
e.Bold=1
e.Italic=2}(t.FontAttributes||(t.FontAttributes={}))
!function(e){e.Phone="Phone"
e.Tablet="Tablet"}(t.DeviceType||(t.DeviceType={}))
!function(e){e.focusLost="focusLost"
e.textChanged="textChanged"}(t.UpdateTextTrigger||(t.UpdateTextTrigger={}))
!function(e){e.any=300
e.high=3}(t.Accuracy||(t.Accuracy={}))
!function(e){e.left="left"
e.top="top"
e.right="right"
e.bottom="bottom"}(t.Dock||(t.Dock={}))
!function(e){e.none="none"
e.words="words"
e.sentences="sentences"
e.allCharacters="allcharacters"}(t.AutocapitalizationType||(t.AutocapitalizationType={}))
!function(e){e.auto="auto"
e.never="never"
e.always="always"}(t.NavigationBarVisibility||(t.NavigationBarVisibility={}))
!function(e){e.auto="auto"
e.never="never"
e.always="always"}(t.AndroidActionBarIconVisibility||(t.AndroidActionBarIconVisibility={}))
!function(e){e.actionBar="actionBar"
e.actionBarIfRoom="actionBarIfRoom"
e.popup="popup"}(t.AndroidActionItemPosition||(t.AndroidActionItemPosition={}))
!function(e){e.left="left"
e.right="right"}(t.IOSActionItemPosition||(t.IOSActionItemPosition={}))
!function(e){e.png="png"
e.jpeg="jpeg"
e.jpg="jpg"}(t.ImageFormat||(t.ImageFormat={}))
!function(e){e.normal="normal"
e.italic="italic"}(t.FontStyle||(t.FontStyle={}))
!function(e){e.thin="100"
e.extraLight="200"
e.light="300"
e.normal="normal"
e.medium="500"
e.semiBold="600"
e.bold="bold"
e.extraBold="800"
e.black="900"}(t.FontWeight||(t.FontWeight={}))
!function(e){e.repeat="repeat"
e.repeatX="repeat-x"
e.repeatY="repeat-y"
e.noRepeat="no-repeat"}(t.BackgroundRepeat||(t.BackgroundRepeat={}))
!function(e){e.ease="ease"
e.easeIn="easeIn"
e.easeOut="easeOut"
e.easeInOut="easeInOut"
e.linear="linear"
e.spring="spring"
e.cubicBezier=function(e,t,r,i){n=n||o("../node_modules/tns-core-modules/ui/animation/animation.js")
return new n.CubicBezierAnimationCurve(e,t,r,i)}}(t.AnimationCurve||(t.AnimationCurve={}))
!function(e){e.light="light"
e.dark="dark"}(t.StatusBarStyle||(t.StatusBarStyle={}))
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/enums/enums.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/enums/enums.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/frame/activity.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/frame/frame.js"),i=o("../node_modules/tns-core-modules/globals/globals.js"),a=o("../node_modules/tns-core-modules/application/application.js");(r.__snapshot||r.__snapshotEnabled)&&i.install()
!function(e){__extends(t,e)
function t(){var t=e.call(this)||this
return r.__native(t)}t.prototype.onCreate=function(t){a.android.init(this.getApplication())
this.isNativeScriptActivity=!0
this._callbacks||n.setActivityCallbacks(this)
this._callbacks.onCreate(this,t,this.getIntent(),e.prototype.onCreate)}
t.prototype.onNewIntent=function(t){this._callbacks.onNewIntent(this,t,e.prototype.setIntent,e.prototype.onNewIntent)}
t.prototype.onSaveInstanceState=function(t){this._callbacks.onSaveInstanceState(this,t,e.prototype.onSaveInstanceState)}
t.prototype.onStart=function(){this._callbacks.onStart(this,e.prototype.onStart)}
t.prototype.onStop=function(){this._callbacks.onStop(this,e.prototype.onStop)}
t.prototype.onDestroy=function(){this._callbacks.onDestroy(this,e.prototype.onDestroy)}
t.prototype.onPostResume=function(){this._callbacks.onPostResume(this,e.prototype.onPostResume)}
t.prototype.onBackPressed=function(){this._callbacks.onBackPressed(this,e.prototype.onBackPressed)}
t.prototype.onRequestPermissionsResult=function(e,t,o){this._callbacks.onRequestPermissionsResult(this,e,t,o,void 0)}
t.prototype.onActivityResult=function(t,o,r){this._callbacks.onActivityResult(this,t,o,r,e.prototype.onActivityResult)}
t=__decorate([JavaProxy("com.tns.NativeScriptActivity")],t)}(androidx.appcompat.app.AppCompatActivity)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/frame/activity.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/frame/activity.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/frame/fragment.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/frame/frame.js"),i=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
return r.__native(t)}t.prototype.onHiddenChanged=function(t){this._callbacks.onHiddenChanged(this,t,e.prototype.onHiddenChanged)}
t.prototype.onCreateAnimator=function(t,o,r){return this._callbacks.onCreateAnimator(this,t,o,r,e.prototype.onCreateAnimator)}
t.prototype.onStop=function(){this._callbacks.onStop(this,e.prototype.onStop)}
t.prototype.onCreate=function(t){this._callbacks||n.setFragmentCallbacks(this)
this.setHasOptionsMenu(!0)
this._callbacks.onCreate(this,t,e.prototype.onCreate)}
t.prototype.onCreateView=function(t,o,r){var n=this._callbacks.onCreateView(this,t,o,r,e.prototype.onCreateView)
return n}
t.prototype.onSaveInstanceState=function(t){this._callbacks.onSaveInstanceState(this,t,e.prototype.onSaveInstanceState)}
t.prototype.onDestroyView=function(){this._callbacks.onDestroyView(this,e.prototype.onDestroyView)}
t.prototype.onDestroy=function(){this._callbacks.onDestroy(this,e.prototype.onDestroy)}
t.prototype.toString=function(){var t=this._callbacks
if(t)return t.toStringOverride(this,e.prototype.toString)
e.prototype.toString.call(this)}
t=__decorate([JavaProxy("com.tns.FragmentClass")],t)
return t}(org.nativescript.widgets.FragmentBase)
n.setFragmentClass(i)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/frame/fragment.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/frame/fragment.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/frame/fragment.transitions.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i,a=o("../node_modules/tns-core-modules/ui/frame/frame-common.js"),s=o("../node_modules/tns-core-modules/ui/transition/transition.js"),u=o("../node_modules/tns-core-modules/ui/transition/slide-transition.js"),l=o("../node_modules/tns-core-modules/ui/transition/fade-transition.js"),c=o("../node_modules/tns-core-modules/ui/transition/flip-transition.js"),d=o("../node_modules/tns-core-modules/ui/animation/animation.js"),p=o("../node_modules/tns-core-modules/platform/platform.js"),f=o("../node_modules/tns-core-modules/utils/lazy.js"),h=o("../node_modules/tns-core-modules/trace/trace.js"),m=f.default(function(){return parseInt(p.device.sdkVersion)}),y=f.default(function(){return new android.animation.IntEvaluator}),g=f.default(function(){return new android.view.animation.AccelerateDecelerateInterpolator})
t.waitingQueue=new Map
t.completedEntries=new Map
t._setAndroidFragmentTransitions=function(e,o,r,n,i,a){var d=r?r.fragment:null,p=n.fragment,f=t.waitingQueue.get(a)
if(f&&f.size>0)throw new Error("Calling navigation before previous navigation finish.")
if(m()>=21){T(d)
T(p)}var h,y=""
if(o){h=o.instance
y=o.name?o.name.toLowerCase():""}var g=!(!y||0!==y.indexOf("slide")&&"fade"!==y&&"explode"!==y||!(m()>=21))
d&&d.getChildFragmentManager()&&d.getChildFragmentManager().getFragments().toArray().length>0&&(g=!1)
n.useLollipopTransition=g
if(e)if(h){y="custom"
g=!1}else g||0===y.indexOf("slide")||"fade"===y||0===y.indexOf("flip")||(y="default")
else y="none"
var v=!1
if(r){b(r)
if(r.transitionName!==y||r.transition!==h||!!r.useLollipopTransition!==g||!g){C(r,!0)
v=!0}}if("none"===y)h=new B(0,null)
else if("default"===y)h=new l.FadeTransition(150,null)
else if(g){if(0===y.indexOf("slide")){!function(e,t,o){E(e,t,o)
var r=o.substr("slide".length)||"left"
switch(r){case"left":x(e,t,new android.transition.Slide(android.view.Gravity.RIGHT))
L(e,t,new android.transition.Slide(android.view.Gravity.RIGHT))
break
case"right":x(e,t,new android.transition.Slide(android.view.Gravity.LEFT))
L(e,t,new android.transition.Slide(android.view.Gravity.LEFT))
break
case"top":x(e,t,new android.transition.Slide(android.view.Gravity.BOTTOM))
L(e,t,new android.transition.Slide(android.view.Gravity.BOTTOM))
break
case"bottom":x(e,t,new android.transition.Slide(android.view.Gravity.TOP))
L(e,t,new android.transition.Slide(android.view.Gravity.TOP))}}(o,n,y)
v&&E(o,r,y)}else if("fade"===y){!function(e,t){V(e,t)
var o=new android.transition.Fade(android.transition.Fade.IN)
x(e,t,o)
var r=new android.transition.Fade(android.transition.Fade.OUT)
L(e,t,r)}(o,n)
v&&V(o,r)}else if("explode"===y){!function(e,t){N(e,t)
x(e,t,new android.transition.Explode)
L(e,t,new android.transition.Explode)}(o,n)
v&&N(o,r)}}else if(0===y.indexOf("slide")){var w=y.substr("slide".length)||"left"
h=new u.SlideTransition(w,o.duration,o.curve)}else if("fade"===y)h=new l.FadeTransition(o.duration,o.curve)
else if(0===y.indexOf("flip")){w=y.substr("flip".length)||"right"
h=new c.FlipTransition(w,o.duration,o.curve)}n.transitionName=y
"custom"===y&&(n.transition=h)
if(h){i&&i.setCustomAnimations(-10,-20)
!function(e,t){A(e,t)
var o=_(),r=t.createAndroidAnimator(s.AndroidTransitionType.enter)
r.transitionType=s.AndroidTransitionType.enter
r.entry=e
r.addListener(o)
e.enterAnimator=r
var n=t.createAndroidAnimator(s.AndroidTransitionType.popExit)
n.transitionType=s.AndroidTransitionType.popExit
n.entry=e
n.addListener(o)
e.popExitAnimator=n}(n,h)
v&&A(r,h)}if(r){r.transitionName=y
"custom"===y&&(r.transition=h)}!function(e,t){var o=_(),r=t.createAndroidAnimator(s.AndroidTransitionType.enter)
r.transitionType=s.AndroidTransitionType.enter
r.entry=e
r.addListener(o)
e.defaultEnterAnimator=r
var n=t.createAndroidAnimator(s.AndroidTransitionType.exit)
n.transitionType=s.AndroidTransitionType.exit
n.entry=e
n.addListener(o)
e.defaultExitAnimator=n}(n,new l.FadeTransition(150,null))
R(r)
R(n)}
t._onFragmentCreateAnimator=function(e,t,o,r){var n
switch(o){case-10:n=e.enterAnimator||e.defaultEnterAnimator
break
case-20:n=e.exitAnimator||e.defaultExitAnimator
break
case-30:n=e.popEnterAnimator
break
case-40:n=e.popExitAnimator}if(!n&&m()>=21){var i=t.getView(),a=e.resolvedPage.parent,s=i.getParent()||a&&a.nativeViewProtected,u=v(e.frameId)
u&&u.has(e)||s&&!s.isLaidOut()&&(n=r?e.defaultEnterAnimator:e.defaultExitAnimator)}return n}
function v(e){return t.waitingQueue.get(e)}t._getAnimatedEntries=v
function b(e){var t=e.fragment,o=e.enterTransitionListener
o&&t&&t.setEnterTransition(o.transition)
var r=e.exitTransitionListener
r&&t&&t.setExitTransition(r.transition)
var n=e.reenterTransitionListener
n&&t&&t.setReenterTransition(n.transition)
var i=e.returnTransitionListener
i&&t&&t.setReturnTransition(i.transition)}t._updateTransitions=b
t._reverseTransitions=function(e,t){var o=e.fragment,r=t.fragment,n=!1
if(m()>=21){var i=t.returnTransitionListener
if(i){n=!0
r.setExitTransition(i.transition)}else r.setExitTransition(null)
var a=e.reenterTransitionListener
if(a){n=!0
o.setEnterTransition(a.transition)}else o.setEnterTransition(null)}return n}
function _(){if(!i){var e=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
return r.__native(t)}t.prototype.onAnimationStart=function(e){var t=e.entry
w(t)
h.isEnabled()&&h.write("START "+e.transitionType+" for "+t.fragmentTag,h.categories.Transition)}
t.prototype.onAnimationRepeat=function(e){h.isEnabled()&&h.write("REPEAT "+e.transitionType+" for "+e.entry.fragmentTag,h.categories.Transition)}
t.prototype.onAnimationEnd=function(e){h.isEnabled()&&h.write("END "+e.transitionType+" for "+e.entry.fragmentTag,h.categories.Transition)
O(e.entry)}
t.prototype.onAnimationCancel=function(e){h.isEnabled()&&h.write("CANCEL "+e.transitionType+" for "+e.entry.fragmentTag,h.categories.Transition)}
t=__decorate([Interfaces([android.animation.Animator.AnimatorListener])],t)
return t}(java.lang.Object)
i=new e}return i}function w(e){var o=e.frameId,r=t.waitingQueue.get(o)
if(!r){r=new Set
t.waitingQueue.set(o,r)}r.add(e)}function P(e,t){if(e){e.removeListener(t)
if(e.entry&&h.isEnabled()){var o=e.entry
h.write("Clear "+e.transitionType+" - "+o.transition+" for "+o.fragmentTag,h.categories.Transition)}e.entry=null}}function C(e,t){if(m()>=21){var o=e.fragment,r=e.exitTransitionListener
if(r){var n=o.getExitTransition()
if(n){t&&n.removeListener(r)
o.setExitTransition(null)
h.isEnabled()&&h.write("Cleared Exit "+n.getClass().getSimpleName()+" transition for "+o,h.categories.Transition)}t&&(e.exitTransitionListener=null)}var i=e.reenterTransitionListener
if(i){var a=o.getReenterTransition()
if(a){t&&a.removeListener(i)
o.setReenterTransition(null)
h.isEnabled()&&h.write("Cleared Reenter "+a.getClass().getSimpleName()+" transition for "+o,h.categories.Transition)}t&&(e.reenterTransitionListener=null)}}}t._clearFragment=function(e){S(e,!1)}
t._clearEntry=function(e){S(e,!0)}
function S(e,t){C(e,t)
if(m()>=21){var o=e.fragment,r=e.enterTransitionListener
if(r){var n=o.getEnterTransition()
if(n){t&&n.removeListener(r)
o.setEnterTransition(null)
h.isEnabled()&&h.write("Cleared Enter "+n.getClass().getSimpleName()+" transition for "+o,h.categories.Transition)}t&&(e.enterTransitionListener=null)}var i=e.returnTransitionListener
if(i){var a=o.getReturnTransition()
if(a){t&&a.removeListener(i)
o.setReturnTransition(null)
h.isEnabled()&&h.write("Cleared Return "+a.getClass().getSimpleName()+" transition for "+o,h.categories.Transition)}t&&(e.returnTransitionListener=null)}}if(t){var s=_()
P(e.enterAnimator,s)
P(e.exitAnimator,s)
P(e.popEnterAnimator,s)
P(e.popExitAnimator,s)
P(e.defaultEnterAnimator,s)
P(e.defaultExitAnimator,s)}}function T(e){if(e){e.setAllowEnterTransitionOverlap(!0)
e.setAllowReturnTransitionOverlap(!0)}}function x(e,t,o){k(e,o)
var r=F(t,o)
t.enterTransitionListener=r
var n=t.fragment
n.setEnterTransition(o)}function I(e,t,o){k(e,o)
var r=F(t,o)
t.exitTransitionListener=r
var n=t.fragment
n.setExitTransition(o)}function j(e,t,o){k(e,o)
var r=F(t,o)
t.reenterTransitionListener=r
var n=t.fragment
n.setReenterTransition(o)}function L(e,t,o){k(e,o)
var r=F(t,o)
t.returnTransitionListener=r
var n=t.fragment
n.setReturnTransition(o)}function E(e,t,o){var r=o.substr("slide".length)||"left"
switch(r){case"left":I(e,t,new android.transition.Slide(android.view.Gravity.LEFT))
j(e,t,new android.transition.Slide(android.view.Gravity.LEFT))
break
case"right":I(e,t,new android.transition.Slide(android.view.Gravity.RIGHT))
j(e,t,new android.transition.Slide(android.view.Gravity.RIGHT))
break
case"top":I(e,t,new android.transition.Slide(android.view.Gravity.TOP))
j(e,t,new android.transition.Slide(android.view.Gravity.TOP))
break
case"bottom":I(e,t,new android.transition.Slide(android.view.Gravity.BOTTOM))
j(e,t,new android.transition.Slide(android.view.Gravity.BOTTOM))}}function V(e,t){var o=new android.transition.Fade(android.transition.Fade.OUT)
I(e,t,o)
var r=new android.transition.Fade(android.transition.Fade.IN)
j(e,t,r)}function N(e,t){I(e,t,new android.transition.Explode)
j(e,t,new android.transition.Explode)}function A(e,t){var o=_()
P(e.exitAnimator,o)
P(e.popEnterAnimator,o)
var r=t.createAndroidAnimator(s.AndroidTransitionType.exit)
r.transitionType=s.AndroidTransitionType.exit
r.entry=e
r.addListener(o)
e.exitAnimator=r
var n=t.createAndroidAnimator(s.AndroidTransitionType.popEnter)
n.transitionType=s.AndroidTransitionType.popEnter
n.entry=e
n.addListener(o)
e.popEnterAnimator=n}function k(e,t){e.duration&&t.setDuration(e.duration)
var o=e.curve?d._resolveAnimationCurve(e.curve):g()
t.setInterpolator(o)}function F(e,t){var o=function(e,t){if(!n){var o=function(e){__extends(t,e)
function t(t,o){var n=e.call(this)||this
n.entry=t
n.transition=o
return r.__native(n)}t.prototype.onTransitionStart=function(e){var t=this.entry
w(t)
h.isEnabled()&&h.write("START "+M(e)+" transition for "+t.fragmentTag,h.categories.Transition)}
t.prototype.onTransitionEnd=function(e){var t=this.entry
h.isEnabled()&&h.write("END "+M(e)+" transition for "+t.fragmentTag,h.categories.Transition)
O(t)}
t.prototype.onTransitionResume=function(e){if(h.isEnabled()){var t=this.entry.fragmentTag
h.write("RESUME "+M(e)+" transition for "+t,h.categories.Transition)}}
t.prototype.onTransitionPause=function(e){h.isEnabled()&&h.write("PAUSE "+M(e)+" transition for "+this.entry.fragmentTag,h.categories.Transition)}
t.prototype.onTransitionCancel=function(e){h.isEnabled()&&h.write("CANCEL "+M(e)+" transition for "+this.entry.fragmentTag,h.categories.Transition)}
t=__decorate([Interfaces([android.transition.Transition.TransitionListener])],t)
return t}(java.lang.Object)
n=o}return new n(e,t)}(e,t)
t.addListener(o)
return o}function O(e){var o=e.frameId,r=t.waitingQueue.get(o)
if(r){r.delete(e)
if(0===r.size){var n=e.resolvedPage.frame,i=t.completedEntries.get(o)
t.completedEntries.delete(o)
t.waitingQueue.delete(o)
var s=n._executingContext||{navigationType:a.NavigationType.back},u=n.isCurrent(e)?i:e
u=u||e
u&&setTimeout(function(){return n.setCurrent(u,s.navigationType)})}else t.completedEntries.set(o,e)}}function M(e){return e.getClass().getSimpleName()+"@"+e.hashCode().toString(16)}function R(e){if(e&&h.isEnabled()){var t=e.fragmentTag+" Transitions:"
e.transitionName&&(t+="transitionName="+e.transitionName+", ")
if(e.transition){t+="enterAnimator="+e.enterAnimator+", "
t+="exitAnimator="+e.exitAnimator+", "
t+="popEnterAnimator="+e.popEnterAnimator+", "
t+="popExitAnimator="+e.popExitAnimator+", "}if(m()>=21){var o=e.fragment
t+=o.getEnterTransition()?" enter="+M(o.getEnterTransition()):""
t+=o.getExitTransition()?" exit="+M(o.getExitTransition()):""
t+=o.getReenterTransition()?" popEnter="+M(o.getReenterTransition()):""
t+=o.getReturnTransition()?" popExit="+M(o.getReturnTransition()):""}h.write(t,h.categories.Transition)}}function D(){var e=android.animation.ValueAnimator.ofObject(y(),function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]
var o=Array.create(java.lang.Object,e.length)
e.forEach(function(e,t){return o[t]=e})
return o}(java.lang.Integer.valueOf(0),java.lang.Integer.valueOf(1)))
e.setDuration(1)
return e}var B=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createAndroidAnimator=function(e){return D()}
return t}(s.Transition)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/frame/fragment.transitions.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/frame/fragment.transitions.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/frame/frame-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/ui/core/view/view-common.js"),a=o("../node_modules/tns-core-modules/ui/core/view/view.js"),s=o("../node_modules/tns-core-modules/ui/builder/builder.js"),u=o("../node_modules/tns-core-modules/profiling/profiling.js"),l=o("../node_modules/tns-core-modules/ui/frame/frame-stack.js"),c=o("../node_modules/tns-core-modules/ui/builder/module-name-sanitizer.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
!function(e){e[e.back=0]="back"
e[e.forward=1]="forward"
e[e.replace=2]="replace"}(n=t.NavigationType||(t.NavigationType={}))
var d=function(e){__extends(t,e)
function t(){var t=null!==e&&e.apply(this,arguments)||this
t._backStack=new Array
t._navigationQueue=new Array
t._isInFrameStack=!1
return t}o=t
t.prototype._addChildFromBuilder=function(e,t){throw new Error("Frame should not have a view. Use 'defaultPage' property instead.")}
t.prototype.onLoaded=function(){e.prototype.onLoaded.call(this)
this._processNextNavigationEntry()}
t.prototype.canGoBack=function(){var e=this,t=this._backStack.length,o=!1
this._navigationQueue.forEach(function(r){var i=r.entry,a=r.navigationType===n.back
if(a){o=!1
if(i){var s=e._backStack.indexOf(i);-1!==s?t=s:t--}else t--}else if(i.entry.clearHistory){o=!1
t=0}else{t++
o&&t--
o=!1===i.entry.backstackVisible}})
this._navigationQueue.length>0&&!this._currentEntry&&t--
return t>0}
t.prototype.goBack=function(e){a.traceEnabled()&&a.traceWrite("GO BACK",a.traceCategories.Navigation)
if(this.canGoBack()){if(e){var t=this._backStack.indexOf(e)
if(t<0)return}var o={entry:e,isBackNavigation:!0,navigationType:n.back}
this._navigationQueue.push(o)
this._processNextNavigationEntry()}}
t.prototype._removeEntry=function(e){var t=e.resolvedPage,o=t.frame
t._frame=null
o?o._removeView(t):t._tearDownUI(!0)
e.resolvedPage=null}
t.prototype.navigate=function(e){a.traceEnabled()&&a.traceWrite("NAVIGATE",a.traceCategories.Navigation)
var t=function(e){var t
t="string"==typeof e?{moduleName:e}:"function"==typeof e?{create:e}:e
return t}(e),o=s.createViewFromEntry(t)
this._pushInFrameStack()
var r={entry:t,resolvedPage:o,navDepth:void 0,fragmentTag:void 0},i={entry:r,isBackNavigation:!1,navigationType:n.forward}
this._navigationQueue.push(i)
this._processNextNavigationEntry()}
t.prototype.isCurrent=function(e){return this._currentEntry===e}
t.prototype.setCurrent=function(e,t){var o=e.resolvedPage
if(!o.frame){this._addView(o)
o._frame=this}this._currentEntry=e
var r=t===n.back
r&&this._pushInFrameStack()
o.onNavigatedTo(r)
this._executingContext=null}
t.prototype._updateBackstack=function(e,t){var r=this,i=t===n.back,a=t===n.replace
this.raiseCurrentPageNavigatedEvents(i)
var s=this._currentEntry
if(i){var u=this._backStack.indexOf(e)
this._backStack.splice(u+1).forEach(function(e){return r._removeEntry(e)})
this._backStack.pop()}else if(!a)if(e.entry.clearHistory){this._backStack.forEach(function(e){return r._removeEntry(e)})
this._backStack.length=0}else o._isEntryBackstackVisible(s)&&this._backStack.push(s)
s&&this._backStack.indexOf(s)<0&&this._removeEntry(s)}
t.prototype.isNestedWithin=function(e){for(var t=this;t;){t=i.getAncestor(t,o)
if(t===e)return!0}return!1}
t.prototype.raiseCurrentPageNavigatedEvents=function(e){var t=this.currentPage
if(t){t.isLoaded&&t.callUnloaded()
t.onNavigatedFrom(e)}}
t.prototype._processNavigationQueue=function(e){if(0!==this._navigationQueue.length){var t=this._navigationQueue[0].entry,o=t.resolvedPage
if(e===o){this._navigationQueue.shift()
this._processNextNavigationEntry()
this._updateActionBar()}}}
t.prototype._findEntryForTag=function(e){var t
if(this._currentEntry&&this._currentEntry.fragmentTag===e)t=this._currentEntry
else{t=this._backStack.find(function(t){return t.fragmentTag===e})
if(!t){var o=this._navigationQueue.find(function(t){return t.entry.fragmentTag===e})
t=o?o.entry:void 0}}return t}
t.prototype.navigationQueueIsEmpty=function(){return 0===this._navigationQueue.length}
t._isEntryBackstackVisible=function(e){if(!e)return!1
var t=e.entry.backstackVisible,o=void 0!==t&&!t
return!o}
t.prototype._updateActionBar=function(e,t){}
t.prototype._processNextNavigationEntry=function(){if(this.isLoaded&&!this._executingContext&&this._navigationQueue.length>0){var e=this._navigationQueue[0],t=e.navigationType===n.back
t?this.performGoBack(e):this.performNavigation(e)}}
t.prototype.performNavigation=function(e){this._executingContext=e
var t=e.entry,o=e.navigationType===n.back
this._onNavigatingTo(t,o)
this._navigateCore(t)}
t.prototype.performGoBack=function(e){var t=e.entry,o=this._backStack
if(!t){t=o[o.length-1]
e.entry=t}this._executingContext=e
this._onNavigatingTo(t,!0)
this._goBackCore(t)}
t.prototype._goBackCore=function(e){a.traceEnabled()&&a.traceWrite("GO BACK CORE("+this._backstackEntryTrace(e)+"); currentPage: "+this.currentPage,a.traceCategories.Navigation)}
t.prototype._navigateCore=function(e){a.traceEnabled()&&a.traceWrite("NAVIGATE CORE("+this._backstackEntryTrace(e)+"); currentPage: "+this.currentPage,a.traceCategories.Navigation)}
t.prototype._onNavigatingTo=function(e,t){this.currentPage&&this.currentPage.onNavigatingFrom(t)
e.resolvedPage.onNavigatingTo(e.entry.context,t,e.entry.bindingContext)}
Object.defineProperty(t.prototype,"animated",{get:function(){return this._animated},set:function(e){this._animated=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"transition",{get:function(){return this._transition},set:function(e){this._transition=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"backStack",{get:function(){return this._backStack.slice()},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"currentPage",{get:function(){return this._currentEntry?this._currentEntry.resolvedPage:null},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"currentEntry",{get:function(){return this._currentEntry?this._currentEntry.entry:null},enumerable:!0,configurable:!0})
t.prototype._pushInFrameStackRecursive=function(){this._pushInFrameStack()
for(var e=[],t=0,o=l.frameStack;t<o.length;t++){var r=o[t]
r.isNestedWithin(this)&&e.push(r)}for(var n=0,i=e;n<i.length;n++){r=i[n]
r._pushInFrameStack()}}
t.prototype._pushInFrameStack=function(){l._pushInFrameStack(this)}
t.prototype._popFromFrameStack=function(){l._popFromFrameStack(this)}
t.prototype._removeFromFrameStack=function(){l._removeFromFrameStack(this)}
t.prototype._dialogClosed=function(){this._removeFromFrameStack()}
t.prototype._onRootViewReset=function(){e.prototype._onRootViewReset.call(this)
this._removeFromFrameStack()}
Object.defineProperty(t.prototype,"_childrenCount",{get:function(){return this.currentPage?1:0},enumerable:!0,configurable:!0})
t.prototype.eachChildView=function(e){var t=this.currentPage
t&&e(t)}
t.prototype._getIsAnimatedNavigation=function(e){return e&&void 0!==e.animated?e.animated:void 0!==this.animated?this.animated:o.defaultAnimatedNavigation}
t.prototype._getNavigationTransition=function(e){if(e){if(a.isIOS&&void 0!==e.transitioniOS)return e.transitioniOS
if(a.isAndroid&&void 0!==e.transitionAndroid)return e.transitionAndroid
if(void 0!==e.transition)return e.transition}return void 0!==this.transition?this.transition:o.defaultTransition}
Object.defineProperty(t.prototype,"navigationBarHeight",{get:function(){return 0},enumerable:!0,configurable:!0})
t.prototype._getNavBarVisible=function(e){throw new Error}
t.prototype._addViewToNativeVisualTree=function(e){return!0}
t.prototype._removeViewFromNativeVisualTree=function(e){e._isAddedToNativeVisualTree=!1}
t.prototype._printFrameBackStack=function(){var e=this.backStack.length,t=e-1
console.log("Frame Back Stack: ")
for(;t>=0;){var o=this.backStack[t--]
console.log("\t"+o.resolvedPage)}}
t.prototype._backstackEntryTrace=function(e){var t=""+e.resolvedPage,r=o._isEntryBackstackVisible(e)
r||(t+=" | INVISIBLE")
e.entry.clearHistory&&(t+=" | CLEAR HISTORY")
var n=this._getIsAnimatedNavigation(e.entry)
n||(t+=" | NOT ANIMATED")
var i=this._getNavigationTransition(e.entry)
i&&(t+=" | Transition["+JSON.stringify(i)+"]")
return t}
t.prototype._onLivesync=function(t){return!!e.prototype._onLivesync.call(this,t)||!t&&this.legacyLivesync()}
t.prototype._handleLivesync=function(t){if(e.prototype._handleLivesync.call(this,t))return!0
if(this.currentPage&&i.viewMatchesModuleContext(this.currentPage,t,["markup","script"])){a.traceWrite("Change Handled: Replacing page "+t.path,a.traceCategories.Livesync)
this.replacePage(t.path)
return!0}return!1}
t.prototype.legacyLivesync=function(){a.traceEnabled()&&a.traceWrite(this+"._onLivesync()",a.traceCategories.Livesync)
if(!this._currentEntry||!this._currentEntry.entry)return!1
var e=this._currentEntry.entry,t={animated:!1,clearHistory:!0,context:e.context,create:e.create,moduleName:e.moduleName,backstackVisible:e.backstackVisible}
if(t.create){var o=t.create()
if(o===this.currentPage)return!1}this.navigate(t)
return!0}
t.prototype.replacePage=function(e){var t=this._currentEntry,o=c.sanitizeModuleName(e),r=s.createViewFromEntry({moduleName:o}),i={entry:t.entry,resolvedPage:r,navDepth:t.navDepth,fragmentTag:t.fragmentTag,frameId:t.frameId},a={entry:i,isBackNavigation:!1,navigationType:n.replace}
this._navigationQueue.push(a)
this._processNextNavigationEntry()}
var o
t.androidOptionSelectedEvent="optionSelected"
t.defaultAnimatedNavigation=!0
__decorate([u.profile],t.prototype,"onLoaded",null)
__decorate([u.profile],t.prototype,"performNavigation",null)
__decorate([u.profile],t.prototype,"performGoBack",null)
t=o=__decorate([a.CSSType("Frame")],t)
return t}(a.CustomLayoutView)
t.FrameBase=d
t.getFrameById=function(e){return l.frameStack.find(function(t){return t.id&&t.id===e})}
function p(){return l.topmost()}t.topmost=p
t.goBack=function(){var e=p()
if(e&&e.canGoBack()){e.goBack()
return!0}if(e){for(var t=!1,o=i.getAncestor(e,"Frame");o&&!t;)o&&o.canGoBack()?t=!0:o=i.getAncestor(o,"Frame")
if(o&&t){o.goBack()
return!0}}l.frameStack.length>1&&e._popFromFrameStack()
return!1}
t._stack=function(){return l.frameStack}
t.defaultPage=new a.Property({name:"defaultPage",valueChanged:function(e,t,o){e.navigate({moduleName:o})}})
t.defaultPage.register(d)
t.actionBarVisibilityProperty=new a.Property({name:"actionBarVisibility",defaultValue:"auto",affectsLayout:a.isIOS})
t.actionBarVisibilityProperty.register(d)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/frame/frame-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/frame/frame-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/frame/frame-stack.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
t.frameStack=[]
function r(){if(t.frameStack.length>0)return t.frameStack[t.frameStack.length-1]}t.topmost=r
t._pushInFrameStack=function(e){if(!e._isInFrameStack||t.frameStack[t.frameStack.length-1]!==e){if(e._isInFrameStack){var o=t.frameStack.indexOf(e)
t.frameStack.splice(o,1)}t.frameStack.push(e)
e._isInFrameStack=!0}}
t._popFromFrameStack=function(e){if(e._isInFrameStack){var o=r()
if(o!==e)throw new Error("Cannot pop a Frame which is not at the top of the navigation stack.")
t.frameStack.pop()
e._isInFrameStack=!1}}
t._removeFromFrameStack=function(e){if(e._isInFrameStack){var o=t.frameStack.indexOf(e)
t.frameStack.splice(o,1)
e._isInFrameStack=!1}}
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/frame/frame-stack.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/frame/frame-stack.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/frame/frame.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/application/application.js"),i=o("../node_modules/tns-core-modules/ui/frame/frame-common.js"),a=o("../node_modules/tns-core-modules/ui/frame/fragment.transitions.js"),s=o("../node_modules/tns-core-modules/profiling/profiling.js"),u=o("../node_modules/tns-core-modules/ui/builder/builder.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/frame/frame-common.js"))
var l="com.tns.activity",c="_callbacks",d=Symbol("_owner"),p=new Map,f=-1,h=-1
if(r&&r.__inspector){var m=o("../node_modules/tns-core-modules/debugger/devtools-elements.js")
m.attachDOMInspectorEventCallbacks(r.__inspector)
m.attachDOMInspectorCommandCallbacks(r.__inspector)}function y(){if(!t.attachStateChangeListener){var e=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
return r.__native(t)}t.prototype.onViewAttachedToWindow=function(e){var t=e[d]
t&&t._onAttachedToWindow()}
t.prototype.onViewDetachedFromWindow=function(e){var t=e[d]
t&&t._onDetachedFromWindow()}
t=__decorate([Interfaces([android.view.View.OnAttachStateChangeListener])],t)
return t}(java.lang.Object)
t.attachStateChangeListener=new e}return t.attachStateChangeListener}function g(e){var t=n.android.foregroundActivity,o=t[c]
if(o){var r=o.getRootView(),a=e&&e.path&&e.path.includes(n.getMainEntry().moduleName)&&"style"!==e.type
!a&&r&&r._onLivesync(e)||o.resetActivityContent(t)}else i.traceError(t+"[CALLBACKS] is null or undefined")}t.reloadPage=g
r.__onLiveSyncCore=g
var v=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
t._containerViewId=-1
t._tearDownPending=!1
t._attachedToWindow=!1
t._android=new S(t)
return t}Object.defineProperty(t,"defaultAnimatedNavigation",{get:function(){return i.FrameBase.defaultAnimatedNavigation},set:function(e){i.FrameBase.defaultAnimatedNavigation=e},enumerable:!0,configurable:!0})
Object.defineProperty(t,"defaultTransition",{get:function(){return i.FrameBase.defaultTransition},set:function(e){i.FrameBase.defaultTransition=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"containerViewId",{get:function(){return this._containerViewId},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"android",{get:function(){return this._android},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"_hasFragments",{get:function(){return!0},enumerable:!0,configurable:!0})
t.prototype._onAttachedToWindow=function(){e.prototype._onAttachedToWindow.call(this)
this._attachedToWindow=!0
this._processNextNavigationEntry()}
t.prototype._onDetachedFromWindow=function(){e.prototype._onDetachedFromWindow.call(this)
this._attachedToWindow=!1}
t.prototype._processNextNavigationEntry=function(){if(this.isLoaded&&!this._executingContext&&this._attachedToWindow){var t=a._getAnimatedEntries(this._android.frameId)
if(!(t&&t.size>0)){var o=this._getFragmentManager(),r=this._currentEntry
if(r&&o&&!o.findFragmentByTag(r.fragmentTag)){this._cachedAnimatorState=function(e){var t=e,o={}
o.enterAnimator=b(t.enterAnimator)
o.exitAnimator=b(t.exitAnimator)
o.popEnterAnimator=b(t.popEnterAnimator)
o.popExitAnimator=b(t.popExitAnimator)
o.transitionName=t.transitionName
return o}(this._currentEntry)
this._currentEntry=null
this._navigateCore(r)
this._currentEntry=r}else e.prototype._processNextNavigationEntry.call(this)}}}
t.prototype._getChildFragmentManager=function(){var e
e=this._executingContext&&this._executingContext.entry?this._executingContext.entry:this._currentEntry
return e&&e.fragment&&e.fragment.isAdded()?e.fragment.getChildFragmentManager():null}
t.prototype._onRootViewReset=function(){e.prototype._onRootViewReset.call(this)
this.disposeCurrentFragment()}
t.prototype.onUnloaded=function(){e.prototype.onUnloaded.call(this)
this.disposeCurrentFragment()}
t.prototype.disposeCurrentFragment=function(){if(this._currentEntry&&this._currentEntry.fragment&&this._currentEntry.fragment.isAdded()){var e=this._getFragmentManager(),t=e.beginTransaction()
t.remove(this._currentEntry.fragment)
t.commitNowAllowingStateLoss()}}
t.prototype.createFragment=function(e,t){!function(){if(w)return
o("../node_modules/tns-core-modules/ui/frame/fragment.js")
if(!w)throw new Error("Failed to initialize the extended androidx.fragment.app.Fragment class")}()
var r=new w,n=new android.os.Bundle
n.putInt("_frameId",this._android.frameId)
r.setArguments(n)
L(r)
var i=r[c]
i.frame=this
i.entry=e
e.fragment=r
e.fragmentTag=t
e.navDepth=f
return r}
t.prototype.setCurrent=function(t,o){var r=this._currentEntry,n=r!==t
if(n){this._updateBackstack(t,o)
if(this._tearDownPending){this._tearDownPending=!1
t.recreated||_(t)
r&&!r.recreated&&_(r)
var s=this._context
if(s&&!t.recreated){t.fragment=this.createFragment(t,t.fragmentTag)
t.resolvedPage._setupUI(s)}t.recreated=!1
r&&(r.recreated=!1)}e.prototype.setCurrent.call(this,t,o)
this._processNavigationQueue(t.resolvedPage)}else this._processNextNavigationEntry()
if(this._cachedAnimatorState){!function(e,t){var o=e
t.enterAnimator&&(o.enterAnimator=t.enterAnimator)
t.exitAnimator&&(o.exitAnimator=t.exitAnimator)
t.popEnterAnimator&&(o.popEnterAnimator=t.popEnterAnimator)
t.popExitAnimator&&(o.popExitAnimator=t.popExitAnimator)
o.transitionName=t.transitionName}(this._currentEntry,this._cachedAnimatorState)
this._cachedAnimatorState=null}if(o===i.NavigationType.replace){a._clearEntry(t)
var u=this._getIsAnimatedNavigation(t.entry),l=this._getNavigationTransition(t.entry),c=t
a._setAndroidFragmentTransitions(u,l,null,c,null,this._android.frameId)}}
t.prototype.onBackPressed=function(){if(this.canGoBack()){this.goBack()
return!0}if(!this.navigationQueueIsEmpty()){var e=this._getFragmentManager()
if(e){e.executePendingTransactions()
return!0}}return!1}
t.prototype._navigateCore=function(t){e.prototype._navigateCore.call(this,t)
t.frameId=this._android.frameId
var o=this._android.activity
if(o){var r=this._getFragmentManager(),n=t.entry.clearHistory,s=this._currentEntry
n&&(f=-1)
var u=this._executingContext&&this._executingContext.navigationType===i.NavigationType.replace
u||f++
h++
var c,d="fragment"+h+"["+f+"]",p=this.createFragment(t,d),m=r.beginTransaction(),y=!!s&&this._getIsAnimatedNavigation(t.entry)
if(u){y=!0
c={name:"fade",duration:100}}else c=this._currentEntry?this._getNavigationTransition(t.entry):null
a._setAndroidFragmentTransitions(y,c,s,t,m,this._android.frameId)
s&&y&&!c&&m.setTransition(androidx.fragment.app.FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
m.replace(this.containerViewId,p,d)
m.commitAllowingStateLoss()}else{var g=this._android.currentActivity
g&&function(e,t){var o=new android.content.Intent(e,e.getClass())
o.setAction(android.content.Intent.ACTION_DEFAULT)
o.putExtra(l,t)
e.startActivity(o)}(g,this._android.frameId)}}
t.prototype._goBackCore=function(t){e.prototype._goBackCore.call(this,t)
f=t.navDepth
var o=this._getFragmentManager(),r=o.beginTransaction()
if(!t.fragment){t.fragment=this.createFragment(t,t.fragmentTag)
a._updateTransitions(t)}var n=a._reverseTransitions(t,this._currentEntry)
n||r.setCustomAnimations(-30,-40)
r.replace(this.containerViewId,t.fragment,t.fragmentTag)
r.commitAllowingStateLoss()}
t.prototype._removeEntry=function(t){e.prototype._removeEntry.call(this,t)
t.fragment&&a._clearEntry(t)
t.fragment=null
t.viewSavedState=null}
t.prototype.createNativeView=function(){return new org.nativescript.widgets.ContentLayout(this._context)}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
var t=y()
this.nativeViewProtected.addOnAttachStateChangeListener(t)
this.nativeViewProtected[d]=this
this._android.rootViewGroup=this.nativeViewProtected
this._containerViewId<0&&(this._containerViewId=android.view.View.generateViewId())
this._android.rootViewGroup.setId(this._containerViewId)}
t.prototype.disposeNativeView=function(){var t=y()
this.nativeViewProtected.removeOnAttachStateChangeListener(t)
this.nativeViewProtected[d]=null
this._tearDownPending=!!this._executingContext
var o=this._currentEntry,r=this._executingContext?this._executingContext.entry:null
this.backStack.forEach(function(e){e!==r&&_(e)})
o&&!r&&_(o)
this._android.rootViewGroup=null
this._removeFromFrameStack()
e.prototype.disposeNativeView.call(this)}
t.prototype._popFromFrameStack=function(){this._isInFrameStack&&e.prototype._popFromFrameStack.call(this)}
t.prototype._getNavBarVisible=function(e){switch(this.actionBarVisibility){case"never":return!1
case"always":return!0
default:return void 0!==e.actionBarHidden?!e.actionBarHidden:!this._android||void 0===this._android.showActionBar||this._android.showActionBar}}
t.prototype._saveFragmentsState=function(){this.backStack.forEach(function(e){var t=e.resolvedPage.nativeViewProtected
if(!e.viewSavedState&&t){var o=new android.util.SparseArray
t.saveHierarchyState(o)
e.viewSavedState=o}})}
__decorate([s.profile],t.prototype,"_navigateCore",null)
return t}(i.FrameBase)
t.Frame=v
function b(e){if(!e)return null
var t=e.clone()
t.entry=e.entry
t.transitionType=e.transitionType
return t}function _(e){e.fragment&&a._clearFragment(e)
e.recreated=!1
e.fragment=null
var t=e.resolvedPage
t._context&&e.resolvedPage._tearDownUI(!0)}var w,P=0,C=new Array,S=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o._showActionBar=!0
o._owner=t
o.frameId=P++
C.push(new WeakRef(o))
return o}Object.defineProperty(t.prototype,"showActionBar",{get:function(){return this._showActionBar},set:function(e){if(this._showActionBar!==e){this._showActionBar=e
this.owner.currentPage&&this.owner.currentPage.actionBar.update()}},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"activity",{get:function(){var e=this.owner._context
if(e)return e
for(var t=this._owner.parent;t;){if(t instanceof v)return t.android.activity
t=t.parent}},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"actionBar",{get:function(){var e=this.currentActivity
if(e){var t=e.getActionBar()
if(t)return t}},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"currentActivity",{get:function(){var e=this.activity
if(e)return e
for(var t=i._stack(),o=t.length,r=o-1;r>=0;r--){e=t[r].android.activity
if(e)return e}},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"owner",{get:function(){return this._owner},enumerable:!0,configurable:!0})
t.prototype.canGoBack=function(){return!!this.activity&&this.activity.getIntent().getAction()!==android.content.Intent.ACTION_MAIN}
t.prototype.fragmentForPage=function(e){var t=e&&e.fragmentTag
if(t)return this.owner._getFragmentManager().findFragmentByTag(t)}
return t}(i.Observable)
function T(e){for(var t=0;t<C.length;t++){var o=C[t].get()
if(o&&o.frameId===e)return o.owner}return null}t.setFragmentClass=function(e){if(w)throw new Error("Fragment class already initialized")
w=e}
var x=function(){function e(){}e.prototype.onHiddenChanged=function(e,t,o){i.traceEnabled()&&i.traceWrite(e+".onHiddenChanged("+t+")",i.traceCategories.NativeLifecycle)
o.call(e,t)}
e.prototype.onCreateAnimator=function(e,t,o,r,n){if(!o&&e.getRemovingParentFragment())return n.call(e,t,o,r)
var s
switch(r){case-10:s="enter"
break
case-20:s="exit"
break
case-30:s="popEnter"
break
case-40:s="popExit"}var u=a._onFragmentCreateAnimator(this.entry,e,r,o)
u||(u=n.call(e,t,o,r))
i.traceEnabled()&&i.traceWrite(e+".onCreateAnimator("+t+", "+(o?"enter":"exit")+", "+s+"): "+(u?"animator":"no animator"),i.traceCategories.NativeLifecycle)
return u}
e.prototype.onCreate=function(e,t,o){i.traceEnabled()&&i.traceWrite(e+".onCreate("+t+")",i.traceCategories.NativeLifecycle)
o.call(e,t)
if(!this.entry){var r=e.getArguments(),n=r.getInt("_frameId"),s=T(n)
if(!s)throw new Error("Cannot find Frame for "+e)
!function(e,t){var o,r=e.getTag()
i.traceEnabled()&&i.traceWrite("Finding page for "+r+".",i.traceCategories.NativeLifecycle)
var n,s=t._currentEntry,u=t._executingContext
s&&s.fragmentTag===r?o=s:u&&u.entry&&u.entry.fragmentTag===r&&(o=u.entry)
if(o){o.recreated=!0
n=o.resolvedPage}if(!n)throw new Error("Could not find a page for "+r+".")
var l=e[c]
l.frame=t
l.entry=o
o.fragment=e
a._updateTransitions(o)}(e,s)}}
e.prototype.onCreateView=function(e,t,o,r,n){i.traceEnabled()&&i.traceWrite(e+".onCreateView(inflater, container, "+r+")",i.traceCategories.NativeLifecycle)
var a=this.entry
if(!a){i.traceError(e+".onCreateView: entry is null or undefined")
return null}var s=a.resolvedPage
if(!s){i.traceError(e+".onCreateView: entry has no resolvedPage")
return null}var u=this.frame
if(!u){i.traceError(e+".onCreateView: this.frame is null or undefined")
return null}if(s.parent===u){if(!s._context){var l=o&&o.getContext()||t&&t.getContext()
s._setupUI(l)}}else{u._styleScope||s._updateStyleScope()
u._addView(s)}u.isLoaded&&!s.isLoaded&&s.callLoaded()
var c=a.viewSavedState
if(c){s.nativeViewProtected.restoreHierarchyState(c)
a.viewSavedState=null}var d=s.nativeViewProtected
if(null!=d){var p=d.getParent()
if(p instanceof android.view.ViewGroup){0===p.getChildCount()&&p.addViewInLayout(d,-1,new org.nativescript.widgets.CommonLayoutParams)
p.removeView(d)}}return s.nativeViewProtected}
e.prototype.onSaveInstanceState=function(e,t,o){i.traceEnabled()&&i.traceWrite(e+".onSaveInstanceState("+t+")",i.traceCategories.NativeLifecycle)
o.call(e,t)}
e.prototype.onDestroyView=function(e,t){i.traceEnabled()&&i.traceWrite(e+".onDestroyView()",i.traceCategories.NativeLifecycle)
t.call(e)}
e.prototype.onDestroy=function(e,t){i.traceEnabled()&&i.traceWrite(e+".onDestroy()",i.traceCategories.NativeLifecycle)
t.call(e)
var o=this.entry
if(!o){i.traceError(e+".onDestroy: entry is null or undefined")
return null}o.fragment=null
var r=o.resolvedPage
if(!r){i.traceError(e+".onDestroy: entry has no resolvedPage")
return null}}
e.prototype.onStop=function(e,t){t.call(e)}
e.prototype.toStringOverride=function(e,t){var o=this.entry
return o?o.fragmentTag+"<"+o.resolvedPage+">":"NO ENTRY, "+t.call(e)}
__decorate([s.profile],e.prototype,"onHiddenChanged",null)
__decorate([s.profile],e.prototype,"onCreateAnimator",null)
__decorate([s.profile],e.prototype,"onCreate",null)
__decorate([s.profile],e.prototype,"onCreateView",null)
__decorate([s.profile],e.prototype,"onSaveInstanceState",null)
__decorate([s.profile],e.prototype,"onDestroyView",null)
__decorate([s.profile],e.prototype,"onDestroy",null)
__decorate([s.profile],e.prototype,"onStop",null)
__decorate([s.profile],e.prototype,"toStringOverride",null)
return e}(),I=function(){function e(){}e.prototype.getRootView=function(){return this._rootView}
e.prototype.onCreate=function(e,o,r,a){i.traceEnabled()&&i.traceWrite("Activity.onCreate("+o+")",i.traceCategories.NativeLifecycle)
var s=a?r:void 0
if(!a){console.log("AndroidActivityCallbacks.onCreate(activity: any, savedInstanceState: any, superFunc: Function) is deprecated. Use AndroidActivityCallbacks.onCreate(activity: any, savedInstanceState: any, intent: any, superFunc: Function) instead.")
a=r}var u=!!o&&t.moduleLoaded
a.call(e,u?o:null)
if(o){var l=o.getInt("com.tns.activity.rootViewId",-1);-1!==l&&p.has(l)&&(this._rootView=p.get(l).get())}s&&s.getAction()&&n.android.notify({eventName:n.AndroidApplication.activityNewIntentEvent,object:n.android,activity:e,intent:s})
this.setActivityContent(e,o,!0)
t.moduleLoaded=!0}
e.prototype.onSaveInstanceState=function(e,t,o){o.call(e,t)
var r=this._rootView
if(r instanceof v){t.putInt(l,r.android.frameId)
r._saveFragmentsState()}t.putInt("com.tns.activity.rootViewId",r._domId)}
e.prototype.onNewIntent=function(e,t,o,r){r.call(e,t)
o.call(e,t)
n.android.notify({eventName:n.AndroidApplication.activityNewIntentEvent,object:n.android,activity:e,intent:t})}
e.prototype.onStart=function(e,t){t.call(e)
i.traceEnabled()&&i.traceWrite("NativeScriptActivity.onStart();",i.traceCategories.NativeLifecycle)
var o=this._rootView
o&&!o.isLoaded&&o.callLoaded()}
e.prototype.onStop=function(e,t){t.call(e)
i.traceEnabled()&&i.traceWrite("NativeScriptActivity.onStop();",i.traceCategories.NativeLifecycle)
var o=this._rootView
o&&o.isLoaded&&o.callUnloaded()}
e.prototype.onPostResume=function(e,t){t.call(e)
i.traceEnabled()&&i.traceWrite("NativeScriptActivity.onPostResume();",i.traceCategories.NativeLifecycle)
if(e.isNativeScriptActivity){var o={eventName:n.resumeEvent,object:n.android,android:e}
n.notify(o)
n.android.paused=!1}}
e.prototype.onDestroy=function(e,t){i.traceEnabled()&&i.traceWrite("NativeScriptActivity.onDestroy();",i.traceCategories.NativeLifecycle)
var o=this._rootView
o&&o._tearDownUI(!0)
var r={eventName:n.exitEvent,object:n.android,android:e}
n.notify(r)
t.call(e)}
e.prototype.onBackPressed=function(e,t){i.traceEnabled()&&i.traceWrite("NativeScriptActivity.onBackPressed;",i.traceCategories.NativeLifecycle)
var o={eventName:"activityBackPressed",object:n.android,activity:e,cancel:!1}
n.android.notify(o)
if(!o.cancel){var r=this._rootView,a=!1
if(r instanceof v)a=!i.goBack()
else{var s={eventName:"activityBackPressed",object:r,activity:e,cancel:!1}
r.notify(s)
s.cancel||r.onBackPressed()||(a=!0)}a&&t.call(e)}}
e.prototype.onRequestPermissionsResult=function(e,t,o,r,a){i.traceEnabled()&&i.traceWrite("NativeScriptActivity.onRequestPermissionsResult;",i.traceCategories.NativeLifecycle)
n.android.notify({eventName:"activityRequestPermissions",object:n.android,activity:e,requestCode:t,permissions:o,grantResults:r})}
e.prototype.onActivityResult=function(e,t,o,r,a){a.call(e,t,o,r)
i.traceEnabled()&&i.traceWrite("NativeScriptActivity.onActivityResult("+t+", "+o+", "+r+")",i.traceCategories.NativeLifecycle)
n.android.notify({eventName:"activityResult",object:n.android,activity:e,requestCode:t,resultCode:o,intent:r})}
e.prototype.resetActivityContent=function(e){if(this._rootView){var t=this._rootView._getFragmentManager()
t.executePendingTransactions()
this._rootView._onRootViewReset()}this._rootView=null
this.setActivityContent(e,null,!1)
this._rootView.callLoaded()}
e.prototype.setActivityContent=function(e,t,o){var r=n._shouldCreateRootFrame(),a=this._rootView
i.traceEnabled()&&i.traceWrite("Frame.setActivityContent rootView: "+a+" shouldCreateRootFrame: "+r+" fireLaunchEvent: "+o,i.traceCategories.NativeLifecycle)
if(!a){var s=n.getMainEntry(),c=e.getIntent()
o&&(a=j(c,t))
if(!a){if(!s)throw new Error("Main entry is missing. App cannot be started. Verify app bootstrap.")
if(r){var d=c.getExtras(),f=-1
d&&(f=d.getInt(l,-1))
t&&f<0&&(f=t.getInt(l,-1))
a||(a=T(f)||new v)
if(!(a instanceof v))throw new Error("A Frame must be used to navigate to a Page.")
a.navigate(s)}else a=u.createViewFromEntry(s)}this._rootView=a
p.set(a._domId,new WeakRef(a))}r?a._setupUI(e):a._setupAsRootView(e)
e.setContentView(a.nativeViewProtected,new org.nativescript.widgets.CommonLayoutParams)}
__decorate([s.profile],e.prototype,"onCreate",null)
__decorate([s.profile],e.prototype,"onSaveInstanceState",null)
__decorate([s.profile],e.prototype,"onNewIntent",null)
__decorate([s.profile],e.prototype,"onStart",null)
__decorate([s.profile],e.prototype,"onStop",null)
__decorate([s.profile],e.prototype,"onPostResume",null)
__decorate([s.profile],e.prototype,"onDestroy",null)
__decorate([s.profile],e.prototype,"onBackPressed",null)
__decorate([s.profile],e.prototype,"onRequestPermissionsResult",null)
__decorate([s.profile],e.prototype,"onActivityResult",null)
return e}(),j=s.profile("notifyLaunch",function(e,t){var o={eventName:n.launchEvent,object:n.android,android:e,savedInstanceState:t}
n.notify(o)
n.notify({eventName:"loadAppCss",object:this,cssFile:n.getCssFileName()})
return o.root})
t.setActivityCallbacks=function(e){e[c]=new I}
function L(e){e[c]=new x}t.setFragmentCallbacks=L
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/frame/frame.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/frame/frame.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/gestures/gestures-common.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
var r
!function(e){e[e.tap=1]="tap"
e[e.doubleTap=2]="doubleTap"
e[e.pinch=4]="pinch"
e[e.pan=8]="pan"
e[e.swipe=16]="swipe"
e[e.rotation=32]="rotation"
e[e.longPress=64]="longPress"
e[e.touch=128]="touch"}(r=t.GestureTypes||(t.GestureTypes={}))
!function(e){e[e.cancelled=0]="cancelled"
e[e.began=1]="began"
e[e.changed=2]="changed"
e[e.ended=3]="ended"}(t.GestureStateTypes||(t.GestureStateTypes={}))
!function(e){e[e.right=1]="right"
e[e.left=2]="left"
e[e.up=4]="up"
e[e.down=8]="down"}(t.SwipeDirection||(t.SwipeDirection={}))
!function(e){e.down="down"
e.up="up"
e.move="move"
e.cancel="cancel"}(t.TouchAction||(t.TouchAction={}))
t.toString=function(e,t){var o=new Array
e&r.tap&&o.push("tap")
e&r.doubleTap&&o.push("doubleTap")
e&r.pinch&&o.push("pinch")
e&r.pan&&o.push("pan")
e&r.swipe&&o.push("swipe")
e&r.rotation&&o.push("rotation")
e&r.longPress&&o.push("longPress")
e&r.touch&&o.push("touch")
return o.join(t)}
t.fromString=function(e){var t=e.trim().toLowerCase()
return"tap"===t?r.tap:"doubletap"===t?r.doubleTap:"pinch"===t?r.pinch:"pan"===t?r.pan:"swipe"===t?r.swipe:"rotation"===t?r.rotation:"longpress"===t?r.longPress:"touch"===t?r.touch:void 0}
var n=function(){function e(e,t,o){this._target=e
this._callback=t
this._context=o}Object.defineProperty(e.prototype,"callback",{get:function(){return this._callback},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"target",{get:function(){return this._target},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"context",{get:function(){return this._context},enumerable:!0,configurable:!0})
e.prototype.disconnect=function(){if(this.target){var e=this.target.getGestureObservers(this.type)
if(e&&e.length>0){for(var t=0;t<e.length&&e[t].callback!==this.callback;t++);e.length=0
this.target._gestureObservers[this.type]=void 0
delete this.target._gestureObservers[this.type]}}this._target=null
this._callback=null
this._context=null}
return e}()
t.GesturesObserverBase=n
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/gestures/gestures-common.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/gestures/gestures-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/gestures/gestures.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i,a,s=o("../node_modules/tns-core-modules/ui/gestures/gestures-common.js"),u=o("../node_modules/tns-core-modules/utils/utils.js"),l=o("../node_modules/tns-core-modules/timer/timer.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/gestures/gestures-common.js"))
var c=100,d=100,p=-1,f=180/Math.PI
t.observe=function(e,t,o,r){var n=new h(e,o,r)
n.observe(t)
return n}
var h=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.observe=function(e){var t=this
if(this.target){this.type=e
this._onTargetLoaded=function(o){t._attach(t.target,e)}
this._onTargetUnloaded=function(e){t._detach()}
this.target.on("loaded",this._onTargetLoaded)
this.target.on("unloaded",this._onTargetUnloaded)
this.target.isLoaded&&this._attach(this.target,e)}}
t.prototype.disconnect=function(){this._detach()
if(this.target){this.target.off("loaded",this._onTargetLoaded)
this.target.off("unloaded",this._onTargetUnloaded)
this._onTargetLoaded=null
this._onTargetUnloaded=null}e.prototype.disconnect.call(this)}
t.prototype._detach=function(){this._notifyTouch=!1
this._simpleGestureDetector=null
this._scaleGestureDetector=null
this._swipeGestureDetector=null
this._panGestureDetector=null
this._rotateGestureDetector=null
this._eventData=null}
t.prototype._attach=function(e,t){this._detach()
if(t&s.GestureTypes.tap||t&s.GestureTypes.doubleTap||t&s.GestureTypes.longPress){!function(){if(!n){var e=function(e){__extends(t,e)
function t(t,o,n){var i=e.call(this)||this
i._lastUpTime=0
i._observer=t
i._target=o
i._type=n
return r.__native(i)}t.prototype.onSingleTapUp=function(e){this._handleSingleTap(e)
this._lastUpTime=Date.now()
return!0}
t.prototype.onDown=function(e){var o=Date.now()
o-this._lastUpTime<=t.DoubleTapTimeout&&this._handleDoubleTap(e)
return!0}
t.prototype.onLongPress=function(e){if(this._type&s.GestureTypes.longPress){var t=m(s.GestureTypes.longPress,this._target,e)
v(this._observer,t)}}
t.prototype._handleSingleTap=function(e){var o=this
this._tapTimeoutId=l.setTimeout(function(){if(o._type&s.GestureTypes.tap){var t=m(s.GestureTypes.tap,o._target,e)
v(o._observer,t)}l.clearTimeout(o._tapTimeoutId)},t.DoubleTapTimeout)}
t.prototype._handleDoubleTap=function(e){this._tapTimeoutId&&l.clearTimeout(this._tapTimeoutId)
if(this._type&s.GestureTypes.doubleTap){var t=m(s.GestureTypes.doubleTap,this._target,e)
v(this._observer,t)}}
t.DoubleTapTimeout=android.view.ViewConfiguration.getDoubleTapTimeout()
return t}(android.view.GestureDetector.SimpleOnGestureListener)
n=e}}()
this._simpleGestureDetector=new androidx.core.view.GestureDetectorCompat(e._context,new n(this,this.target,t))}if(t&s.GestureTypes.pinch){!function(){if(!i){var e=function(e){__extends(t,e)
function t(t,o){var n=e.call(this)||this
n._observer=t
n._target=o
return r.__native(n)}t.prototype.onScaleBegin=function(e){this._scale=e.getScaleFactor()
var t=new b(this._target,e,this._scale,this._target,s.GestureStateTypes.began)
v(this._observer,t)
return!0}
t.prototype.onScale=function(e){this._scale*=e.getScaleFactor()
var t=new b(this._target,e,this._scale,this._target,s.GestureStateTypes.changed)
v(this._observer,t)
return!0}
t.prototype.onScaleEnd=function(e){this._scale*=e.getScaleFactor()
var t=new b(this._target,e,this._scale,this._target,s.GestureStateTypes.ended)
v(this._observer,t)}
return t}(android.view.ScaleGestureDetector.SimpleOnScaleGestureListener)
i=e}}()
this._scaleGestureDetector=new android.view.ScaleGestureDetector(e._context,new i(this,this.target))}if(t&s.GestureTypes.swipe){!function(){if(!a){var e=function(e){__extends(t,e)
function t(t,o){var n=e.call(this)||this
n._observer=t
n._target=o
return r.__native(n)}t.prototype.onDown=function(e){return!0}
t.prototype.onFling=function(e,t,o,r){var n,i=!1
try{var a=t.getY()-e.getY(),u=t.getX()-e.getX()
if(Math.abs(u)>Math.abs(a)){if(Math.abs(u)>c&&Math.abs(o)>d)if(u>0){n=y(s.SwipeDirection.right,this._target,e,t)
v(this._observer,n)
i=!0}else{n=y(s.SwipeDirection.left,this._target,e,t)
v(this._observer,n)
i=!0}}else if(Math.abs(a)>c&&Math.abs(r)>d)if(a>0){n=y(s.SwipeDirection.down,this._target,e,t)
v(this._observer,n)
i=!0}else{n=y(s.SwipeDirection.up,this._target,e,t)
v(this._observer,n)
i=!0}}catch(e){}return i}
return t}(android.view.GestureDetector.SimpleOnGestureListener)
a=e}}()
this._swipeGestureDetector=new androidx.core.view.GestureDetectorCompat(e._context,new a(this,this.target))}t&s.GestureTypes.pan&&(this._panGestureDetector=new _(this,this.target))
t&s.GestureTypes.rotation&&(this._rotateGestureDetector=new w(this,this.target))
t&s.GestureTypes.touch&&(this._notifyTouch=!0)}
t.prototype.androidOnTouchEvent=function(e){if(this._notifyTouch){this._eventData||(this._eventData=new C)
this._eventData.prepare(this.target,e)
v(this,this._eventData)}this._simpleGestureDetector&&this._simpleGestureDetector.onTouchEvent(e)
this._scaleGestureDetector&&this._scaleGestureDetector.onTouchEvent(e)
this._swipeGestureDetector&&this._swipeGestureDetector.onTouchEvent(e)
this._panGestureDetector&&this._panGestureDetector.onTouchEvent(e)
this._rotateGestureDetector&&this._rotateGestureDetector.onTouchEvent(e)}
return t}(s.GesturesObserverBase)
t.GesturesObserver=h
function m(e,t,o){return{type:e,view:t,android:o,ios:void 0,object:t,eventName:s.toString(e)}}function y(e,t,o,r){return{type:s.GestureTypes.swipe,view:t,android:{initial:o,current:r},direction:e,ios:void 0,object:t,eventName:s.toString(s.GestureTypes.swipe)}}function g(e,t,o,r,n,i){return{type:s.GestureTypes.pan,view:o,android:{initial:n,current:i},deltaX:e,deltaY:t,ios:void 0,object:o,eventName:s.toString(s.GestureTypes.pan),state:r}}function v(e,t){e&&e.callback&&e.callback.call(e._context,t)}var b=function(){function e(e,t,o,r,n){this.view=e
this.android=t
this.scale=o
this.object=r
this.state=n
this.type=s.GestureTypes.pinch
this.eventName=s.toString(s.GestureTypes.pinch)}e.prototype.getFocusX=function(){return this.android.getFocusX()/u.layout.getDisplayDensity()}
e.prototype.getFocusY=function(){return this.android.getFocusY()/u.layout.getDisplayDensity()}
return e}(),_=function(){function e(e,t){this.observer=e
this.target=t
this.isTracking=!1
this.density=u.layout.getDisplayDensity()}e.prototype.onTouchEvent=function(e){switch(e.getActionMasked()){case android.view.MotionEvent.ACTION_UP:case android.view.MotionEvent.ACTION_CANCEL:this.trackStop(e,!1)
break
case android.view.MotionEvent.ACTION_DOWN:case android.view.MotionEvent.ACTION_POINTER_DOWN:case android.view.MotionEvent.ACTION_POINTER_UP:this.trackStop(e,!0)
break
case android.view.MotionEvent.ACTION_MOVE:this.isTracking||this.trackStart(e)
this.trackChange(e)}return!0}
e.prototype.trackStop=function(e,t){if(this.isTracking){var o=g(this.deltaX,this.deltaY,this.target,s.GestureStateTypes.ended,null,e)
v(this.observer,o)
this.deltaX=void 0
this.deltaY=void 0
this.isTracking=!1}this.lastEventCache=t?e:void 0}
e.prototype.trackStart=function(e){var t=this.getEventCoordinates(this.lastEventCache?this.lastEventCache:e)
this.initialX=t.x
this.initialY=t.y
this.isTracking=!0
var o=g(0,0,this.target,s.GestureStateTypes.began,null,e)
v(this.observer,o)}
e.prototype.trackChange=function(e){var t=this.getEventCoordinates(e)
this.deltaX=t.x-this.initialX
this.deltaY=t.y-this.initialY
var o=g(this.deltaX,this.deltaY,this.target,s.GestureStateTypes.changed,null,e)
v(this.observer,o)}
e.prototype.getEventCoordinates=function(e){var t=e.getPointerCount()
if(1===t)return{x:e.getRawX()/this.density,y:e.getRawY()/this.density}
for(var o=e.getRawX()-e.getX(),r=e.getRawY()-e.getY(),n={x:0,y:0},i=0;i<t;i++){n.x+=e.getX(i)+o
n.y+=e.getY(i)+r}n.x/=t*this.density
n.y/=t*this.density
return n}
return e}(),w=function(){function e(e,t){this.observer=e
this.target=t
this.trackedPtrId1=p
this.trackedPtrId2=p}Object.defineProperty(e.prototype,"isTracking",{get:function(){return this.trackedPtrId1!==p&&this.trackedPtrId2!==p},enumerable:!0,configurable:!0})
e.prototype.onTouchEvent=function(e){var t=e.getPointerId(e.getActionIndex()),o=this.isTracking
switch(e.getActionMasked()){case android.view.MotionEvent.ACTION_DOWN:case android.view.MotionEvent.ACTION_POINTER_DOWN:var r=!1
if(this.trackedPtrId1===p&&t!==this.trackedPtrId2){this.trackedPtrId1=t
r=!0}else if(this.trackedPtrId2===p&&t!==this.trackedPtrId1){this.trackedPtrId2=t
r=!0}if(r&&this.isTracking){this.angle=0
this.initalPointersAngle=this.getPointersAngle(e)
this.executeCallback(e,s.GestureStateTypes.began)}break
case android.view.MotionEvent.ACTION_MOVE:if(this.isTracking){this.updateAngle(e)
this.executeCallback(e,s.GestureStateTypes.changed)}break
case android.view.MotionEvent.ACTION_UP:case android.view.MotionEvent.ACTION_POINTER_UP:t===this.trackedPtrId1?this.trackedPtrId1=p:t===this.trackedPtrId2&&(this.trackedPtrId2=p)
o&&!this.isTracking&&this.executeCallback(e,s.GestureStateTypes.ended)
break
case android.view.MotionEvent.ACTION_CANCEL:this.trackedPtrId1=p
this.trackedPtrId2=p
o&&this.executeCallback(e,s.GestureStateTypes.cancelled)}return!0}
e.prototype.executeCallback=function(e,t){var o={type:s.GestureTypes.rotation,view:this.target,android:e,rotation:this.angle,ios:void 0,object:this.target,eventName:s.toString(s.GestureTypes.rotation),state:t}
v(this.observer,o)}
e.prototype.updateAngle=function(e){var t=this.getPointersAngle(e),o=(t-this.initalPointersAngle)*f%360
o<-180&&(o+=360)
o>180&&(o-=360)
this.angle=o}
e.prototype.getPointersAngle=function(e){var t=e.getX(e.findPointerIndex(this.trackedPtrId1)),o=e.getY(e.findPointerIndex(this.trackedPtrId1)),r=e.getX(e.findPointerIndex(this.trackedPtrId2)),n=e.getY(e.findPointerIndex(this.trackedPtrId2))
return Math.atan2(n-o,r-t)}
return e}(),P=function(){function e(e,t){this.event=t
this.ios=void 0
this.android=e}e.prototype.getX=function(){return this.event.getX(this.android)/u.layout.getDisplayDensity()}
e.prototype.getY=function(){return this.event.getY(this.android)/u.layout.getDisplayDensity()}
return e}(),C=function(){function e(){this.eventName=s.toString(s.GestureTypes.touch)
this.type=s.GestureTypes.touch
this.ios=void 0}e.prototype.prepare=function(e,t){this.view=e
this.object=e
this.android=t
this.action=this.getActionType(t)
this._activePointers=void 0
this._allPointers=void 0}
e.prototype.getPointerCount=function(){return this.android.getPointerCount()}
e.prototype.getActivePointers=function(){this._activePointers||(this._activePointers=[new P(this.android.getActionIndex(),this.android)])
return this._activePointers}
e.prototype.getAllPointers=function(){if(!this._allPointers){this._allPointers=[]
for(var e=0;e<this.getPointerCount();e++)this._allPointers.push(new P(e,this.android))}return this._allPointers}
e.prototype.getX=function(){return this.getActivePointers()[0].getX()}
e.prototype.getY=function(){return this.getActivePointers()[0].getY()}
e.prototype.getActionType=function(e){switch(e.getActionMasked()){case android.view.MotionEvent.ACTION_DOWN:case android.view.MotionEvent.ACTION_POINTER_DOWN:return s.TouchAction.down
case android.view.MotionEvent.ACTION_MOVE:return s.TouchAction.move
case android.view.MotionEvent.ACTION_UP:case android.view.MotionEvent.ACTION_POINTER_UP:return s.TouchAction.up
case android.view.MotionEvent.ACTION_CANCEL:return s.TouchAction.cancel}return""}
return e}()
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/gestures/gestures.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/gestures/gestures.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/html-view/html-view-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t=__decorate([n.CSSType("HtmlView")],t)
return t}(n.View)
t.HtmlViewBase=i
i.prototype.recycleNativeView="auto"
t.htmlProperty=new n.Property({name:"html",defaultValue:"",affectsLayout:!0})
t.htmlProperty.register(i)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/html-view/html-view-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/html-view/html-view-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/html-view/html-view.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/html-view/html-view-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/html-view/html-view-common.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){return new android.widget.TextView(this._context)}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
var t=this.nativeViewProtected
t.setLinksClickable(!0)
t.setMovementMethod(android.text.method.LinkMovementMethod.getInstance())}
t.prototype.resetNativeView=function(){e.prototype.resetNativeView.call(this)
this.nativeViewProtected.setAutoLinkMask(0)}
t.prototype[n.htmlProperty.getDefault]=function(){return""}
t.prototype[n.htmlProperty.setNative]=function(e){var t=15
e.search(/<a\s/i)>=0&&(t=0)
this.nativeViewProtected.setAutoLinkMask(t)
this.nativeViewProtected.setText(android.text.Html.fromHtml(e))}
return t}(n.HtmlViewBase)
t.HtmlView=i
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/html-view/html-view.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/html-view/html-view.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/image/image-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js"),i=o("../node_modules/tns-core-modules/image-asset/image-asset.js")
t.ImageAsset=i.ImageAsset
var a=o("../node_modules/tns-core-modules/image-source/image-source.js")
t.ImageSource=a.ImageSource
t.fromAsset=a.fromAsset
t.fromNativeSource=a.fromNativeSource
t.fromUrl=a.fromUrl
var s=o("../node_modules/tns-core-modules/utils/utils.js")
t.isDataURI=s.isDataURI
t.isFontIconURI=s.isFontIconURI
t.isFileOrResourcePath=s.isFileOrResourcePath
t.RESOURCE_PREFIX=s.RESOURCE_PREFIX
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
var u=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}Object.defineProperty(t.prototype,"tintColor",{get:function(){return this.style.tintColor},set:function(e){this.style.tintColor=e},enumerable:!0,configurable:!0})
t.prototype._createImageSourceFromSrc=function(e){var t=this,o=e,r="sync"===this.loadMode
if("string"==typeof e||e instanceof String){e=e.trim()
this.imageSource=null
this._url=e
this.isLoading=!0
var u=new a.ImageSource,l=function(){var e=t.src
if(e===o){t.imageSource=u
t.isLoading=!1}}
if(s.isFontIconURI(e)){var c=e.split("//")[1]
if(void 0!==c){var d=this.style.fontInternal,p=this.style.color
u.loadFromFontIconCode(c,d,p)
l()}}else if(s.isDataURI(e)){var f=e.split(",")[1]
if(void 0!==f)if(r){u.loadFromBase64(f)
l()}else u.fromBase64(f).then(l)}else if(s.isFileOrResourcePath(e))if(0===e.indexOf(s.RESOURCE_PREFIX)){var h=e.substr(s.RESOURCE_PREFIX.length)
if(r){u.loadFromResource(h)
l()}else{this.imageSource=null
u.fromResource(h).then(l)}}else if(r){u.loadFromFile(e)
l()}else{this.imageSource=null
u.fromFile(e).then(l)}else{this.imageSource=null
a.fromUrl(e).then(function(o){if(t._url===e){t.imageSource=o
t.isLoading=!1}},function(e){t.isLoading=!1
if(n.traceEnabled()){"object"==typeof e&&e.message&&(e=e.message)
n.traceWrite(e,n.traceCategories.Debug)}})}}else if(e instanceof a.ImageSource){this.imageSource=e
this.isLoading=!1}else if(e instanceof i.ImageAsset)a.fromAsset(e).then(function(e){t.imageSource=e
t.isLoading=!1})
else{this.imageSource=a.fromNativeSource(e)
this.isLoading=!1}}
t=__decorate([n.CSSType("Image")],t)
return t}(n.View)
t.ImageBase=u
u.prototype.recycleNativeView="auto"
t.imageSourceProperty=new n.Property({name:"imageSource"})
t.imageSourceProperty.register(u)
t.srcProperty=new n.Property({name:"src"})
t.srcProperty.register(u)
t.loadModeProperty=new n.Property({name:"loadMode",defaultValue:"sync"})
t.loadModeProperty.register(u)
t.isLoadingProperty=new n.Property({name:"isLoading",defaultValue:!1,valueConverter:n.booleanConverter})
t.isLoadingProperty.register(u)
t.stretchProperty=new n.Property({name:"stretch",defaultValue:"aspectFit",affectsLayout:n.isIOS})
t.stretchProperty.register(u)
t.tintColorProperty=new n.InheritedCssProperty({name:"tintColor",cssName:"tint-color",equalityComparer:n.Color.equals,valueConverter:function(e){return new n.Color(e)}})
t.tintColorProperty.register(n.Style)
t.decodeHeightProperty=new n.Property({name:"decodeHeight",defaultValue:{value:0,unit:"dip"},valueConverter:n.Length.parse})
t.decodeHeightProperty.register(u)
t.decodeWidthProperty=new n.Property({name:"decodeWidth",defaultValue:{value:0,unit:"dip"},valueConverter:n.Length.parse})
t.decodeWidthProperty.register(u)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/image/image-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/image/image-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/image/image.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/image/image-common.js"),i=o("../node_modules/tns-core-modules/file-system/file-system.js"),a=o("../node_modules/tns-core-modules/platform/platform.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/image/image-common.js"))
var s,u
var l=function(e){__extends(t,e)
function t(){var t=null!==e&&e.apply(this,arguments)||this
t.useCache=!0
return t}t.prototype.createNativeView=function(){s||(s=org.nativescript.widgets.ImageView)
return new s(this._context)}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
!function(){if(!u){var e=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}t.prototype.onImageLoaded=function(e){var t=this.owner
t&&(t.isLoading=!1)}
t=__decorate([Interfaces([org.nativescript.widgets.image.Worker.OnImageLoadedListener])],t)
return t}(java.lang.Object)
u=e}}()
var t=this.nativeViewProtected,o=new u(this)
t.setImageLoadedListener(o)
t.listener=o}
t.prototype.disposeNativeView=function(){this.nativeViewProtected.listener.owner=null
e.prototype.disposeNativeView.call(this)}
t.prototype.resetNativeView=function(){e.prototype.resetNativeView.call(this)
this.nativeViewProtected.setImageMatrix(new android.graphics.Matrix)}
t.prototype._createImageSourceFromSrc=function(t){var o=this.nativeViewProtected
if(o)if(t){var r=a.screen.mainScreen,s=Math.min(n.Length.toDevicePixels(this.decodeWidth,0),r.widthPixels),u=Math.min(n.Length.toDevicePixels(this.decodeHeight,0),r.heightPixels),l=this._calculateKeepAspectRatio()
if(t instanceof n.ImageAsset){if(t.options){s=t.options.width||s
u=t.options.height||u
l=!!t.options.keepAspectRatio}t=t.android}var c="async"===this.loadMode
if("string"==typeof t||t instanceof String){t=t.trim()
this.isLoading=!0
if(n.isFontIconURI(t)||n.isDataURI(t))e.prototype._createImageSourceFromSrc.call(this,t)
else if(n.isFileOrResourcePath(t))if(0===t.indexOf(n.RESOURCE_PREFIX))o.setUri(t,s,u,l,this.useCache,c)
else{var d=t
0===d.indexOf("~/")&&(d=i.knownFolders.currentApp().path+"/"+d.replace("~/",""))
o.setUri("file:///"+d,s,u,l,this.useCache,c)}else o.setUri(t,s,u,l,this.useCache,!0)}else e.prototype._createImageSourceFromSrc.call(this,t)}else o.setUri(null,0,0,!1,!1,!0)}
t.prototype._calculateKeepAspectRatio=function(){return"fill"!==this.stretch}
t.prototype[n.stretchProperty.getDefault]=function(){return"aspectFit"}
t.prototype[n.stretchProperty.setNative]=function(e){switch(e){case"aspectFit":this.nativeViewProtected.setScaleType(android.widget.ImageView.ScaleType.FIT_CENTER)
break
case"aspectFill":this.nativeViewProtected.setScaleType(android.widget.ImageView.ScaleType.CENTER_CROP)
break
case"fill":this.nativeViewProtected.setScaleType(android.widget.ImageView.ScaleType.FIT_XY)
break
case"none":default:this.nativeViewProtected.setScaleType(android.widget.ImageView.ScaleType.MATRIX)}}
t.prototype[n.tintColorProperty.getDefault]=function(){}
t.prototype[n.tintColorProperty.setNative]=function(e){void 0===e?this.nativeViewProtected.clearColorFilter():this.nativeViewProtected.setColorFilter(e.android)}
t.prototype[n.imageSourceProperty.getDefault]=function(){}
t.prototype[n.imageSourceProperty.setNative]=function(e){var t=this.nativeViewProtected
if(e&&e.android){var o=e.rotationAngle?e.rotationAngle:0
t.setRotationAngle(o)
t.setImageBitmap(e.android)}else{t.setRotationAngle(0)
t.setImageBitmap(null)}}
t.prototype[n.srcProperty.getDefault]=function(){}
t.prototype[n.srcProperty.setNative]=function(e){this._createImageSourceFromSrc(e)}
return t}(n.ImageBase)
t.Image=l
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/image/image.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/image/image.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/label/label.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/ui/text-base/text-base.js"),a=o("../node_modules/tns-core-modules/profiling/profiling.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/text-base/text-base.js"))
var s=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}Object.defineProperty(t.prototype,"textWrap",{get:function(){return"normal"===this.style.whiteSpace},set:function(e){"string"==typeof e&&(e=i.booleanConverter(e))
this.style.whiteSpace=e?"normal":"nowrap"},enumerable:!0,configurable:!0})
t.prototype.createNativeView=function(){n||(n=android.widget.TextView)
return new n(this._context)}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
var t=this.nativeTextViewProtected
t.setSingleLine(!0)
t.setEllipsize(android.text.TextUtils.TruncateAt.END)}
t.prototype[i.whiteSpaceProperty.setNative]=function(t){var o="initial"===t?"nowrap":t
e.prototype[i.whiteSpaceProperty.setNative].call(this,o)}
__decorate([a.profile],t.prototype,"createNativeView",null)
t=__decorate([i.CSSType("Label")],t)
return t}(i.TextBase)
t.Label=s
s.prototype._isSingleLine=!0
s.prototype.recycleNativeView="auto"
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/label/label.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/label/label.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/layouts/layout-base.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/layouts/layout-base.js"))
n.View.prototype.effectiveLeft=0
n.View.prototype.effectiveTop=0
function i(e){if(!e)throw new Error("element cannot be null or undefinied.")
return e}var a=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.getLeft=function(e){return i(e).left}
t.setLeft=function(e,t){i(e).left=t}
t.getTop=function(e){return i(e).top}
t.setTop=function(e,t){i(e).top=t}
t.prototype.onLeftChanged=function(e,t,o){}
t.prototype.onTopChanged=function(e,t,o){}
t=__decorate([n.CSSType("AbsoluteLayout")],t)
return t}(n.LayoutBase)
t.AbsoluteLayoutBase=a
a.prototype.recycleNativeView="auto"
t.leftProperty=new n.Property({name:"left",defaultValue:n.zeroLength,valueChanged:function(e,t,o){e.effectiveLeft=n.Length.toDevicePixels(o,0)
var r=e.parent
r instanceof a&&r.onLeftChanged(e,t,o)},valueConverter:function(e){return n.Length.parse(e)}})
t.leftProperty.register(n.View)
t.topProperty=new n.Property({name:"top",defaultValue:n.zeroLength,valueChanged:function(e,t,o){e.effectiveTop=n.Length.toDevicePixels(o,0)
var r=e.parent
r instanceof a&&r.onTopChanged(e,t,o)},valueConverter:function(e){return n.Length.parse(e)}})
t.topProperty.register(n.View)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout-common.js"))
function i(e){return function(t){var o=this.nativeViewProtected,r=o.getLayoutParams()||new org.nativescript.widgets.CommonLayoutParams
if(r instanceof org.nativescript.widgets.CommonLayoutParams){e.call(this,r,t)
o.setLayoutParams(r)}}}n.View.prototype[n.topProperty.setNative]=i(function(e,t){e.top=n.Length.toDevicePixels(t,0)})
n.View.prototype[n.leftProperty.setNative]=i(function(e,t){e.left=n.Length.toDevicePixels(t,0)})
var a=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){return new org.nativescript.widgets.AbsoluteLayout(this._context)}
return t}(n.AbsoluteLayoutBase)
t.AbsoluteLayout=a
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/layouts/layout-base.js")
function i(e){if(!e)throw new Error("element cannot be null or undefinied.")
return e}!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/layouts/layout-base.js"))
var a=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.getDock=function(e){return i(e).dock}
t.setDock=function(e,t){i(e).dock=t}
t.prototype.onDockChanged=function(e,t,o){}
t=__decorate([n.CSSType("DockLayout")],t)
return t}(n.LayoutBase)
t.DockLayoutBase=a
a.prototype.recycleNativeView="auto"
var s=n.makeParser(n.makeValidator("left","top","right","bottom"))
t.dockProperty=new n.Property({name:"dock",defaultValue:"left",valueChanged:function(e,t,o){if(e instanceof n.View){var r=e.parent
r instanceof a&&r.onDockChanged(e,t,o)}},valueConverter:s})
t.dockProperty.register(n.View)
t.stretchLastChildProperty=new n.Property({name:"stretchLastChild",defaultValue:!0,affectsLayout:n.isIOS,valueConverter:n.booleanConverter})
t.stretchLastChildProperty.register(a)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout-common.js"))
n.View.prototype[n.dockProperty.setNative]=function(e){var t=this.nativeViewProtected,o=t.getLayoutParams()||new org.nativescript.widgets.CommonLayoutParams
if(o instanceof org.nativescript.widgets.CommonLayoutParams){switch(e){case"left":o.dock=org.nativescript.widgets.Dock.left
break
case"top":o.dock=org.nativescript.widgets.Dock.top
break
case"right":o.dock=org.nativescript.widgets.Dock.right
break
case"bottom":o.dock=org.nativescript.widgets.Dock.bottom
break
default:throw new Error("Invalid value for dock property: "+e)}t.setLayoutParams(o)}}
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){return new org.nativescript.widgets.DockLayout(this._context)}
t.prototype[n.stretchLastChildProperty.getDefault]=function(){return!0}
t.prototype[n.stretchLastChildProperty.setNative]=function(e){this.nativeViewProtected.setStretchLastChild(e)}
return t}(n.DockLayoutBase)
t.DockLayout=i
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i,a,s,u,l,c,d,p,f,h=o("../node_modules/tns-core-modules/ui/layouts/layout-base.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/layouts/layout-base.js"))
t.ORDER_DEFAULT=1
t.FLEX_GROW_DEFAULT=0
t.FLEX_SHRINK_DEFAULT=1
!function(e){e.ROW="row"
e.ROW_REVERSE="row-reverse"
e.COLUMN="column"
e.COLUMN_REVERSE="column-reverse"
e.isValid=h.makeValidator(e.ROW,e.ROW_REVERSE,e.COLUMN,e.COLUMN_REVERSE)
e.parse=h.makeParser(e.isValid)}(n=t.FlexDirection||(t.FlexDirection={}))
!function(e){e.NOWRAP="nowrap"
e.WRAP="wrap"
e.WRAP_REVERSE="wrap-reverse"
e.isValid=h.makeValidator(e.NOWRAP,e.WRAP,e.WRAP_REVERSE)
e.parse=h.makeParser(e.isValid)}(i=t.FlexWrap||(t.FlexWrap={}))
!function(e){e.FLEX_START="flex-start"
e.FLEX_END="flex-end"
e.CENTER="center"
e.SPACE_BETWEEN="space-between"
e.SPACE_AROUND="space-around"
e.isValid=h.makeValidator(e.FLEX_START,e.FLEX_END,e.CENTER,e.SPACE_BETWEEN,e.SPACE_AROUND)
e.parse=h.makeParser(e.isValid)}(a=t.JustifyContent||(t.JustifyContent={}))
!function(e){e.DEFAULT=-1}(t.FlexBasisPercent||(t.FlexBasisPercent={}))
!function(e){e.FLEX_START="flex-start"
e.FLEX_END="flex-end"
e.CENTER="center"
e.BASELINE="baseline"
e.STRETCH="stretch"
e.isValid=h.makeValidator(e.FLEX_START,e.FLEX_END,e.CENTER,e.BASELINE,e.STRETCH)
e.parse=h.makeParser(e.isValid)}(s=t.AlignItems||(t.AlignItems={}))
!function(e){e.FLEX_START="flex-start"
e.FLEX_END="flex-end"
e.CENTER="center"
e.SPACE_BETWEEN="space-between"
e.SPACE_AROUND="space-around"
e.STRETCH="stretch"
e.isValid=h.makeValidator(e.FLEX_START,e.FLEX_END,e.CENTER,e.SPACE_BETWEEN,e.SPACE_AROUND,e.STRETCH)
e.parse=h.makeParser(e.isValid)}(u=t.AlignContent||(t.AlignContent={}))
!function(e){e.isValid=function(e){return isFinite(parseInt(e))}
e.parse=parseInt}(l=t.Order||(t.Order={}))
!function(e){e.isValid=function(e){var t=parseInt(e)
return isFinite(t)&&e>=0}
e.parse=parseFloat}(c=t.FlexGrow||(t.FlexGrow={}))
!function(e){e.isValid=function(e){var t=parseInt(e)
return isFinite(t)&&e>=0}
e.parse=parseFloat}(d=t.FlexShrink||(t.FlexShrink={}))
!function(e){e.isValid=function(e){if("boolean"==typeof e)return!0
if("string"==typeof e){var t=e.trim().toLowerCase()
return"true"===t||"false"===t}return!1}
e.parse=function(e){return e&&"true"===e.toString().trim().toLowerCase()}}(p=t.FlexWrapBefore||(t.FlexWrapBefore={}))
!function(e){e.AUTO="auto"
e.FLEX_START="flex-start"
e.FLEX_END="flex-end"
e.CENTER="center"
e.BASELINE="baseline"
e.STRETCH="stretch"
e.isValid=h.makeValidator(e.AUTO,e.FLEX_START,e.FLEX_END,e.CENTER,e.BASELINE,e.STRETCH)
e.parse=h.makeParser(e.isValid)}(f=t.AlignSelf||(t.AlignSelf={}))
function m(e){if(!e)throw new Error("element cannot be null or undefinied.")
return e}var y=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}Object.defineProperty(t.prototype,"flexDirection",{get:function(){return this.style.flexDirection},set:function(e){this.style.flexDirection=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"flexWrap",{get:function(){return this.style.flexWrap},set:function(e){this.style.flexWrap=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"justifyContent",{get:function(){return this.style.justifyContent},set:function(e){this.style.justifyContent=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"alignItems",{get:function(){return this.style.alignItems},set:function(e){this.style.alignItems=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"alignContent",{get:function(){return this.style.alignContent},set:function(e){this.style.alignContent=e},enumerable:!0,configurable:!0})
t.setOrder=function(e,t){m(e).style.order=t}
t.getOrder=function(e){return m(e).style.order}
t.setFlexGrow=function(e,t){m(e).style.flexGrow=t}
t.getFlexGrow=function(e){return m(e).style.flexGrow}
t.setFlexShrink=function(e,t){m(e).style.flexShrink=t}
t.getFlexShrink=function(e){return m(e).style.flexShrink}
t.setAlignSelf=function(e,t){m(e).style.alignSelf=t}
t.getAlignSelf=function(e){return m(e).style.alignSelf}
t.setFlexWrapBefore=function(e,t){m(e).style.flexWrapBefore=t}
t.getFlexWrapBefore=function(e){return m(e).style.flexWrapBefore}
t=__decorate([h.CSSType("FlexboxLayout")],t)
return t}(h.LayoutBase)
t.FlexboxLayoutBase=y
y.prototype.recycleNativeView="auto"
t.flexDirectionProperty=new h.CssProperty({name:"flexDirection",cssName:"flex-direction",defaultValue:n.ROW,affectsLayout:h.isIOS,valueConverter:n.parse})
t.flexDirectionProperty.register(h.Style)
t.flexWrapProperty=new h.CssProperty({name:"flexWrap",cssName:"flex-wrap",defaultValue:"nowrap",affectsLayout:h.isIOS,valueConverter:i.parse})
t.flexWrapProperty.register(h.Style)
t.justifyContentProperty=new h.CssProperty({name:"justifyContent",cssName:"justify-content",defaultValue:a.FLEX_START,affectsLayout:h.isIOS,valueConverter:a.parse})
t.justifyContentProperty.register(h.Style)
t.alignItemsProperty=new h.CssProperty({name:"alignItems",cssName:"align-items",defaultValue:s.STRETCH,affectsLayout:h.isIOS,valueConverter:s.parse})
t.alignItemsProperty.register(h.Style)
t.alignContentProperty=new h.CssProperty({name:"alignContent",cssName:"align-content",defaultValue:u.STRETCH,affectsLayout:h.isIOS,valueConverter:u.parse})
t.alignContentProperty.register(h.Style)
t.orderProperty=new h.CssProperty({name:"order",cssName:"order",defaultValue:t.ORDER_DEFAULT,valueConverter:l.parse})
t.orderProperty.register(h.Style)
Object.defineProperty(h.View.prototype,"order",{get:function(){return this.style.order},set:function(e){this.style.order=e},enumerable:!0,configurable:!0})
t.flexGrowProperty=new h.CssProperty({name:"flexGrow",cssName:"flex-grow",defaultValue:t.FLEX_GROW_DEFAULT,valueConverter:c.parse})
t.flexGrowProperty.register(h.Style)
Object.defineProperty(h.View.prototype,"flexGrow",{get:function(){return this.style.flexGrow},set:function(e){this.style.flexGrow=e},enumerable:!0,configurable:!0})
t.flexShrinkProperty=new h.CssProperty({name:"flexShrink",cssName:"flex-shrink",defaultValue:t.FLEX_SHRINK_DEFAULT,valueConverter:d.parse})
t.flexShrinkProperty.register(h.Style)
Object.defineProperty(h.View.prototype,"flexShrink",{get:function(){return this.style.flexShrink},set:function(e){this.style.flexShrink=e},enumerable:!0,configurable:!0})
t.flexWrapBeforeProperty=new h.CssProperty({name:"flexWrapBefore",cssName:"flex-wrap-before",defaultValue:!1,valueConverter:p.parse})
t.flexWrapBeforeProperty.register(h.Style)
Object.defineProperty(h.View.prototype,"flexWrapBefore",{get:function(){return this.style.flexWrapBefore},set:function(e){this.style.flexWrapBefore=e},enumerable:!0,configurable:!0})
t.alignSelfProperty=new h.CssProperty({name:"alignSelf",cssName:"align-self",defaultValue:f.AUTO,valueConverter:f.parse})
t.alignSelfProperty.register(h.Style)
Object.defineProperty(h.View.prototype,"alignSelf",{get:function(){return this.style.alignSelf},set:function(e){this.style.alignSelf=e},enumerable:!0,configurable:!0})
var g=new h.ShorthandProperty({name:"flexFlow",cssName:"flex-flow",getter:function(){return this.flexDirection+" "+this.flexWrap},converter:function(e){var o=[]
if(e===h.unsetValue){o.push([t.flexDirectionProperty,e])
o.push([t.flexWrapProperty,e])}else{var r=e&&e.trim()
if(r){var a=r.split(/\s+/)
a.length>=1&&n.isValid(a[0])&&o.push([t.flexDirectionProperty,n.parse(a[0])])
e.length>=2&&i.isValid(a[1])&&o.push([t.flexWrapProperty,i.parse(a[1])])}}return o}})
g.register(h.Style)
var v=new h.ShorthandProperty({name:"flex",cssName:"flex",getter:function(){return this.flexGrow+" "+this.flexShrink},converter:function(e){var o=[]
if(e===h.unsetValue){o.push([t.flexGrowProperty,e])
o.push([t.flexShrinkProperty,e])}else{var r=e&&e.trim()
if(r){var n=r.split(/\s+/)
if(1===n.length)switch(n[0]){case"inital":o.push([t.flexGrowProperty,0])
o.push([t.flexShrinkProperty,1])
break
case"auto":o.push([t.flexGrowProperty,1])
o.push([t.flexShrinkProperty,1])
break
case"none":o.push([t.flexGrowProperty,0])
o.push([t.flexShrinkProperty,0])
break
default:if(c.isValid(n[0])){o.push([t.flexGrowProperty,c.parse(n[0])])
o.push([t.flexShrinkProperty,1])}}if(n.length>=2&&c.isValid(n[0])&&d.isValid(n[1])){o.push([t.flexGrowProperty,c.parse(n[0])])
o.push([t.flexShrinkProperty,d.parse(n[1])])}}}return o}})
v.register(h.Style)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout.js":function(e,t,o){(function(r){var n,i,a,s,u,l
Object.defineProperty(t,"__esModule",{value:!0})
var c,d,p=o("../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout-common.js"))
function f(e){return function(t){var o=this.nativeViewProtected,r=o.getLayoutParams()||new d
if(r instanceof d){e(r,t)
o.setLayoutParams(r)}}}p.View.prototype[p.orderProperty.setNative]=f(function(e,t){return e.order=t})
p.View.prototype[p.flexGrowProperty.setNative]=f(function(e,t){return e.flexGrow=t})
p.View.prototype[p.flexShrinkProperty.setNative]=f(function(e,t){return e.flexShrink=t})
p.View.prototype[p.flexWrapBeforeProperty.setNative]=f(function(e,t){return e.wrapBefore=t})
p.View.prototype[p.alignSelfProperty.setNative]=f(function(e,t){return e.alignSelf=b[t]})
var h=(n={},n[p.FlexDirection.ROW]=0,n[p.FlexDirection.ROW_REVERSE]=1,n[p.FlexDirection.COLUMN]=2,n[p.FlexDirection.COLUMN_REVERSE]=3,n),m=(i={},i[p.FlexWrap.NOWRAP]=0,i[p.FlexWrap.WRAP]=1,i[p.FlexWrap.WRAP_REVERSE]=2,i),y=(a={},a[p.JustifyContent.FLEX_START]=0,a[p.JustifyContent.FLEX_END]=1,a[p.JustifyContent.CENTER]=2,a[p.JustifyContent.SPACE_BETWEEN]=3,a[p.JustifyContent.SPACE_AROUND]=4,a),g=(s={},s[p.AlignItems.FLEX_START]=0,s[p.AlignItems.FLEX_END]=1,s[p.AlignItems.CENTER]=2,s[p.AlignItems.BASELINE]=3,s[p.AlignItems.STRETCH]=4,s),v=(u={},u[p.AlignContent.FLEX_START]=0,u[p.AlignContent.FLEX_END]=1,u[p.AlignContent.CENTER]=2,u[p.AlignContent.SPACE_BETWEEN]=3,u[p.AlignContent.SPACE_AROUND]=4,u[p.AlignContent.STRETCH]=5,u),b=(l={},l[p.AlignSelf.AUTO]=-1,l[p.AlignSelf.FLEX_START]=0,l[p.AlignSelf.FLEX_END]=1,l[p.AlignSelf.CENTER]=2,l[p.AlignSelf.BASELINE]=3,l[p.AlignSelf.STRETCH]=4,l),_=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
if(!c){c=org.nativescript.widgets.FlexboxLayout
d=c.LayoutParams}return t}t.prototype.createNativeView=function(){return new c(this._context)}
t.prototype.resetNativeView=function(){e.prototype.resetNativeView.call(this)
this.nativeViewProtected.invalidateOrdersCache()}
t.prototype[p.flexDirectionProperty.getDefault]=function(){return p.flexDirectionProperty.defaultValue}
t.prototype[p.flexDirectionProperty.setNative]=function(e){this.nativeViewProtected.setFlexDirection(h[e])}
t.prototype[p.flexWrapProperty.getDefault]=function(){return p.flexWrapProperty.defaultValue}
t.prototype[p.flexWrapProperty.setNative]=function(e){this.nativeViewProtected.setFlexWrap(m[e])}
t.prototype[p.justifyContentProperty.getDefault]=function(){return p.justifyContentProperty.defaultValue}
t.prototype[p.justifyContentProperty.setNative]=function(e){this.nativeViewProtected.setJustifyContent(y[e])}
t.prototype[p.alignItemsProperty.getDefault]=function(){return p.alignItemsProperty.defaultValue}
t.prototype[p.alignItemsProperty.setNative]=function(e){this.nativeViewProtected.setAlignItems(g[e])}
t.prototype[p.alignContentProperty.getDefault]=function(){return p.alignContentProperty.defaultValue}
t.prototype[p.alignContentProperty.setNative]=function(e){this.nativeViewProtected.setAlignContent(v[e])}
t.prototype._updateNativeLayoutParams=function(t){e.prototype._updateNativeLayoutParams.call(this,t)
var o=t.nativeViewProtected.getLayoutParams(),r=t.style
o.order=r.order
o.flexGrow=r.flexGrow
o.flexShrink=r.flexShrink
o.wrapBefore=r.flexWrapBefore
o.alignSelf=b[r.alignSelf]
t.nativeViewProtected.setLayoutParams(o)}
t.prototype._setChildMinWidthNative=function(e){e._setMinWidthNative(0)
var t=e.nativeViewProtected,o=t.getLayoutParams()
if(o instanceof d){o.minWidth=p.Length.toDevicePixels(e.style.minWidth,0)
t.setLayoutParams(o)}}
t.prototype._setChildMinHeightNative=function(e){e._setMinHeightNative(0)
var t=e.nativeViewProtected,o=t.getLayoutParams()
if(o instanceof d){o.minHeight=p.Length.toDevicePixels(e.style.minHeight,0)
t.setLayoutParams(o)}}
return t}(p.FlexboxLayoutBase)
t.FlexboxLayout=_
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/layouts/layout-base.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/layouts/layout-base.js"))
function i(e){if(!e)throw new Error("element cannot be null or undefined.")
return e}n.View.prototype.row=0
n.View.prototype.col=0
n.View.prototype.rowSpan=1
n.View.prototype.colSpan=1
function a(e){if(!e)throw new Error("Value cannot be undefined.")
if(e.owner)throw new Error("itemSpec is already added to GridLayout.")}function s(e){if(e===c.AUTO)return l.create(1,c.AUTO)
if(-1!==e.indexOf("*")){var t=parseInt(e.replace("*","")||"1")
return l.create(t,c.STAR)}if(isNaN(parseInt(e)))throw new Error("Cannot parse item spec from string: "+e)
return l.create(parseInt(e),c.PIXEL)}function u(e,t){for(var o=e.split(/[\s,]+/),r=0,n=o.length;r<n;r++){var i=o[r].trim()
i.length>0&&t(s(o[r].trim()))}}var l=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
t._actualLength=0
if(0===arguments.length){t._value=1
t._unitType=c.STAR}else{if(2!==arguments.length)throw new Error("ItemSpec expects 0 or 2 arguments")
var o=arguments[0],r=arguments[1]
if("number"!=typeof o||"string"!=typeof r)throw new Error("First argument should be number, second argument should be string.")
if(o<0||isNaN(o)||!isFinite(o))throw new Error("Value should not be negative, NaN or Infinity: "+o)
t._value=o
t._unitType=c.parse(r)}t.index=-1
return t}t.create=function(e,o){var r=new t
r._value=e
r._unitType=o
return r}
Object.defineProperty(t.prototype,"actualLength",{get:function(){return this._actualLength},enumerable:!0,configurable:!0})
t.equals=function(e,t){return e.gridUnitType===t.gridUnitType&&e.value===t.value&&e.owner===t.owner&&e.index===t.index}
Object.defineProperty(t.prototype,"gridUnitType",{get:function(){return this._unitType},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"isAbsolute",{get:function(){return this._unitType===c.PIXEL},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"isAuto",{get:function(){return this._unitType===c.AUTO},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"isStar",{get:function(){return this._unitType===c.STAR},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"value",{get:function(){return this._value},enumerable:!0,configurable:!0})
return t}(n.Observable)
t.ItemSpec=l
var c,d=function(e){__extends(t,e)
function t(){var t=null!==e&&e.apply(this,arguments)||this
t._rows=new Array
t._cols=new Array
return t}o=t
t.getColumn=function(e){return i(e).col}
t.setColumn=function(e,t){i(e).col=t}
t.getColumnSpan=function(e){return i(e).colSpan}
t.setColumnSpan=function(e,t){i(e).colSpan=t}
t.getRow=function(e){return i(e).row}
t.setRow=function(e,t){i(e).row=t}
t.getRowSpan=function(e){return i(e).rowSpan}
t.setRowSpan=function(e,t){i(e).rowSpan=t}
t.prototype.addRow=function(e){a(e)
e.owner=this
this._rows.push(e)
this._onRowAdded(e)
this.invalidate()}
t.prototype.addColumn=function(e){a(e)
e.owner=this
this._cols.push(e)
this._onColumnAdded(e)
this.invalidate()}
t.prototype.addChildAtCell=function(e,t,r,n,i){this.addChild(e)
o.setRow(e,t)
o.setColumn(e,r)
n&&o.setRowSpan(e,n)
i&&o.setColumnSpan(e,i)}
t.prototype.removeRow=function(e){if(!e)throw new Error("Value is null.")
var t=this._rows.indexOf(e)
if(e.owner!==this||t<0)throw new Error("Row is not child of this GridLayout")
e.index=-1
this._rows.splice(t,1)
this._onRowRemoved(e,t)
this.invalidate()}
t.prototype.removeColumn=function(e){if(!e)throw new Error("Value is null.")
var t=this._cols.indexOf(e)
if(e.owner!==this||t<0)throw new Error("Column is not child of this GridLayout")
e.index=-1
this._cols.splice(t,1)
this._onColumnRemoved(e,t)
this.invalidate()}
t.prototype.removeColumns=function(){for(var e=this._cols.length-1;e>=0;e--){var t=this._cols[e]
this._onColumnRemoved(t,e)
t.index=-1}this._cols.length=0
this.invalidate()}
t.prototype.removeRows=function(){for(var e=this._rows.length-1;e>=0;e--){var t=this._rows[e]
this._onRowRemoved(t,e)
t.index=-1}this._rows.length=0
this.invalidate()}
t.prototype.onRowChanged=function(e,t,o){this.invalidate()}
t.prototype.onRowSpanChanged=function(e,t,o){this.invalidate()}
t.prototype.onColumnChanged=function(e,t,o){this.invalidate()}
t.prototype.onColumnSpanChanged=function(e,t,o){this.invalidate()}
t.prototype._onRowAdded=function(e){}
t.prototype._onColumnAdded=function(e){}
t.prototype._onRowRemoved=function(e,t){}
t.prototype._onColumnRemoved=function(e,t){}
t.prototype.getColumns=function(){return this._cols.slice()}
t.prototype.getRows=function(){return this._rows.slice()}
Object.defineProperty(t.prototype,"columnsInternal",{get:function(){return this._cols},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"rowsInternal",{get:function(){return this._rows},enumerable:!0,configurable:!0})
t.prototype.invalidate=function(){}
Object.defineProperty(t.prototype,"rows",{set:function(e){var t=this
this.removeRows()
u(e,function(e){return t.addRow(e)})},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"columns",{set:function(e){var t=this
this.removeColumns()
u(e,function(e){return t.addColumn(e)})},enumerable:!0,configurable:!0})
var o
t=o=__decorate([n.CSSType("GridLayout")],t)
return t}(n.LayoutBase)
t.GridLayoutBase=d
d.prototype.recycleNativeView="auto"
t.columnProperty=new n.Property({name:"col",defaultValue:0,valueChanged:function(e,t,o){var r=e.parent
r instanceof d&&r.onColumnChanged(e,t,o)},valueConverter:function(e){return Math.max(0,parseInt(e))}})
t.columnProperty.register(n.View)
t.columnSpanProperty=new n.Property({name:"colSpan",defaultValue:1,valueChanged:function(e,t,o){var r=e.parent
r instanceof d&&r.onColumnSpanChanged(e,t,o)},valueConverter:function(e){return Math.max(1,parseInt(e))}})
t.columnSpanProperty.register(n.View)
t.rowProperty=new n.Property({name:"row",defaultValue:0,valueChanged:function(e,t,o){var r=e.parent
r instanceof d&&r.onRowChanged(e,t,o)},valueConverter:function(e){return Math.max(0,parseInt(e))}})
t.rowProperty.register(n.View)
t.rowSpanProperty=new n.Property({name:"rowSpan",defaultValue:1,valueChanged:function(e,t,o){var r=e.parent
r instanceof d&&r.onRowSpanChanged(e,t,o)},valueConverter:function(e){return Math.max(1,parseInt(e))}})
t.rowSpanProperty.register(n.View)
!function(e){e.PIXEL="pixel"
e.STAR="star"
e.AUTO="auto"
e.isValid=n.makeValidator(e.PIXEL,e.STAR,e.AUTO)
e.parse=n.makeParser(e.isValid)}(c=t.GridUnitType||(t.GridUnitType={}))
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout-common.js"))
function i(e){return function(t){var o=this.nativeViewProtected,r=o.getLayoutParams()||new org.nativescript.widgets.CommonLayoutParams
if(r instanceof org.nativescript.widgets.CommonLayoutParams){e(r,t)
o.setLayoutParams(r)}}}n.View.prototype[n.rowProperty.setNative]=i(function(e,t){return e.row=t})
n.View.prototype[n.columnProperty.setNative]=i(function(e,t){return e.column=t})
n.View.prototype[n.rowSpanProperty.setNative]=i(function(e,t){return e.rowSpan=t})
n.View.prototype[n.columnSpanProperty.setNative]=i(function(e,t){return e.columnSpan=t})
function a(e){switch(e.gridUnitType){case n.GridUnitType.AUTO:return new org.nativescript.widgets.ItemSpec(e.value,org.nativescript.widgets.GridUnitType.auto)
case n.GridUnitType.STAR:return new org.nativescript.widgets.ItemSpec(e.value,org.nativescript.widgets.GridUnitType.star)
case n.GridUnitType.PIXEL:return new org.nativescript.widgets.ItemSpec(e.value*n.layout.getDisplayDensity(),org.nativescript.widgets.GridUnitType.pixel)
default:throw new Error("Invalid gridUnitType: "+e.gridUnitType)}}var s=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}Object.defineProperty(t.prototype,"actualLength",{get:function(){return this.nativeSpec?Math.round(this.nativeSpec.getActualLength()/n.layout.getDisplayDensity()):0},enumerable:!0,configurable:!0})
return t}(n.ItemSpec)
t.ItemSpec=s
var u=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){return new org.nativescript.widgets.GridLayout(this._context)}
t.prototype.initNativeView=function(){var t=this
e.prototype.initNativeView.call(this)
this.rowsInternal.forEach(function(e,o,r){t._onRowAdded(e)},this)
this.columnsInternal.forEach(function(e,o,r){t._onColumnAdded(e)},this)}
t.prototype.resetNativeView=function(){for(var t=this.rowsInternal.length;t--;t>=0){var o=this.rowsInternal[t]
this._onRowRemoved(o,t)}for(t=this.columnsInternal.length;t--;t>=0){o=this.columnsInternal[t]
this._onColumnRemoved(o,t)}e.prototype.resetNativeView.call(this)}
t.prototype._onRowAdded=function(e){if(this.nativeViewProtected){var t=a(e)
e.nativeSpec=t
this.nativeViewProtected.addRow(t)}}
t.prototype._onColumnAdded=function(e){if(this.nativeViewProtected){var t=a(e)
e.nativeSpec=t
this.nativeViewProtected.addColumn(t)}}
t.prototype._onRowRemoved=function(e,t){e.nativeSpec=null
this.nativeViewProtected&&this.nativeViewProtected.removeRowAt(t)}
t.prototype._onColumnRemoved=function(e,t){e.nativeSpec=null
this.nativeViewProtected&&this.nativeViewProtected.removeColumnAt(t)}
t.prototype.invalidate=function(){}
return t}(n.GridLayoutBase)
t.GridLayout=u
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/layouts/layout-base-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
var i=function(e){__extends(t,e)
function t(){var t=null!==e&&e.apply(this,arguments)||this
t._subViews=new Array
return t}t.prototype._addChildFromBuilder=function(e,t){t instanceof n.View&&this.addChild(t)}
t.prototype.getChildrenCount=function(){return this._subViews.length}
Object.defineProperty(t.prototype,"_childrenCount",{get:function(){return this._subViews.length},enumerable:!0,configurable:!0})
t.prototype.getChildAt=function(e){return this._subViews[e]}
t.prototype.getChildIndex=function(e){return this._subViews.indexOf(e)}
t.prototype.getChildById=function(e){return n.getViewById(this,e)}
t.prototype._registerLayoutChild=function(e){}
t.prototype._unregisterLayoutChild=function(e){}
t.prototype.addChild=function(e){this._subViews.push(e)
this._addView(e)
this._registerLayoutChild(e)}
t.prototype.insertChild=function(e,t){this._subViews.splice(t,0,e)
this._addView(e,t)
this._registerLayoutChild(e)}
t.prototype.removeChild=function(e){this._removeView(e)
var t=this._subViews.indexOf(e)
this._subViews.splice(t,1)
this._unregisterLayoutChild(e)}
t.prototype.removeChildren=function(){for(;0!==this.getChildrenCount();)this.removeChild(this._subViews[this.getChildrenCount()-1])}
Object.defineProperty(t.prototype,"padding",{get:function(){return this.style.padding},set:function(e){this.style.padding=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"paddingTop",{get:function(){return this.style.paddingTop},set:function(e){this.style.paddingTop=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"paddingRight",{get:function(){return this.style.paddingRight},set:function(e){this.style.paddingRight=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"paddingBottom",{get:function(){return this.style.paddingBottom},set:function(e){this.style.paddingBottom=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"paddingLeft",{get:function(){return this.style.paddingLeft},set:function(e){this.style.paddingLeft=e},enumerable:!0,configurable:!0})
t.prototype._childIndexToNativeChildIndex=function(e){if(void 0!==e){for(var t=0,o=0;o<e&&o<this._subViews.length;o++)t+=this._subViews[o]._getNativeViewsCount()
return t}}
t.prototype.eachChildView=function(e){for(var t=0,o=this._subViews.length;t<o;t++){var r=e(this._subViews[t])
if(!1===r)break}}
t.prototype.eachLayoutChild=function(e){var t=null
this.eachChildView(function(o){o._eachLayoutView(function(o){t&&!t.isCollapsed&&e(t,!1)
t=o})
return!0})
t&&!t.isCollapsed&&e(t,!0)}
return t}(n.CustomLayoutView)
t.LayoutBaseCommon=i
t.clipToBoundsProperty=new n.Property({name:"clipToBounds",defaultValue:!0,valueConverter:n.booleanConverter})
t.clipToBoundsProperty.register(i)
t.isPassThroughParentEnabledProperty=new n.Property({name:"isPassThroughParentEnabled",defaultValue:!1,valueConverter:n.booleanConverter})
t.isPassThroughParentEnabledProperty.register(i)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/layout-base-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/layout-base-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/layouts/layout-base.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/layouts/layout-base-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/layouts/layout-base-common.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype[n.clipToBoundsProperty.getDefault]=function(){return!0}
t.prototype[n.clipToBoundsProperty.setNative]=function(e){console.warn("clipToBounds with value false is not supported on Android. You can use this.android.getParent().setClipChildren(false) as an alternative")}
t.prototype[n.isPassThroughParentEnabledProperty.setNative]=function(e){this.nativeViewProtected.setPassThroughParent(e)}
t.prototype[n.paddingTopProperty.getDefault]=function(){return{value:this._defaultPaddingTop,unit:"px"}}
t.prototype[n.paddingTopProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setPaddingTop(this.nativeViewProtected,n.Length.toDevicePixels(e,0)+n.Length.toDevicePixels(this.style.borderTopWidth,0))}
t.prototype[n.paddingRightProperty.getDefault]=function(){return{value:this._defaultPaddingRight,unit:"px"}}
t.prototype[n.paddingRightProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setPaddingRight(this.nativeViewProtected,n.Length.toDevicePixels(e,0)+n.Length.toDevicePixels(this.style.borderRightWidth,0))}
t.prototype[n.paddingBottomProperty.getDefault]=function(){return{value:this._defaultPaddingBottom,unit:"px"}}
t.prototype[n.paddingBottomProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setPaddingBottom(this.nativeViewProtected,n.Length.toDevicePixels(e,0)+n.Length.toDevicePixels(this.style.borderBottomWidth,0))}
t.prototype[n.paddingLeftProperty.getDefault]=function(){return{value:this._defaultPaddingLeft,unit:"px"}}
t.prototype[n.paddingLeftProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setPaddingLeft(this.nativeViewProtected,n.Length.toDevicePixels(e,0)+n.Length.toDevicePixels(this.style.borderLeftWidth,0))}
return t}(n.LayoutBaseCommon)
t.LayoutBase=i
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/layout-base.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/layout-base.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/layouts/layout-base.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/layouts/layout-base.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t=__decorate([n.CSSType("StackLayout")],t)
return t}(n.LayoutBase)
t.StackLayoutBase=i
i.prototype.recycleNativeView="auto"
var a=n.makeParser(n.makeValidator("horizontal","vertical"))
t.orientationProperty=new n.Property({name:"orientation",defaultValue:"vertical",affectsLayout:n.isIOS,valueConverter:a})
t.orientationProperty.register(i)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout-common.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){return new org.nativescript.widgets.StackLayout(this._context)}
t.prototype[n.orientationProperty.setNative]=function(e){this.nativeViewProtected.setOrientation("vertical"===e?org.nativescript.widgets.Orientation.vertical:org.nativescript.widgets.Orientation.horizontal)}
return t}(n.StackLayoutBase)
t.StackLayout=i
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/layouts/layout-base.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/layouts/layout-base.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t=__decorate([n.CSSType("WrapLayout")],t)
return t}(n.LayoutBase)
t.WrapLayoutBase=i
i.prototype.recycleNativeView="auto"
t.itemWidthProperty=new n.Property({name:"itemWidth",defaultValue:"auto",affectsLayout:n.isIOS,valueConverter:function(e){return n.Length.parse(e)},valueChanged:function(e,t,o){return e.effectiveItemWidth=n.Length.toDevicePixels(o,-1)}})
t.itemWidthProperty.register(i)
t.itemHeightProperty=new n.Property({name:"itemHeight",defaultValue:"auto",affectsLayout:n.isIOS,valueConverter:function(e){return n.Length.parse(e)},valueChanged:function(e,t,o){return e.effectiveItemHeight=n.Length.toDevicePixels(o,-1)}})
t.itemHeightProperty.register(i)
var a=n.makeParser(n.makeValidator("horizontal","vertical"))
t.orientationProperty=new n.Property({name:"orientation",defaultValue:"horizontal",affectsLayout:n.isIOS,valueConverter:a})
t.orientationProperty.register(i)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout-common.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){return new org.nativescript.widgets.WrapLayout(this._context)}
t.prototype[n.orientationProperty.setNative]=function(e){this.nativeViewProtected.setOrientation("vertical"===e?org.nativescript.widgets.Orientation.vertical:org.nativescript.widgets.Orientation.horizontal)}
t.prototype[n.itemWidthProperty.setNative]=function(e){this.nativeViewProtected.setItemWidth(n.Length.toDevicePixels(e,-1))}
t.prototype[n.itemHeightProperty.setNative]=function(e){this.nativeViewProtected.setItemHeight(n.Length.toDevicePixels(e,-1))}
return t}(n.WrapLayoutBase)
t.WrapLayout=i
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/list-picker/list-picker-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype._getItemAsString=function(e){var t=this.items
if(!t)return" "
var o=this.isItemsSource?this.items.getItem(e):this.items[e]
return null==o?e+"":this.parseItem(o)}
t.prototype.parseItem=function(e){return this.textField?e[this.textField]+"":e+""}
t.prototype.updateSelectedValue=function(e){var t=null
if(e>=0){var o=this.items[e]
t=this.valueField?o[this.valueField]:o}this.selectedValue!==t&&this.set("selectedValue",t)}
t=__decorate([n.CSSType("ListPicker")],t)
return t}(n.View)
t.ListPickerBase=i
i.prototype.recycleNativeView="auto"
t.selectedIndexProperty=new n.CoercibleProperty({name:"selectedIndex",defaultValue:-1,valueConverter:function(e){return parseInt(e)},coerceValue:function(e,t){var o=e.items
if(o){var r=o.length-1
t<0&&(t=0)
t>r&&(t=r)}else t=-1
e.updateSelectedValue(t)
return t}})
t.selectedIndexProperty.register(i)
t.itemsProperty=new n.Property({name:"items",valueChanged:function(e,t,o){var r=o&&o.getItem
e.isItemsSource="function"==typeof r}})
t.itemsProperty.register(i)
t.textFieldProperty=new n.Property({name:"textField",defaultValue:""})
t.textFieldProperty.register(i)
t.valueFieldProperty=new n.Property({name:"valueField",defaultValue:""})
t.valueFieldProperty.register(i)
t.selectedValueProperty=new n.Property({name:"selectedValue",defaultValue:null})
t.selectedValueProperty.register(i)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/list-picker/list-picker-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/list-picker/list-picker-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/list-picker/list-picker.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i,a,s=o("../node_modules/tns-core-modules/ui/list-picker/list-picker-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/list-picker/list-picker-common.js"))
var u=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){var e=new android.widget.NumberPicker(this._context)
e.setDescendantFocusability(android.widget.NumberPicker.FOCUS_BLOCK_DESCENDANTS)
e.setMinValue(0)
e.setMaxValue(0)
e.setValue(0)
e.setWrapSelectorWheel(!1)
return e}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
!function(){if(!n){var e=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}t.prototype.format=function(e){return this.owner._getItemAsString(e)}
t=__decorate([Interfaces([android.widget.NumberPicker.Formatter])],t)
return t}(java.lang.Object),t=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}t.prototype.onValueChange=function(e,t,o){s.selectedIndexProperty.nativeValueChange(this.owner,o)
this.owner.updateSelectedValue(o)}
t=__decorate([Interfaces([android.widget.NumberPicker.OnValueChangeListener])],t)
return t}(java.lang.Object)
n=e
i=t}}()
var t=this.nativeViewProtected
this._selectorWheelPaint=function(e){if(!a){a=e.getClass().getDeclaredField("mSelectorWheelPaint")
a.setAccessible(!0)}return a.get(e)}(t)
var o=new n(this)
t.setFormatter(o)
t.formatter=o
var u=new i(this)
t.setOnValueChangedListener(u)
t.valueChangedListener=u
var l=function(e){for(var t=0,o=e.getChildCount();t<o;t++){var r=e.getChildAt(t)
if(r instanceof android.widget.EditText)return r}return null}(t)
if(l){t.editText=l
l.setFilters([])
l.setText(" ",android.widget.TextView.BufferType.NORMAL)}}
t.prototype.disposeNativeView=function(){var t=this.nativeViewProtected
t.formatter.owner=null
t.valueChangedListener.owner=null
e.prototype.disposeNativeView.call(this)}
t.prototype._fixNumberPickerRendering=function(){var e=this.nativeViewProtected
e.setFormatter(null)
e.setFormatter(e.formatter)
var t=e.editText
if(t){t.setFilters([])
t.invalidate()}e.invalidate()}
t.prototype[s.selectedIndexProperty.getDefault]=function(){return-1}
t.prototype[s.selectedIndexProperty.setNative]=function(e){e>=0&&this.nativeViewProtected.setValue(e)}
t.prototype[s.itemsProperty.getDefault]=function(){return null}
t.prototype[s.itemsProperty.setNative]=function(e){var t=e&&e.length>0?e.length-1:0
this.nativeViewProtected.setMaxValue(t)
this._fixNumberPickerRendering()
s.selectedIndexProperty.coerce(this)}
t.prototype[s.colorProperty.getDefault]=function(){var e=this.nativeViewProtected.editText
return{wheelColor:this._selectorWheelPaint.getColor(),textColor:e?e.getTextColors().getDefaultColor():-1}}
t.prototype[s.colorProperty.setNative]=function(e){var t,o
if(e instanceof s.Color)t=o=e.android
else{t=e.textColor
o=e.wheelColor}this._selectorWheelPaint.setColor(o)
var r=this.nativeViewProtected.editText
r&&r.setTextColor(t)}
return t}(s.ListPickerBase)
t.ListPicker=u
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/list-picker/list-picker.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/list-picker/list-picker.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/list-view/list-view-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js"),i=o("../node_modules/tns-core-modules/ui/builder/builder.js"),a=o("../node_modules/tns-core-modules/ui/label/label.js"),s=o("../node_modules/tns-core-modules/data/observable-array/observable-array.js"),u=o("../node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
!function(e){e.itemTemplate="itemTemplate"}(t.knownTemplates||(t.knownTemplates={}))
!function(e){e.itemTemplates="itemTemplates"}(t.knownMultiTemplates||(t.knownMultiTemplates={}))
var l=-1,c=function(e){__extends(o,e)
function o(){var t=null!==e&&e.apply(this,arguments)||this
t._itemIdGenerator=function(e,t){return t}
t._itemTemplateSelectorBindable=new a.Label
t._defaultTemplate={key:"default",createView:function(){if(t.itemTemplate)return i.parse(t.itemTemplate,t)}}
t._itemTemplatesInternal=new Array(t._defaultTemplate)
t._effectiveRowHeight=l
return t}Object.defineProperty(o.prototype,"separatorColor",{get:function(){return this.style.separatorColor},set:function(e){this.style.separatorColor=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"itemTemplateSelector",{get:function(){return this._itemTemplateSelector},set:function(e){var t=this
if("string"==typeof e){this._itemTemplateSelectorBindable.bind({sourceProperty:null,targetProperty:"templateKey",expression:e})
this._itemTemplateSelector=function(e,o,r){e.$index=o
t._itemTemplateSelectorBindable.bindingContext===e&&(t._itemTemplateSelectorBindable.bindingContext=null)
t._itemTemplateSelectorBindable.bindingContext=e
return t._itemTemplateSelectorBindable.get("templateKey")}}else"function"==typeof e&&(this._itemTemplateSelector=e)},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"itemIdGenerator",{get:function(){return this._itemIdGenerator},set:function(e){this._itemIdGenerator=e},enumerable:!0,configurable:!0})
o.prototype.refresh=function(){}
o.prototype.scrollToIndex=function(e){}
o.prototype.scrollToIndexAnimated=function(e){}
o.prototype._getItemTemplate=function(e){var t="default"
if(this.itemTemplateSelector){var o=this._getDataItem(e)
t=this._itemTemplateSelector(o,e,this.items)}for(var r=0,n=this._itemTemplatesInternal.length;r<n;r++)if(this._itemTemplatesInternal[r].key===t)return this._itemTemplatesInternal[r]
return this._itemTemplatesInternal[0]}
o.prototype._prepareItem=function(e,t){e&&(e.bindingContext=this._getDataItem(t))}
o.prototype._getDataItem=function(e){var t=this.items
return t.getItem?t.getItem(e):t[e]}
o.prototype._getDefaultItemContent=function(e){var t=new a.Label
t.bind({targetProperty:"text",sourceProperty:"$value"})
return t}
o.prototype._onItemsChanged=function(e){this.refresh()}
o.prototype._onRowHeightPropertyChanged=function(e,t){this.refresh()}
o.prototype.isItemAtIndexVisible=function(e){return!1}
o.prototype.updateEffectiveRowHeight=function(){t.rowHeightProperty.coerce(this)}
o.itemLoadingEvent="itemLoading"
o.itemTapEvent="itemTap"
o.loadMoreItemsEvent="loadMoreItems"
o.knownFunctions=["itemTemplateSelector","itemIdGenerator"]
o=__decorate([n.CSSType("ListView")],o)
return o}(n.ContainerView)
t.ListViewBase=c
c.prototype.recycleNativeView="auto"
t.itemsProperty=new n.Property({name:"items",valueChanged:function(e,t,o){t instanceof n.Observable&&u.removeWeakEventListener(t,s.ObservableArray.changeEvent,e._onItemsChanged,e)
o instanceof n.Observable&&u.addWeakEventListener(o,s.ObservableArray.changeEvent,e._onItemsChanged,e)
e.refresh()}})
t.itemsProperty.register(c)
t.itemTemplateProperty=new n.Property({name:"itemTemplate",valueChanged:function(e){e.refresh()}})
t.itemTemplateProperty.register(c)
t.itemTemplatesProperty=new n.Property({name:"itemTemplates",valueConverter:function(e){return"string"==typeof e?i.parseMultipleTemplates(e):e}})
t.itemTemplatesProperty.register(c)
t.rowHeightProperty=new n.CoercibleProperty({name:"rowHeight",defaultValue:"auto",equalityComparer:n.Length.equals,coerceValue:function(e,t){return e.nativeViewProtected?t:"auto"},valueChanged:function(e,t,o){e._effectiveRowHeight=n.Length.toDevicePixels(o,l)
e._onRowHeightPropertyChanged(t,o)},valueConverter:n.Length.parse})
t.rowHeightProperty.register(c)
t.iosEstimatedRowHeightProperty=new n.Property({name:"iosEstimatedRowHeight",valueConverter:function(e){return n.Length.parse(e)}})
t.iosEstimatedRowHeightProperty.register(c)
t.separatorColorProperty=new n.CssProperty({name:"separatorColor",cssName:"separator-color",equalityComparer:n.Color.equals,valueConverter:function(e){return new n.Color(e)}})
t.separatorColorProperty.register(n.Style)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/list-view/list-view-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/list-view/list-view-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/list-view/list-view.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/list-view/list-view-common.js"),i=o("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js"),a=o("../node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js"),s=o("../node_modules/tns-core-modules/ui/layouts/layout-base.js"),u=o("../node_modules/tns-core-modules/profiling/profiling.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/list-view/list-view-common.js"))
var l,c=n.ListViewBase.itemLoadingEvent,d=n.ListViewBase.loadMoreItemsEvent,p=n.ListViewBase.itemTapEvent
var f,h=function(e){__extends(t,e)
function t(){var t=null!==e&&e.apply(this,arguments)||this
t._androidViewId=-1
t._realizedItems=new Map
t._realizedTemplates=new Map
return t}t.prototype.createNativeView=function(){var e=new android.widget.ListView(this._context)
e.setDescendantFocusability(android.view.ViewGroup.FOCUS_AFTER_DESCENDANTS)
e.setCacheColorHint(android.graphics.Color.TRANSPARENT)
return e}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
this.updateEffectiveRowHeight()
var t=this.nativeViewProtected
!function(){if(!l){var e=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}t.prototype.onItemClick=function(e,t,o,r){var n=this.owner,i=n._realizedTemplates.get(n._getItemTemplate(o).key).get(t)
n.notify({eventName:p,object:n,index:o,view:i})}
t=__decorate([Interfaces([android.widget.AdapterView.OnItemClickListener])],t)
return t}(java.lang.Object)
l=e}}()
!function(){if(f)return
var e=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}t.prototype.getCount=function(){return this.owner&&this.owner.items&&this.owner.items.length?this.owner.items.length:0}
t.prototype.getItem=function(e){if(this.owner&&this.owner.items&&e<this.owner.items.length){var t=this.owner.items.getItem
return t?t.call(this.owner.items,e):this.owner.items[e]}return null}
t.prototype.getItemId=function(e){var t=this.getItem(e),o=e
this.owner&&t&&this.owner.items&&(o=this.owner.itemIdGenerator(t,e,this.owner.items))
return long(o)}
t.prototype.hasStableIds=function(){return!0}
t.prototype.getViewTypeCount=function(){return this.owner._itemTemplatesInternal.length}
t.prototype.getItemViewType=function(e){var t=this.owner._getItemTemplate(e),o=this.owner._itemTemplatesInternal.indexOf(t)
return o}
t.prototype.getView=function(e,t,o){if(!this.owner)return null
var r=this.owner.items?this.owner.items.length:0
e===r-1&&this.owner.notify({eventName:d,object:this.owner})
var u,l=this.owner._getItemTemplate(e)
if(t){u=this.owner._realizedTemplates.get(l.key).get(t)
if(!u)throw new Error("There is no entry with key '"+t+"' in the realized views cache for template with key'"+l.key+"'.")}else u=l.createView()
var p={eventName:c,object:this.owner,index:e,view:u,android:o,ios:void 0}
this.owner.notify(p)
p.view||(p.view=this.owner._getDefaultItemContent(e))
if(p.view){this.owner._effectiveRowHeight>-1?p.view.height=this.owner.rowHeight:p.view.height=n.unsetValue
this.owner._prepareItem(p.view,e)
if(!p.view.parent)if(p.view instanceof s.LayoutBase&&!(p.view instanceof a.ProxyViewContainer)){this.owner._addView(p.view)
t=p.view.nativeViewProtected}else{var f=new i.StackLayout
f.addChild(p.view)
this.owner._addView(f)
t=f.nativeViewProtected}var h=this.owner._realizedTemplates.get(l.key)
if(!h){h=new Map
this.owner._realizedTemplates.set(l.key,h)}h.set(t,p.view)
this.owner._realizedItems.set(t,p.view)}return t}
__decorate([u.profile],t.prototype,"getView",null)
return t}(android.widget.BaseAdapter)
f=e}()
var o=new f(this)
t.setAdapter(o)
t.adapter=o
var h=new l(this)
t.setOnItemClickListener(h)
t.itemClickListener=h
this._androidViewId<0&&(this._androidViewId=android.view.View.generateViewId())
t.setId(this._androidViewId)}
t.prototype.disposeNativeView=function(){var t=this.nativeViewProtected
t.setAdapter(null)
t.itemClickListener.owner=null
t.adapter.owner=null
this.clearRealizedCells()
e.prototype.disposeNativeView.call(this)}
t.prototype.onLoaded=function(){e.prototype.onLoaded.call(this)
this.requestLayout()}
t.prototype.refresh=function(){var e=this.nativeViewProtected
if(e&&e.getAdapter()){this._realizedItems.forEach(function(e,t){e.bindingContext instanceof n.Observable||(e.bindingContext=null)})
e.getAdapter().notifyDataSetChanged()}}
t.prototype.scrollToIndex=function(e){var t=this.nativeViewProtected
t&&t.setSelection(e)}
t.prototype.scrollToIndexAnimated=function(e){var t=this.nativeViewProtected
t&&t.smoothScrollToPosition(e)}
Object.defineProperty(t.prototype,"_childrenCount",{get:function(){return this._realizedItems.size},enumerable:!0,configurable:!0})
t.prototype.eachChildView=function(e){this._realizedItems.forEach(function(o,r){o.parent instanceof t?e(o):o.parent&&e(o.parent)})}
t.prototype._dumpRealizedTemplates=function(){console.log("Realized Templates:")
this._realizedTemplates.forEach(function(e,t){console.log("\t"+t+":")
e.forEach(function(e,t){console.log("\t\t"+t.hashCode()+": "+e)})})
console.log("Realized Items Size: "+this._realizedItems.size)}
t.prototype.clearRealizedCells=function(){var e=this
this._realizedItems.forEach(function(o,r){if(o.parent){o.parent instanceof t||e._removeView(o.parent)
o.parent._removeView(o)}})
this._realizedItems.clear()
this._realizedTemplates.clear()}
t.prototype.isItemAtIndexVisible=function(e){var t=this.nativeViewProtected,o=t.getFirstVisiblePosition(),r=t.getLastVisiblePosition()
return e>=o&&e<=r}
t.prototype[n.separatorColorProperty.getDefault]=function(){var e=this.nativeViewProtected
return{dividerHeight:e.getDividerHeight(),divider:e.getDivider()}}
t.prototype[n.separatorColorProperty.setNative]=function(e){var t=this.nativeViewProtected
if(e instanceof n.Color){t.setDivider(new android.graphics.drawable.ColorDrawable(e.android))
t.setDividerHeight(1)}else{t.setDivider(e.divider)
t.setDividerHeight(e.dividerHeight)}}
t.prototype[n.itemTemplatesProperty.getDefault]=function(){return null}
t.prototype[n.itemTemplatesProperty.setNative]=function(e){this._itemTemplatesInternal=new Array(this._defaultTemplate)
e&&(this._itemTemplatesInternal=this._itemTemplatesInternal.concat(e))
this.nativeViewProtected.setAdapter(new f(this))
this.refresh()}
__decorate([u.profile],t.prototype,"createNativeView",null)
return t}(n.ListViewBase)
t.ListView=h
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/list-view/list-view.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/list-view/list-view.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/page/page-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/content-view/content-view.js"),i=o("../node_modules/tns-core-modules/ui/frame/frame.js"),a=o("../node_modules/tns-core-modules/ui/action-bar/action-bar.js"),s=o("../node_modules/tns-core-modules/profiling/profiling.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/content-view/content-view.js"))
var u=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}o=t
Object.defineProperty(t.prototype,"navigationContext",{get:function(){return this._navigationContext},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"actionBar",{get:function(){if(!this._actionBar){this.hasActionBar=!0
this._actionBar=new a.ActionBar
this._addView(this._actionBar)}return this._actionBar},set:function(e){if(!e)throw new Error("ActionBar cannot be null or undefined.")
if(this._actionBar!==e){this._actionBar&&this._removeView(this._actionBar)
this.hasActionBar=!0
this._actionBar=e
this._addView(this._actionBar)}},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"statusBarStyle",{get:function(){return this.style.statusBarStyle},set:function(e){this.style.statusBarStyle=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"androidStatusBarBackground",{get:function(){return this.style.androidStatusBarBackground},set:function(e){this.style.androidStatusBarBackground=e},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"page",{get:function(){return this},enumerable:!0,configurable:!0})
t.prototype._addChildFromBuilder=function(t,o){o instanceof a.ActionBar?this.actionBar=o:e.prototype._addChildFromBuilder.call(this,t,o)}
t.prototype.getKeyframeAnimationWithName=function(e){return this._styleScope.getKeyframeAnimationWithName(e)}
Object.defineProperty(t.prototype,"frame",{get:function(){var e=this.parent
return e instanceof i.Frame?e:void 0},enumerable:!0,configurable:!0})
t.prototype.createNavigatedData=function(e,t){return{eventName:e,object:this,context:this.navigationContext,isBackNavigation:t}}
t.prototype.onNavigatingTo=function(e,t,r){this._navigationContext=e
if(t&&this._styleScope){this._styleScope.ensureSelectors()
this._cssState.isSelectorsLatestVersionApplied()||this._onCssStateChange()}t||null==r||(this.bindingContext=r)
this.notify(this.createNavigatedData(o.navigatingToEvent,t))}
t.prototype.onNavigatedTo=function(e){this.notify(this.createNavigatedData(o.navigatedToEvent,e))}
t.prototype.onNavigatingFrom=function(e){this.notify(this.createNavigatedData(o.navigatingFromEvent,e))}
t.prototype.onNavigatedFrom=function(e){this.notify(this.createNavigatedData(o.navigatedFromEvent,e))
this._navigationContext=void 0}
t.prototype.eachChildView=function(t){e.prototype.eachChildView.call(this,t)
this.actionBar&&t(this.actionBar)}
Object.defineProperty(t.prototype,"_childrenCount",{get:function(){return(this.content?1:0)+(this._actionBar?1:0)},enumerable:!0,configurable:!0})
var o
t.navigatingToEvent="navigatingTo"
t.navigatedToEvent="navigatedTo"
t.navigatingFromEvent="navigatingFrom"
t.navigatedFromEvent="navigatedFrom"
__decorate([s.profile],t.prototype,"onNavigatingTo",null)
__decorate([s.profile],t.prototype,"onNavigatedTo",null)
__decorate([s.profile],t.prototype,"onNavigatingFrom",null)
__decorate([s.profile],t.prototype,"onNavigatedFrom",null)
t=o=__decorate([n.CSSType("Page")],t)
return t}(n.ContentView)
t.PageBase=u
u.prototype.recycleNativeView="never"
t.actionBarHiddenProperty=new n.Property({name:"actionBarHidden",affectsLayout:n.isIOS,valueConverter:n.booleanConverter})
t.actionBarHiddenProperty.register(u)
t.backgroundSpanUnderStatusBarProperty=new n.Property({name:"backgroundSpanUnderStatusBar",defaultValue:!1,affectsLayout:n.isIOS,valueConverter:n.booleanConverter})
t.backgroundSpanUnderStatusBarProperty.register(u)
t.enableSwipeBackNavigationProperty=new n.Property({name:"enableSwipeBackNavigation",defaultValue:!0,valueConverter:n.booleanConverter})
t.enableSwipeBackNavigationProperty.register(u)
t.statusBarStyleProperty=new n.CssProperty({name:"statusBarStyle",cssName:"status-bar-style"})
t.statusBarStyleProperty.register(n.Style)
t.androidStatusBarBackgroundProperty=new n.CssProperty({name:"androidStatusBarBackground",cssName:"android-status-bar-background",equalityComparer:n.Color.equals,valueConverter:function(e){return new n.Color(e)}})
t.androidStatusBarBackgroundProperty.register(n.Style)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/page/page-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/page/page-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/page/page.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/page/page-common.js"),i=o("../node_modules/tns-core-modules/ui/action-bar/action-bar.js"),a=o("../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout.js"),s=o("../node_modules/tns-core-modules/platform/platform.js"),u=o("../node_modules/tns-core-modules/profiling/profiling.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/page/page-common.js"))
var l=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){var e=new org.nativescript.widgets.GridLayout(this._context)
e.addRow(new org.nativescript.widgets.ItemSpec(1,org.nativescript.widgets.GridUnitType.auto))
e.addRow(new org.nativescript.widgets.ItemSpec(1,org.nativescript.widgets.GridUnitType.star))
return e}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
this.nativeViewProtected.setBackgroundColor(-1)}
t.prototype._addViewToNativeVisualTree=function(t,o){if(this.nativeViewProtected&&t.nativeViewProtected)if(t instanceof i.ActionBar){a.GridLayout.setRow(t,0)
t.horizontalAlignment="stretch"
t.verticalAlignment="top"}else a.GridLayout.setRow(t,1)
return e.prototype._addViewToNativeVisualTree.call(this,t,o)}
t.prototype.onLoaded=function(){e.prototype.onLoaded.call(this)
void 0!==this.actionBarHidden&&this.updateActionBar()}
t.prototype.updateActionBar=function(){this.actionBar.update()}
t.prototype[n.actionBarHiddenProperty.setNative]=function(e){this.updateActionBar()}
t.prototype[n.statusBarStyleProperty.getDefault]=function(){if(s.device.sdkVersion>="21"){var e=this._context.getWindow(),t=e.getDecorView()
return{color:e.getStatusBarColor(),systemUiVisibility:t.getSystemUiVisibility()}}return null}
t.prototype[n.statusBarStyleProperty.setNative]=function(e){if(s.device.sdkVersion>="21"){var t=this._context.getWindow(),o=t.getDecorView()
if("light"===e){t.setStatusBarColor(-657931)
o.setSystemUiVisibility(8192)}else if("dark"===e){t.setStatusBarColor(1711276032)
o.setSystemUiVisibility(0)}else{t.setStatusBarColor(e.color)
o.setSystemUiVisibility(e.systemUiVisibility)}}}
t.prototype[n.androidStatusBarBackgroundProperty.getDefault]=function(){if(s.device.sdkVersion>="21"){var e=this._context.getWindow()
return e.getStatusBarColor()}return null}
t.prototype[n.androidStatusBarBackgroundProperty.setNative]=function(e){if(s.device.sdkVersion>="21"){var t=this._context.getWindow(),o=e instanceof n.Color?e.android:e
t.setStatusBarColor(o)}}
__decorate([u.profile],t.prototype,"onLoaded",null)
return t}(n.PageBase)
t.Page=l
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/page/page.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/page/page.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/placeholder/placeholder.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js"),i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}o=t
t.prototype.createNativeView=function(){var e={eventName:o.creatingViewEvent,object:this,view:void 0,context:this._context}
this.notify(e)
return e.view}
var o
t.creatingViewEvent="creatingView"
t=o=__decorate([n.CSSType("Placeholder")],t)
return t}(n.View)
t.Placeholder=i
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/placeholder/placeholder.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/placeholder/placeholder.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/progress/progress-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t=__decorate([n.CSSType("Progress")],t)
return t}(n.View)
t.ProgressBase=i
i.prototype.recycleNativeView="auto"
t.valueProperty=new n.CoercibleProperty({name:"value",defaultValue:0,coerceValue:function(e,t){return t<0?0:Math.min(t,e.maxValue)},valueConverter:function(e){return parseInt(e)}})
t.valueProperty.register(i)
t.maxValueProperty=new n.Property({name:"maxValue",defaultValue:100,valueChanged:function(e,o,r){t.valueProperty.coerce(e)},valueConverter:function(e){return parseInt(e)}})
t.maxValueProperty.register(i)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/progress/progress-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/progress/progress-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/progress/progress.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/progress/progress-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/progress/progress-common.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){return new android.widget.ProgressBar(this._context,null,16842872)}
t.prototype[n.valueProperty.getDefault]=function(){return 0}
t.prototype[n.valueProperty.setNative]=function(e){this.nativeViewProtected.setProgress(e)}
t.prototype[n.maxValueProperty.getDefault]=function(){return 100}
t.prototype[n.maxValueProperty.setNative]=function(e){this.nativeViewProtected.setMax(e)}
t.prototype[n.colorProperty.getDefault]=function(){return null}
t.prototype[n.colorProperty.setNative]=function(e){var t=this.nativeViewProtected.getProgressDrawable()
t&&(e instanceof n.Color?t.setColorFilter(e.android,android.graphics.PorterDuff.Mode.SRC_IN):t.clearColorFilter())}
t.prototype[n.backgroundColorProperty.getDefault]=function(){return null}
t.prototype[n.backgroundColorProperty.setNative]=function(e){var t=this.nativeViewProtected.getProgressDrawable()
if(t&&t instanceof android.graphics.drawable.LayerDrawable&&t.getNumberOfLayers()>0){var o=t.getDrawable(0)
o&&(e instanceof n.Color?o.setColorFilter(e.android,android.graphics.PorterDuff.Mode.SRC_IN):o.clearColorFilter())}}
t.prototype[n.backgroundInternalProperty.getDefault]=function(){return null}
t.prototype[n.backgroundInternalProperty.setNative]=function(e){}
return t}(n.ProgressBase)
t.Progress=i
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/progress/progress.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/progress/progress.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/layouts/layout-base.js"),i=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
t.nativeViewProtected=void 0
return t}Object.defineProperty(t.prototype,"ios",{get:function(){return null},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"android",{get:function(){return null},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"isLayoutRequested",{get:function(){return!1},enumerable:!0,configurable:!0})
t.prototype.createNativeView=function(){}
t.prototype._getNativeViewsCount=function(){var e=0
this.eachChildView(function(t){e+=t._getNativeViewsCount()
return!0})
return e}
t.prototype._eachLayoutView=function(e){this.eachChildView(function(t){t.isCollapsed||t._eachLayoutView(e)
return!0})}
t.prototype._addViewToNativeVisualTree=function(t,o){n.traceEnabled()&&n.traceWrite("ViewContainer._addViewToNativeVisualTree for a child "+t+" ViewContainer.parent: "+this.parent,n.traceCategories.ViewHierarchy)
e.prototype._addViewToNativeVisualTree.call(this,t)
var r=this.parent
if(r instanceof n.View){var i=0,a=0
r instanceof n.LayoutBase&&(i=r._childIndexToNativeChildIndex(r.getChildIndex(this)))
a=void 0!==o?this._childIndexToNativeChildIndex(o):this._getNativeViewsCount()
n.traceEnabled()&&n.traceWrite("ProxyViewContainer._addViewToNativeVisualTree at: "+o+" base: "+i+" additional: "+a,n.traceCategories.ViewHierarchy)
return r._addViewToNativeVisualTree(t,i+a)}return!1}
t.prototype._removeViewFromNativeVisualTree=function(t){n.traceEnabled()&&n.traceWrite("ProxyViewContainer._removeViewFromNativeVisualTree for a child "+t+" ViewContainer.parent: "+this.parent,n.traceCategories.ViewHierarchy)
e.prototype._removeViewFromNativeVisualTree.call(this,t)
var o=this.parent
if(o instanceof n.View)return o._removeViewFromNativeVisualTree(t)}
t.prototype._registerLayoutChild=function(e){var t=this.parent
t instanceof n.LayoutBase&&t._registerLayoutChild(e)}
t.prototype._unregisterLayoutChild=function(e){var t=this.parent
t instanceof n.LayoutBase&&t._unregisterLayoutChild(e)}
t.prototype._parentChanged=function(t){e.prototype._parentChanged.call(this,t)
var o=this.parent&&!t,r=this.parent,i=t
o&&r instanceof n.LayoutBase?this.eachLayoutChild(function(e){r._registerLayoutChild(e)
return!0}):i instanceof n.LayoutBase&&this.eachLayoutChild(function(e){i._unregisterLayoutChild(e)
return!0})}
t=__decorate([n.CSSType("ProxyViewContainer")],t)
return t}(n.LayoutBase)
t.ProxyViewContainer=i
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/repeater/repeater.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/label/label.js"),i=o("../node_modules/tns-core-modules/ui/layouts/layout-base.js"),a=o("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js"),s=o("../node_modules/tns-core-modules/data/observable-array/observable-array.js"),u=o("../node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js"),l=o("../node_modules/tns-core-modules/ui/builder/builder.js"),c=o("../node_modules/tns-core-modules/profiling/profiling.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/layouts/layout-base.js"))
!function(e){e.itemTemplate="itemTemplate"}(t.knownTemplates||(t.knownTemplates={}))
var d=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
t._isDirty=!1
t.itemsLayout=new a.StackLayout
return t}t.prototype.onLoaded=function(){this._isDirty&&this.refresh()
e.prototype.onLoaded.call(this)}
t.prototype._requestRefresh=function(){this._isDirty=!0
this.isLoaded&&this.refresh()}
t.prototype.refresh=function(){this.itemsLayout&&this.itemsLayout.removeChildren()
if(this.items){for(var e=this.items.length,t=0;t<e;t++){var o=this.itemTemplate?l.parse(this.itemTemplate,this):this._getDefaultItemContent(t),r=this._getDataItem(t)
o.bindingContext=r
this.itemsLayout.addChild(o)}this._isDirty=!1}}
t.prototype._onItemsChanged=function(e){this._requestRefresh()}
t.prototype._getDefaultItemContent=function(e){var t=new n.Label
t.bind({targetProperty:"text",sourceProperty:"$value"})
return t}
t.prototype._getDataItem=function(e){var t=this.items
return t.getItem?t.getItem(e):this.items[e]}
Object.defineProperty(t.prototype,"_childrenCount",{get:function(){return this.itemsLayout?1:0},enumerable:!0,configurable:!0})
t.prototype.eachChildView=function(e){this.itemsLayout&&e(this.itemsLayout)}
t.prototype.onLayout=function(e,t,o,r){var n=this.getSafeAreaInsets(),a=this.effectiveBorderLeftWidth+this.effectivePaddingLeft+n.left,s=this.effectiveBorderTopWidth+this.effectivePaddingTop+n.top,u=this.effectiveBorderRightWidth+this.effectivePaddingRight+n.right,l=this.effectiveBorderBottomWidth+this.effectivePaddingBottom+n.bottom,c=a,d=s,p=o-e-u,f=r-t-l
i.View.layoutChild(this,this.itemsLayout,c,d,p,f)}
t.prototype.onMeasure=function(e,t){var o=i.View.measureChild(this,this.itemsLayout,e,t),r=i.layout.getMeasureSpecSize(e),n=i.layout.getMeasureSpecMode(e),a=i.layout.getMeasureSpecSize(t),s=i.layout.getMeasureSpecMode(t),u=i.View.resolveSizeAndState(o.measuredWidth,r,n,0),l=i.View.resolveSizeAndState(o.measuredHeight,a,s,0)
this.setMeasuredDimension(u,l)}
__decorate([c.profile],t.prototype,"onLoaded",null)
t=__decorate([i.CSSType("Repeater")],t)
return t}(i.CustomLayoutView)
t.Repeater=d
d.prototype.recycleNativeView="auto"
t.itemTemplateProperty=new i.Property({name:"itemTemplate",affectsLayout:!0,valueChanged:function(e){e._requestRefresh()}})
t.itemTemplateProperty.register(d)
t.itemsProperty=new i.Property({name:"items",affectsLayout:!0,valueChanged:function(e,t,o){t instanceof s.ObservableArray&&u.removeWeakEventListener(t,s.ObservableArray.changeEvent,e._onItemsChanged,e)
o instanceof s.ObservableArray&&u.addWeakEventListener(o,s.ObservableArray.changeEvent,e._onItemsChanged,e)
e._requestRefresh()}})
t.itemsProperty.register(d)
t.itemsLayoutProperty=new i.Property({name:"itemsLayout",affectsLayout:!0,valueChanged:function(e,t,o){if(t){e._removeView(t)
t.removeChildren()}o&&e._addView(o)
e._requestRefresh()}})
t.itemsLayoutProperty.register(d)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/repeater/repeater.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/repeater/repeater.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/scroll-view/scroll-view-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/content-view/content-view.js"),i=o("../node_modules/tns-core-modules/profiling/profiling.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/content-view/content-view.js"))
var a=function(e){__extends(t,e)
function t(){var t=null!==e&&e.apply(this,arguments)||this
t._scrollChangeCount=0
return t}o=t
t.prototype.addEventListener=function(t,r,n){e.prototype.addEventListener.call(this,t,r,n)
if(t===o.scrollEvent){this._scrollChangeCount++
this.attach()}}
t.prototype.removeEventListener=function(t,r,n){e.prototype.removeEventListener.call(this,t,r,n)
if(t===o.scrollEvent){this._scrollChangeCount--
this.dettach()}}
t.prototype.onLoaded=function(){e.prototype.onLoaded.call(this)
this.attach()}
t.prototype.onUnloaded=function(){e.prototype.onUnloaded.call(this)
this.dettach()}
t.prototype.attach=function(){this._scrollChangeCount>0&&this.isLoaded&&this.attachNative()}
t.prototype.dettach=function(){0===this._scrollChangeCount&&this.isLoaded&&this.dettachNative()}
t.prototype.attachNative=function(){}
t.prototype.dettachNative=function(){}
Object.defineProperty(t.prototype,"horizontalOffset",{get:function(){return 0},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"verticalOffset",{get:function(){return 0},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"scrollableWidth",{get:function(){return 0},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"scrollableHeight",{get:function(){return 0},enumerable:!0,configurable:!0})
var o
t.scrollEvent="scroll"
__decorate([i.profile],t.prototype,"onLoaded",null)
t=o=__decorate([n.CSSType("ScrollView")],t)
return t}(n.ContentView)
t.ScrollViewBase=a
var s=n.makeParser(n.makeValidator("horizontal","vertical"))
t.orientationProperty=new n.Property({name:"orientation",defaultValue:"vertical",affectsLayout:!0,valueChanged:function(e,t,o){e._onOrientationChanged()},valueConverter:s})
t.orientationProperty.register(a)
t.scrollBarIndicatorVisibleProperty=new n.Property({name:"scrollBarIndicatorVisible",defaultValue:!0,valueConverter:n.booleanConverter})
t.scrollBarIndicatorVisibleProperty.register(a)
t.isScrollEnabledProperty=new n.Property({name:"isScrollEnabled",defaultValue:!0,valueConverter:n.booleanConverter})
t.isScrollEnabledProperty.register(a)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/scroll-view/scroll-view-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/scroll-view/scroll-view-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/scroll-view/scroll-view.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/scroll-view/scroll-view-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/scroll-view/scroll-view-common.js"))
var i=function(e){__extends(t,e)
function t(){var t=null!==e&&e.apply(this,arguments)||this
t._androidViewId=-1
t._lastScrollX=-1
t._lastScrollY=-1
return t}Object.defineProperty(t.prototype,"horizontalOffset",{get:function(){var e=this.nativeViewProtected
return e?e.getScrollX()/n.layout.getDisplayDensity():0},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"verticalOffset",{get:function(){var e=this.nativeViewProtected
return e?e.getScrollY()/n.layout.getDisplayDensity():0},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"scrollableWidth",{get:function(){var e=this.nativeViewProtected
return e&&"horizontal"===this.orientation?e.getScrollableLength()/n.layout.getDisplayDensity():0},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"scrollableHeight",{get:function(){var e=this.nativeViewProtected
return e&&"vertical"===this.orientation?e.getScrollableLength()/n.layout.getDisplayDensity():0},enumerable:!0,configurable:!0})
t.prototype[n.isUserInteractionEnabledProperty.setNative]=function(e){this.nativeViewProtected.setClickable(e)
this.nativeViewProtected.setFocusable(e)
this.nativeViewProtected.setScrollEnabled(e)}
t.prototype[n.isScrollEnabledProperty.getDefault]=function(){return this.nativeViewProtected.getScrollEnabled()}
t.prototype[n.isScrollEnabledProperty.setNative]=function(e){this.nativeViewProtected.setScrollEnabled(e)}
t.prototype[n.scrollBarIndicatorVisibleProperty.getDefault]=function(){return!0}
t.prototype[n.scrollBarIndicatorVisibleProperty.setNative]=function(e){"horizontal"===this.orientation?this.nativeViewProtected.setHorizontalScrollBarEnabled(e):this.nativeViewProtected.setVerticalScrollBarEnabled(e)}
t.prototype.scrollToVerticalOffset=function(e,t){var o=this.nativeViewProtected
if(o&&"vertical"===this.orientation&&this.isScrollEnabled){e*=n.layout.getDisplayDensity()
t?o.smoothScrollTo(0,e):o.scrollTo(0,e)}}
t.prototype.scrollToHorizontalOffset=function(e,t){var o=this.nativeViewProtected
if(o&&"horizontal"===this.orientation&&this.isScrollEnabled){e*=n.layout.getDisplayDensity()
t?o.smoothScrollTo(e,0):o.scrollTo(e,0)}}
t.prototype.createNativeView=function(){return"horizontal"===this.orientation?new org.nativescript.widgets.HorizontalScrollView(this._context):new org.nativescript.widgets.VerticalScrollView(this._context)}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
this._androidViewId<0&&(this._androidViewId=android.view.View.generateViewId())
this.nativeViewProtected.setId(this._androidViewId)}
t.prototype._onOrientationChanged=function(){if(this.nativeViewProtected){var e=this.parent
if(e){e._removeView(this)
e._addView(this)}}}
t.prototype.attachNative=function(){var e=new WeakRef(this)
this.handler=new android.view.ViewTreeObserver.OnScrollChangedListener({onScrollChanged:function(){var t=e.get()
t&&t._onScrollChanged()}})
this.nativeViewProtected.getViewTreeObserver().addOnScrollChangedListener(this.handler)}
t.prototype._onScrollChanged=function(){var e=this.nativeViewProtected
if(e){var o=e.getScrollX(),r=e.getScrollY()
if(o!==this._lastScrollX||r!==this._lastScrollY){this.notify({object:this,eventName:t.scrollEvent,scrollX:o/n.layout.getDisplayDensity(),scrollY:r/n.layout.getDisplayDensity()})
this._lastScrollX=o
this._lastScrollY=r}}}
t.prototype.dettachNative=function(){this.nativeViewProtected.getViewTreeObserver().removeOnScrollChangedListener(this.handler)
this.handler=null}
return t}(n.ScrollViewBase)
t.ScrollView=i
i.prototype.recycleNativeView="never"
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/scroll-view/scroll-view.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/scroll-view/scroll-view.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/search-bar/search-bar-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.submitEvent="submit"
t.clearEvent="clear"
t=__decorate([n.CSSType("SearchBar")],t)
return t}(n.View)
t.SearchBarBase=i
i.prototype.recycleNativeView="auto"
t.textProperty=new n.Property({name:"text",defaultValue:"",affectsLayout:n.isIOS})
t.textProperty.register(i)
t.hintProperty=new n.Property({name:"hint",defaultValue:""})
t.hintProperty.register(i)
t.textFieldHintColorProperty=new n.Property({name:"textFieldHintColor",equalityComparer:n.Color.equals,valueConverter:function(e){return new n.Color(e)}})
t.textFieldHintColorProperty.register(i)
t.textFieldBackgroundColorProperty=new n.Property({name:"textFieldBackgroundColor",equalityComparer:n.Color.equals,valueConverter:function(e){return new n.Color(e)}})
t.textFieldBackgroundColorProperty.register(i)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/search-bar/search-bar-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/search-bar/search-bar-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/search-bar/search-bar.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/styling/font.js"),i=o("../node_modules/tns-core-modules/ui/search-bar/search-bar-common.js"),a=o("../node_modules/tns-core-modules/utils/utils.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/search-bar/search-bar-common.js"))
var s,u,l=Symbol("searchText"),c=Symbol("query")
var d=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.dismissSoftInput=function(){a.ad.dismissSoftInput(this.nativeViewProtected)}
t.prototype.focus=function(){var t=e.prototype.focus.call(this)
t&&a.ad.showSoftInput(this.nativeViewProtected)
return t}
t.prototype.createNativeView=function(){var e=new androidx.appcompat.widget.SearchView(this._context)
e.setIconified(!1)
return e}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
var t=this.nativeViewProtected
!function(){if(!s){var e=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}t.prototype.onQueryTextChange=function(e){var t=this.owner
i.textProperty.nativeValueChange(t,e)
""===e&&this[l]!==e&&t._emit(i.SearchBarBase.clearEvent)
this[l]=e
this[c]=void 0
return!0}
t.prototype.onQueryTextSubmit=function(e){var t=this.owner
""!==e&&this[c]!==e&&t._emit(i.SearchBarBase.submitEvent)
this[c]=e
return!0}
t=__decorate([Interfaces([androidx.appcompat.widget.SearchView.OnQueryTextListener])],t)
return t}(java.lang.Object),t=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}t.prototype.onClose=function(){this.owner._emit(i.SearchBarBase.clearEvent)
return!0}
t=__decorate([Interfaces([androidx.appcompat.widget.SearchView.OnCloseListener])],t)
return t}(java.lang.Object)
s=e
u=t}}()
var o=new s(this)
t.setOnQueryTextListener(o)
t.queryTextListener=o
var n=new u(this)
t.setOnCloseListener(n)
t.closeListener=n}
t.prototype.disposeNativeView=function(){var t=this.nativeViewProtected
t.closeListener.owner=null
t.queryTextListener.owner=null
this._searchPlate=null
this._searchTextView=null
e.prototype.disposeNativeView.call(this)}
t.prototype[i.isEnabledProperty.setNative]=function(e){!function e(t,o){t.setEnabled(o)
if(t instanceof android.view.ViewGroup)for(var r=0;r<t.getChildCount();r++){var n=t.getChildAt(r)
e(n,o)}}(this.nativeViewProtected,e)}
t.prototype[i.isUserInteractionEnabledProperty.setNative]=function(e){!function e(t,o){t.setClickable(o)
t.setFocusable(o)
if(t instanceof android.view.ViewGroup)for(var r=0;r<t.getChildCount();r++){var n=t.getChildAt(r)
e(n,o)}}(this.nativeViewProtected,e)}
t.prototype[i.backgroundColorProperty.getDefault]=function(){var e=this.nativeViewProtected.getDrawingCacheBackgroundColor()
return e}
t.prototype[i.backgroundColorProperty.setNative]=function(e){var t
t="number"==typeof e?e:e.android
this.nativeViewProtected.setBackgroundColor(t)
var o=this._getSearchPlate()
o.setBackgroundColor(t)}
t.prototype[i.colorProperty.getDefault]=function(){var e=this._getTextView()
return e.getCurrentTextColor()}
t.prototype[i.colorProperty.setNative]=function(e){var t="number"==typeof e?e:e.android,o=this._getTextView()
o.setTextColor(t)}
t.prototype[i.fontSizeProperty.getDefault]=function(){return{nativeSize:this._getTextView().getTextSize()}}
t.prototype[i.fontSizeProperty.setNative]=function(e){"number"==typeof e?this._getTextView().setTextSize(e):this._getTextView().setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX,e.nativeSize)}
t.prototype[i.fontInternalProperty.getDefault]=function(){return this._getTextView().getTypeface()}
t.prototype[i.fontInternalProperty.setNative]=function(e){this._getTextView().setTypeface(e instanceof n.Font?e.getAndroidTypeface():e)}
t.prototype[i.backgroundInternalProperty.getDefault]=function(){return null}
t.prototype[i.backgroundInternalProperty.setNative]=function(e){}
t.prototype[i.textProperty.getDefault]=function(){return""}
t.prototype[i.textProperty.setNative]=function(e){var t=null==e?"":e.toString()
this.nativeViewProtected.setQuery(t,!1)}
t.prototype[i.hintProperty.getDefault]=function(){return null}
t.prototype[i.hintProperty.setNative]=function(e){null==e?this.nativeViewProtected.setQueryHint(null):this.nativeViewProtected.setQueryHint(e.toString())}
t.prototype[i.textFieldBackgroundColorProperty.getDefault]=function(){var e=this._getTextView()
return e.getBackground()}
t.prototype[i.textFieldBackgroundColorProperty.setNative]=function(e){var t=this._getTextView()
e instanceof i.Color?t.setBackgroundColor(e.android):t.setBackground(e)}
t.prototype[i.textFieldHintColorProperty.getDefault]=function(){var e=this._getTextView()
return e.getCurrentTextColor()}
t.prototype[i.textFieldHintColorProperty.setNative]=function(e){var t=this._getTextView(),o=e instanceof i.Color?e.android:e
t.setHintTextColor(o)}
t.prototype._getTextView=function(){if(!this._searchTextView){var e=this.nativeViewProtected.getContext().getPackageName(),t=this.nativeViewProtected.getContext().getResources().getIdentifier("search_src_text","id",e)
this._searchTextView=this.nativeViewProtected.findViewById(t)}return this._searchTextView}
t.prototype._getSearchPlate=function(){if(!this._searchPlate){var e=this.nativeViewProtected.getContext().getPackageName(),t=this.nativeViewProtected.getContext().getResources().getIdentifier("search_plate","id",e)
this._searchPlate=this.nativeViewProtected.findViewById(t)}return this._searchPlate}
return t}(i.SearchBarBase)
t.SearchBar=d
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/search-bar/search-bar.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/search-bar/search-bar.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
!function(e){e.items="items"}(t.knownCollections||(t.knownCollections={}))
var i=function(e){__extends(t,e)
function t(){var t=null!==e&&e.apply(this,arguments)||this
t._title=""
return t}Object.defineProperty(t.prototype,"title",{get:function(){return this._title},set:function(e){var t=null!=e?e.toString():""
if(this._title!==t){this._title=t
this._update()}},enumerable:!0,configurable:!0})
t=__decorate([n.CSSType("SegmentedBarItem")],t)
return t}(n.ViewBase)
t.SegmentedBarItemBase=i
var a=function(e){__extends(o,e)
function o(){return null!==e&&e.apply(this,arguments)||this}Object.defineProperty(o.prototype,"selectedBackgroundColor",{get:function(){return this.style.selectedBackgroundColor},set:function(e){this.style.selectedBackgroundColor=e},enumerable:!0,configurable:!0})
o.prototype._addArrayFromBuilder=function(e,t){"items"===e&&(this.items=t)}
o.prototype._addChildFromBuilder=function(e,o){if("SegmentedBarItem"===e){var r=o,n=this.items
if(n){n.push(r)
this._addView(r)}else{n=new Array
n.push(r)
this.items=n}this.nativeViewProtected&&this[t.itemsProperty.setNative](n)}}
o.prototype.onItemsChanged=function(e,t){if(e)for(var o=0,r=e.length;o<r;o++)this._removeView(e[o])
if(t)for(o=0,r=t.length;o<r;o++)this._addView(t[o])}
o.prototype.eachChild=function(e){var t=this.items
t&&t.forEach(function(t,o){e(t)})}
o.selectedIndexChangedEvent="selectedIndexChanged"
o=__decorate([n.CSSType("SegmentedBar")],o)
return o}(n.View)
t.SegmentedBarBase=a
a.prototype.recycleNativeView="auto"
t.selectedIndexProperty=new n.CoercibleProperty({name:"selectedIndex",defaultValue:-1,valueChanged:function(e,t,o){e.notify({eventName:a.selectedIndexChangedEvent,object:e,oldIndex:t,newIndex:o})},coerceValue:function(e,t){var o=e.items
if(o){var r=o.length-1
t<0&&(t=0)
t>r&&(t=r)}else t=-1
return t},valueConverter:function(e){return parseInt(e)}})
t.selectedIndexProperty.register(a)
t.itemsProperty=new n.Property({name:"items",valueChanged:function(e,t,o){e.onItemsChanged(t,o)}})
t.itemsProperty.register(a)
t.selectedBackgroundColorProperty=new n.InheritedCssProperty({name:"selectedBackgroundColor",cssName:"selected-background-color",equalityComparer:n.Color.equals,valueConverter:function(e){return new n.Color(e)}})
t.selectedBackgroundColorProperty.register(n.Style)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/segmented-bar/segmented-bar-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/segmented-bar/segmented-bar-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/styling/font.js"),i=o("../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar-common.js"))
var a,s,u,l,c
var d=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.setupNativeView=function(e){var t=this.parent.nativeViewProtected.getTabWidget().getChildAt(e).findViewById(16908310)
this.setNativeView(t)
t&&this.titleDirty&&this._update()}
t.prototype._update=function(){var e=this.nativeViewProtected
if(e){var t=this.title
t=null==t?"":t
e.setText(t)
this.titleDirty=!1}else this.titleDirty=!0}
t.prototype[i.colorProperty.getDefault]=function(){return this.nativeViewProtected.getCurrentTextColor()}
t.prototype[i.colorProperty.setNative]=function(e){var t=e instanceof i.Color?e.android:e
this.nativeViewProtected.setTextColor(t)}
t.prototype[i.fontSizeProperty.getDefault]=function(){return{nativeSize:this.nativeViewProtected.getTextSize()}}
t.prototype[i.fontSizeProperty.setNative]=function(e){"number"==typeof e?this.nativeViewProtected.setTextSize(e):this.nativeViewProtected.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX,e.nativeSize)}
t.prototype[i.fontInternalProperty.getDefault]=function(){return this.nativeViewProtected.getTypeface()}
t.prototype[i.fontInternalProperty.setNative]=function(e){this.nativeViewProtected.setTypeface(e instanceof n.Font?e.getAndroidTypeface():e)}
t.prototype[i.selectedBackgroundColorProperty.getDefault]=function(){var e=this.nativeViewProtected.getParent()
return e.getBackground()}
t.prototype[i.selectedBackgroundColorProperty.setNative]=function(e){var t=this.nativeViewProtected,o=t.getParent()
if(e instanceof i.Color){var r=e.android,n=o.getBackground()
if(a>21&&n){var u=p(n,t.getResources())
u.setColorFilter(r,android.graphics.PorterDuff.Mode.SRC_IN)
o.setBackground(u)}else{var l=new android.graphics.drawable.StateListDrawable,c=new org.nativescript.widgets.SegmentedBarColorDrawable(r,s),d=Array.create("int",1)
d[0]=16842913
l.addState(d,c)
l.setBounds(0,15,o.getRight(),o.getBottom())
o.setBackground(l)}}else{n=p(e,t.getResources())
o.setBackground(n)}}
return t}(i.SegmentedBarItemBase)
t.SegmentedBarItem=d
function p(e,t){if(e){var o=e.getConstantState()
if(o)return o.newDrawable(t)}return e}var f=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.shouldChangeSelectedIndex=function(){return!this._addingTab}
t.prototype.createNativeView=function(){!function(){if(!l){a=android.os.Build.VERSION.SDK_INT
s=i.layout.toDevicePixels(a>=21?2:5)
var e=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}t.prototype.onTabChanged=function(e){var t=this.owner
t.shouldChangeSelectedIndex()&&(t.selectedIndex=parseInt(e))}
t=__decorate([Interfaces([android.widget.TabHost.OnTabChangeListener])],t)
return t}(java.lang.Object),t=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}t.prototype.createTabContent=function(e){var t=new android.widget.TextView(this.owner._context)
t.setVisibility(android.view.View.GONE)
t.setMaxLines(1)
t.setEllipsize(android.text.TextUtils.TruncateAt.END)
return t}
t=__decorate([Interfaces([android.widget.TabHost.TabContentFactory])],t)
return t}(java.lang.Object),o=function(e){__extends(t,e)
function t(t,o){var n=e.call(this,t,o)||this
return r.__native(n)}t.prototype.onAttachedToWindow=function(){}
return t}(android.widget.TabHost)
u=o
l=e
c=t}}()
var e=this._context,t=new u(e,null),o=new android.widget.LinearLayout(e)
o.setOrientation(android.widget.LinearLayout.VERTICAL)
var n=new android.widget.TabWidget(e)
n.setId(16908307)
o.addView(n)
var d=new android.widget.FrameLayout(e)
d.setId(16908305)
d.setVisibility(android.view.View.GONE)
o.addView(d)
t.addView(o)
return t}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
var t=this.nativeViewProtected,o=new l(this)
t.setOnTabChangedListener(o)
t.listener=o
t.setup()
this._tabContentFactory=this._tabContentFactory||new c(this)}
t.prototype.disposeNativeView=function(){var t=this.nativeViewProtected
t.listener.owner=null
e.prototype.disposeNativeView.call(this)}
t.prototype.insertTab=function(e,t){var o=this.nativeViewProtected,r=o.newTabSpec(t+"")
r.setIndicator(e.title+"")
r.setContent(this._tabContentFactory)
this._addingTab=!0
o.addTab(r)
e.setupNativeView(t)
this._addingTab=!1}
t.prototype[i.selectedIndexProperty.getDefault]=function(){return-1}
t.prototype[i.selectedIndexProperty.setNative]=function(e){this.nativeViewProtected.setCurrentTab(e)}
t.prototype[i.itemsProperty.getDefault]=function(){return null}
t.prototype[i.itemsProperty.setNative]=function(e){var t=this
this.nativeViewProtected.clearAllTabs()
var o=e
o&&o.forEach(function(e,o,r){return t.insertTab(e,o)})
i.selectedIndexProperty.coerce(this)}
return t}(i.SegmentedBarBase)
t.SegmentedBar=f
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/segmented-bar/segmented-bar.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/segmented-bar/segmented-bar.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/slider/slider-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t=__decorate([n.CSSType("Slider")],t)
return t}(n.View)
t.SliderBase=i
i.prototype.recycleNativeView="auto"
t.valueProperty=new n.CoercibleProperty({name:"value",defaultValue:0,coerceValue:function(e,t){t=Math.max(t,e.minValue)
t=Math.min(t,e.maxValue)
return t},valueConverter:function(e){return n.isIOS?parseFloat(e):parseInt(e)}})
t.valueProperty.register(i)
t.minValueProperty=new n.Property({name:"minValue",defaultValue:0,valueChanged:function(e,o,r){t.maxValueProperty.coerce(e)
t.valueProperty.coerce(e)},valueConverter:function(e){return n.isIOS?parseFloat(e):parseInt(e)}})
t.minValueProperty.register(i)
t.maxValueProperty=new n.CoercibleProperty({name:"maxValue",defaultValue:100,coerceValue:function(e,t){var o=e.minValue
t<o&&(t=o)
return t},valueChanged:function(e,o,r){return t.valueProperty.coerce(e)},valueConverter:function(e){return n.isIOS?parseFloat(e):parseInt(e)}})
t.maxValueProperty.register(i)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/slider/slider-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/slider/slider-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/slider/slider.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i,a=o("../node_modules/tns-core-modules/ui/slider/slider-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/slider/slider-common.js"))
var s=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){n||(n=android.widget.SeekBar)
return new n(this._context)}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
var t=this.nativeViewProtected
t.owner=this
!function(){if(!i){var e=function(e){__extends(t,e)
function t(){var t=e.call(this)||this
return r.__native(t)}t.prototype.onProgressChanged=function(e,t,o){var r=e.owner
if(r&&!r._supressNativeValue){var n=t+r.minValue
a.valueProperty.nativeValueChange(r,n)}}
t.prototype.onStartTrackingTouch=function(e){}
t.prototype.onStopTrackingTouch=function(e){}
t=__decorate([Interfaces([android.widget.SeekBar.OnSeekBarChangeListener])],t)
return t}(java.lang.Object)
i=new e}}()
var o=i
t.setOnSeekBarChangeListener(o)}
t.prototype.disposeNativeView=function(){this.nativeViewProtected.owner=null
e.prototype.disposeNativeView.call(this)}
t.prototype.resetNativeView=function(){e.prototype.resetNativeView.call(this)
var t=this.nativeViewProtected
t.setMax(100)
t.setProgress(0)
t.setKeyProgressIncrement(1)}
t.prototype.setNativeValuesSilently=function(){this._supressNativeValue=!0
var e=this.nativeViewProtected
try{e.setMax(this.maxValue-this.minValue)
e.setProgress(this.value-this.minValue)}finally{this._supressNativeValue=!1}}
t.prototype[a.valueProperty.setNative]=function(e){this.setNativeValuesSilently()}
t.prototype[a.minValueProperty.setNative]=function(e){this.setNativeValuesSilently()}
t.prototype[a.maxValueProperty.getDefault]=function(){return 100}
t.prototype[a.maxValueProperty.setNative]=function(e){this.setNativeValuesSilently()}
t.prototype[a.colorProperty.getDefault]=function(){return-1}
t.prototype[a.colorProperty.setNative]=function(e){e instanceof a.Color?this.nativeViewProtected.getThumb().setColorFilter(e.android,android.graphics.PorterDuff.Mode.SRC_IN):this.nativeViewProtected.getThumb().clearColorFilter()}
t.prototype[a.backgroundColorProperty.getDefault]=function(){return-1}
t.prototype[a.backgroundColorProperty.setNative]=function(e){e instanceof a.Color?this.nativeViewProtected.getProgressDrawable().setColorFilter(e.android,android.graphics.PorterDuff.Mode.SRC_IN):this.nativeViewProtected.getProgressDrawable().clearColorFilter()}
t.prototype[a.backgroundInternalProperty.getDefault]=function(){return null}
t.prototype[a.backgroundInternalProperty.setNative]=function(e){}
return t}(a.SliderBase)
t.Slider=s
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/slider/slider.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/slider/slider.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/styling/background-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/styling/linear-gradient.js"),i=o("../node_modules/tns-core-modules/color/color.js"),a=function(){function e(){this.borderTopWidth=0
this.borderRightWidth=0
this.borderBottomWidth=0
this.borderLeftWidth=0
this.borderTopLeftRadius=0
this.borderTopRightRadius=0
this.borderBottomLeftRadius=0
this.borderBottomRightRadius=0}e.prototype.clone=function(){var t=new e
t.color=this.color
t.image=this.image
t.repeat=this.repeat
t.position=this.position
t.size=this.size
t.borderTopColor=this.borderTopColor
t.borderRightColor=this.borderRightColor
t.borderBottomColor=this.borderBottomColor
t.borderLeftColor=this.borderLeftColor
t.borderTopWidth=this.borderTopWidth
t.borderRightWidth=this.borderRightWidth
t.borderBottomWidth=this.borderBottomWidth
t.borderLeftWidth=this.borderLeftWidth
t.borderTopLeftRadius=this.borderTopLeftRadius
t.borderTopRightRadius=this.borderTopRightRadius
t.borderBottomRightRadius=this.borderBottomRightRadius
t.borderBottomLeftRadius=this.borderBottomLeftRadius
t.clipPath=this.clipPath
return t}
e.prototype.withColor=function(e){var t=this.clone()
t.color=e
return t}
e.prototype.withImage=function(e){var t=this.clone()
t.image=e
return t}
e.prototype.withRepeat=function(e){var t=this.clone()
t.repeat=e
return t}
e.prototype.withPosition=function(e){var t=this.clone()
t.position=e
return t}
e.prototype.withSize=function(e){var t=this.clone()
t.size=e
return t}
e.prototype.withBorderTopColor=function(e){var t=this.clone()
t.borderTopColor=e
return t}
e.prototype.withBorderRightColor=function(e){var t=this.clone()
t.borderRightColor=e
return t}
e.prototype.withBorderBottomColor=function(e){var t=this.clone()
t.borderBottomColor=e
return t}
e.prototype.withBorderLeftColor=function(e){var t=this.clone()
t.borderLeftColor=e
return t}
e.prototype.withBorderTopWidth=function(e){var t=this.clone()
t.borderTopWidth=e
return t}
e.prototype.withBorderRightWidth=function(e){var t=this.clone()
t.borderRightWidth=e
return t}
e.prototype.withBorderBottomWidth=function(e){var t=this.clone()
t.borderBottomWidth=e
return t}
e.prototype.withBorderLeftWidth=function(e){var t=this.clone()
t.borderLeftWidth=e
return t}
e.prototype.withBorderTopLeftRadius=function(e){var t=this.clone()
t.borderTopLeftRadius=e
return t}
e.prototype.withBorderTopRightRadius=function(e){var t=this.clone()
t.borderTopRightRadius=e
return t}
e.prototype.withBorderBottomRightRadius=function(e){var t=this.clone()
t.borderBottomRightRadius=e
return t}
e.prototype.withBorderBottomLeftRadius=function(e){var t=this.clone()
t.borderBottomLeftRadius=e
return t}
e.prototype.withClipPath=function(e){var t=this.clone()
t.clipPath=e
return t}
e.prototype.isEmpty=function(){return!(this.color||this.image||this.hasBorderWidth()||this.hasBorderRadius()||this.clipPath)}
e.equals=function(e,t){if(!e&&!t)return!0
if(!e||!t)return!1
var o=!1
o=e instanceof n.LinearGradient&&t instanceof n.LinearGradient?n.LinearGradient.equals(e,t):e.image===t.image
return i.Color.equals(e.color,t.color)&&o&&e.position===t.position&&e.repeat===t.repeat&&e.size===t.size&&i.Color.equals(e.borderTopColor,t.borderTopColor)&&i.Color.equals(e.borderRightColor,t.borderRightColor)&&i.Color.equals(e.borderBottomColor,t.borderBottomColor)&&i.Color.equals(e.borderLeftColor,t.borderLeftColor)&&e.borderTopWidth===t.borderTopWidth&&e.borderRightWidth===t.borderRightWidth&&e.borderBottomWidth===t.borderBottomWidth&&e.borderLeftWidth===t.borderLeftWidth&&e.borderTopLeftRadius===t.borderTopLeftRadius&&e.borderTopRightRadius===t.borderTopRightRadius&&e.borderBottomRightRadius===t.borderBottomRightRadius&&e.borderBottomLeftRadius===t.borderBottomLeftRadius&&e.clipPath===t.clipPath}
e.prototype.hasBorderColor=function(){return!!(this.borderTopColor||this.borderRightColor||this.borderBottomColor||this.borderLeftColor)}
e.prototype.hasBorderWidth=function(){return this.borderTopWidth>0||this.borderRightWidth>0||this.borderBottomWidth>0||this.borderLeftWidth>0}
e.prototype.hasBorderRadius=function(){return this.borderTopLeftRadius>0||this.borderTopRightRadius>0||this.borderBottomRightRadius>0||this.borderBottomLeftRadius>0}
e.prototype.hasUniformBorderColor=function(){return i.Color.equals(this.borderTopColor,this.borderRightColor)&&i.Color.equals(this.borderTopColor,this.borderBottomColor)&&i.Color.equals(this.borderTopColor,this.borderLeftColor)}
e.prototype.hasUniformBorderWidth=function(){return this.borderTopWidth===this.borderRightWidth&&this.borderTopWidth===this.borderBottomWidth&&this.borderTopWidth===this.borderLeftWidth}
e.prototype.hasUniformBorderRadius=function(){return this.borderTopLeftRadius===this.borderTopRightRadius&&this.borderTopLeftRadius===this.borderBottomRightRadius&&this.borderTopLeftRadius===this.borderBottomLeftRadius}
e.prototype.hasUniformBorder=function(){return this.hasUniformBorderColor()&&this.hasUniformBorderWidth()&&this.hasUniformBorderRadius()}
e.prototype.getUniformBorderColor=function(){if(this.hasUniformBorderColor())return this.borderTopColor}
e.prototype.getUniformBorderWidth=function(){return this.hasUniformBorderWidth()?this.borderTopWidth:0}
e.prototype.getUniformBorderRadius=function(){return this.hasUniformBorderRadius()?this.borderTopLeftRadius:0}
e.prototype.toString=function(){return"isEmpty: "+this.isEmpty()+"; color: "+this.color+"; image: "+this.image+"; repeat: "+this.repeat+"; position: "+this.position+"; size: "+this.size+"; borderTopColor: "+this.borderTopColor+"; borderRightColor: "+this.borderRightColor+"; borderBottomColor: "+this.borderBottomColor+"; borderLeftColor: "+this.borderLeftColor+"; borderTopWidth: "+this.borderTopWidth+"; borderRightWidth: "+this.borderRightWidth+"; borderBottomWidth: "+this.borderBottomWidth+"; borderLeftWidth: "+this.borderLeftWidth+"; borderTopLeftRadius: "+this.borderTopLeftRadius+"; borderTopRightRadius: "+this.borderTopRightRadius+"; borderBottomRightRadius: "+this.borderBottomRightRadius+"; borderBottomLeftRadius: "+this.borderBottomLeftRadius+"; clipPath: "+this.clipPath+";"}
e.default=new e
return e}()
t.Background=a
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/background-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/background-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/styling/background.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/styling/linear-gradient.js"),i=o("../node_modules/tns-core-modules/utils/utils.js"),a=o("../node_modules/tns-core-modules/css-value/index.js"),s=o("../node_modules/tns-core-modules/file-system/file-system.js"),u=o("../node_modules/tns-core-modules/application/application.js"),l=o("../node_modules/tns-core-modules/profiling/profiling.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/styling/background-common.js"))
!function(e){var t
function o(e){return e instanceof android.widget.Button||e instanceof androidx.appcompat.widget.Toolbar&&function(){t||(t=android.os.Build.VERSION.SDK_INT)
return t}()>=21}e.onBackgroundOrBorderPropertyChanged=function(e){var t=e.nativeViewProtected
if(t){var r=e.style.backgroundInternal,n=t.getBackground(),a=e
if(void 0===a._cachedDrawable&&n){var s=n.getConstantState()
a._cachedDrawable=s||n}if(!o(t)||!n||n instanceof org.nativescript.widgets.BorderDrawable||r.hasBorderWidth()||r.hasBorderRadius()||r.clipPath||r.image||!r.color)if(r.isEmpty()){var u=a._cachedDrawable,l=void 0
l=u instanceof android.graphics.drawable.Drawable.ConstantState?u.newDrawable(t.getResources()):u instanceof android.graphics.drawable.Drawable?u:null
t.setBackground(l)
a._cachedDrawable=void 0}else{var c=n
if(n instanceof org.nativescript.widgets.BorderDrawable)h(e,c)
else{c=new org.nativescript.widgets.BorderDrawable(i.layout.getDisplayDensity(),e.toString())
h(e,c)
t.setBackground(c)}}else{var d=n.backgroundColor=r.color.android
n.mutate()
n.setColorFilter(d,android.graphics.PorterDuff.Mode.SRC_IN)
n.invalidateSelf()
n.backgroundColor=d}var p=Math.ceil(e.effectiveBorderLeftWidth+e.effectivePaddingLeft),f=Math.ceil(e.effectiveBorderTopWidth+e.effectivePaddingTop),m=Math.ceil(e.effectiveBorderRightWidth+e.effectivePaddingRight),y=Math.ceil(e.effectiveBorderBottomWidth+e.effectivePaddingBottom)
t.setPadding(p,f,m,y)}}}(t.ad||(t.ad={}))
var c,d,p,f=/url\(('|")(.*?)\1\)/
function h(e,t){var o,r,a=e.nativeViewProtected,u=a.getContext(),l=e.style.backgroundInternal
if(l){var c=m(l.position),d=m(l.size),p=void 0
if(l.image&&"string"==typeof l.image){p=l.image
var h=p.match(f)
h&&h[2]&&(p=h[2])}var y=null
if(i.isDataURI(p)){var g=p.split(",")[1]
if(void 0!==g){y=(o=g,r=android.util.Base64.decode(o,android.util.Base64.DEFAULT),android.graphics.BitmapFactory.decodeByteArray(r,0,r.length))
p=null}}else if(i.isFileOrResourcePath(p)&&0!==p.indexOf(i.RESOURCE_PREFIX)){var v=p
0===v.indexOf("~/")&&(v=s.path.join(s.knownFolders.currentApp().path,v.replace("~/","")))
p=i.FILE_PREFIX+v}var b=null
l.image&&l.image instanceof n.LinearGradient&&(b=function(e){var t=Array.create("int",e.colorStops.length),o=Array.create("float",e.colorStops.length),r=!1
e.colorStops.forEach(function(e,n){t[n]=e.color.android
if(e.offset){o[n]=e.offset.value
r=!0}})
var n=e.angle/(2*Math.PI),i=Math.pow(Math.sin(Math.PI*(n+.75)),2),a=Math.pow(Math.sin(Math.PI*(n+.5)),2),s=Math.pow(Math.sin(Math.PI*(n+.25)),2),u=Math.pow(Math.sin(Math.PI*n),2)
return new org.nativescript.widgets.LinearGradientDefinition(i,a,s,u,t,r?o:null)}(l.image))
t.refresh(l.borderTopColor?l.borderTopColor.android:-16777216,l.borderRightColor?l.borderRightColor.android:-16777216,l.borderBottomColor?l.borderBottomColor.android:-16777216,l.borderLeftColor?l.borderLeftColor.android:-16777216,l.borderTopWidth,l.borderRightWidth,l.borderBottomWidth,l.borderLeftWidth,l.borderTopLeftRadius,l.borderTopRightRadius,l.borderBottomRightRadius,l.borderBottomLeftRadius,l.clipPath,l.color?l.color.android:0,p,y,b,u,l.repeat,l.position,c,l.size,d)}}function m(e){if(!e)return null
for(var t=a.parse(e),o=Array.create(org.nativescript.widgets.CSSValue,t.length),r=0,n=t.length;r<n;r++)o[r]=new org.nativescript.widgets.CSSValue(t[r].type,t[r].string,t[r].unit,t[r].value)
return o}!function(e){e[e.none=0]="none"
e[e.memory=1]="memory"
e[e.diskAndMemory=2]="diskAndMemory"}(c=t.CacheMode||(t.CacheMode={}))
function y(e,t,o,r){void 0===t&&(t=c.diskAndMemory)
void 0===o&&(o=.25)
void 0===r&&(r=10485760)
if(d!==t){d=t
p?p.clearCache():p=org.nativescript.widgets.image.Fetcher.getInstance(e)
var n=new org.nativescript.widgets.image.Cache.CacheParams
n.memoryCacheEnabled=t!==c.none
n.setMemCacheSizePercent(o)
n.diskCacheEnabled=t===c.diskAndMemory
n.diskCacheSize=r
var i=org.nativescript.widgets.image.Cache.getInstance(n)
p.addImageCache(i)
p.initCache()}}t.initImageCache=y
u.on("livesync",function(e){p&&p.clearCache()})
u.android.on("activityStarted",l.profile("initImageCache",function(e){p?p.initCache():y(e.activity)}))
u.android.on("activityStopped",l.profile("closeImageCache",function(e){p&&p.closeCache()}))
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/background.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/background.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/styling/converters.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/enums/enums.js"),i=Object.freeze({ease:n.AnimationCurve.ease,linear:n.AnimationCurve.linear,"ease-in":n.AnimationCurve.easeIn,"ease-out":n.AnimationCurve.easeOut,"ease-in-out":n.AnimationCurve.easeInOut,spring:n.AnimationCurve.spring})
t.timeConverter=function(e){var t=parseFloat(e);-1===e.indexOf("ms")&&(t*=1e3)
return Math.max(0,t)}
t.animationTimingFunctionConverter=function(e){return e?i[e]||function(e){var t=/\((.*?)\)/.exec(e),o=t&&t[1].split(",").map(a)
if(e.startsWith("cubic-bezier")&&t&&4===o.length){var r=o.slice(),i=r[0],s=r[1],u=r[2],l=r[3]
return n.AnimationCurve.cubicBezier(i,s,u,l)}throw new Error("Invalid value for animation: "+e)}(e):n.AnimationCurve.ease}
function a(e){var t=parseFloat(e)
return t<0?0:t>1?1:t}if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/converters.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/converters.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/styling/css-animation-parser.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/properties/properties.js"),i=o("../node_modules/tns-core-modules/ui/animation/keyframe-animation.js"),a=o("../node_modules/tns-core-modules/ui/styling/converters.js"),s=o("../node_modules/tns-core-modules/ui/styling/style-properties.js"),u=Object.freeze({"animation-name":function(e,t){return e.name=t},"animation-duration":function(e,t){return e.duration=a.timeConverter(t)},"animation-delay":function(e,t){return e.delay=a.timeConverter(t)},"animation-timing-function":function(e,t){return e.curve=a.animationTimingFunctionConverter(t)},"animation-iteration-count":function(e,t){return e.iterations="infinite"===t?Number.MAX_VALUE:parseFloat(t)},"animation-direction":function(e,t){return e.isReverse="reverse"===t},"animation-fill-mode":function(e,t){return e.isForwards="forwards"===t}}),l=function(){function e(){}e.keyframeAnimationsFromCSSDeclarations=function(e){if(null!=e){var t=new Array,o=void 0
e.forEach(function(e){var r=e.property,n=e.value
if("animation"===r)!function(e,t){if("string"==typeof e)for(var o=e.split(/[,]+/),r=0,n=o;r<n.length;r++){var s=n[r],u=new i.KeyframeAnimationInfo,l=s.trim().split(/[ ]+/)
l.length>0&&(u.name=l[0])
l.length>1&&(u.duration=a.timeConverter(l[1]))
l.length>2&&(u.curve=a.animationTimingFunctionConverter(l[2]))
l.length>3&&(u.delay=a.timeConverter(l[3]))
l.length>4&&(u.iterations=parseInt(l[4]))
l.length>5&&(u.isReverse="reverse"===l[4])
l.length>6&&(u.isForwards="forwards"===l[5])
if(l.length>7)throw new Error("Invalid value for animation: "+e)
t.push(u)}}(n,t)
else{var s=u[r]
if(s){if(void 0===o){o=new i.KeyframeAnimationInfo
t.push(o)}s(o,n)}}})
return 0===t.length?void 0:t}}
e.keyframesArrayFromCSS=function(e){for(var t=new Array,o=0,r=e;o<r.length;o++)for(var n=r[o],i=c(n.declarations),s=0,u=n.values;s<u.length;s++){var l=u[s]
if("from"===l)l=0
else if("to"===l)l=1
else{l=parseFloat(l)/100
l<0&&(l=0)
l>100&&(l=100)}var d=t[l]
if(void 0===d){d={}
d.duration=l
t[l]=d}for(var p=0,f=n.declarations;p<f.length;p++){var h=f[p]
"animation-timing-function"===h.property&&(d.curve=a.animationTimingFunctionConverter(h.value))}d.declarations=i}var m=new Array
for(var y in t)m.push(t[y])
m.sort(function(e,t){return e.duration-t.duration})
return m}
return e}()
t.CssAnimationParser=l
function c(e){var t=e.reduce(function(e,t){var o=t.property,r=t.value,i=n.CssAnimationProperty._getByCssName(o)
if("string"==typeof o&&i&&i._valueConverter)e[i.name]=i._valueConverter(r)
else if("string"==typeof r&&"transform"===o){var a=s.transformConverter(r)
Object.assign(e,a)}return e},{})
return Object.keys(t).map(function(e){return{property:e,value:t[e]}})}t.parseKeyframeDeclarations=c
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/css-animation-parser.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/css-animation-parser.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/styling/css-selector/css-selector.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/utils/types.js"),a=o("../node_modules/tns-core-modules/utils/utils-common.js"),s=o("../node_modules/tns-core-modules/css/parser.js")
!function(e){e.Dynamic=!0
e.Static=!1}(n||(n={}))
function u(e){if(!e.parent||!e.parent.getChildIndex||!e.parent.getChildAt)return null
var t=e.parent.getChildIndex(e)
return 0===t?null:e.parent.getChildAt(t-1)}function l(e,t,o){void 0===o&&(o=!1)
return function(r){r.prototype.specificity=e
r.prototype.rarity=t
r.prototype.combinator=void 0
r.prototype.dynamic=o
return r}}var c=function(){function e(){}e.prototype.lookupSort=function(e,t){e.sortAsUniversal(t||this)}
e=__decorate([l(0,0,n.Static)],e)
return e}()
t.SelectorCore=c
var d=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.accumulateChanges=function(e,t){if(!this.dynamic)return this.match(e)
if(this.mayMatch(e)){this.trackChanges(e,t)
return!0}return!1}
t.prototype.mayMatch=function(e){return this.match(e)}
t.prototype.trackChanges=function(e,t){}
return t}(c)
t.SimpleSelector=d
function p(e){return e?" "+e+" ":""}var f=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.e=t
return o}t.prototype.toString=function(){return"<error: "+this.e+">"}
t.prototype.match=function(e){return!1}
t.prototype.lookupSort=function(e,t){}
t=__decorate([l(0,4,n.Static)],t)
return t}(d)
t.InvalidSelector=f
var h=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.toString=function(){return"*"+p(this.combinator)}
t.prototype.match=function(e){return!0}
t=__decorate([l(0,0,n.Static)],t)
return t}(d)
t.UniversalSelector=h
var m=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.id=t
return o}t.prototype.toString=function(){return"#"+this.id+p(this.combinator)}
t.prototype.match=function(e){return e.id===this.id}
t.prototype.lookupSort=function(e,t){e.sortById(this.id,t||this)}
t=__decorate([l(65536,3,n.Static)],t)
return t}(d)
t.IdSelector=m
var y=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.cssType=t
return o}t.prototype.toString=function(){return""+this.cssType+p(this.combinator)}
t.prototype.match=function(e){return e.cssType===this.cssType}
t.prototype.lookupSort=function(e,t){e.sortByType(this.cssType,t||this)}
t=__decorate([l(1,1,n.Static)],t)
return t}(d)
t.TypeSelector=y
var g=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.cssClass=t
return o}t.prototype.toString=function(){return"."+this.cssClass+p(this.combinator)}
t.prototype.match=function(e){return e.cssClasses&&e.cssClasses.has(this.cssClass)}
t.prototype.lookupSort=function(e,t){e.sortByClass(this.cssClass,t||this)}
t=__decorate([l(256,2,n.Static)],t)
return t}(d)
t.ClassSelector=g
var v=function(e){__extends(t,e)
function t(t,o,r){var n=e.call(this)||this
n.attribute=t
n.test=o
n.value=r
if(!o){n.match=function(e){return!i.isNullOrUndefined(e[t])}
return n}r||(n.match=function(e){return!1})
var s=a.escapeRegexSymbols(r),u=null
switch(o){case"^=":u=new RegExp("^"+s)
break
case"$=":u=new RegExp(s+"$")
break
case"*=":u=new RegExp(s)
break
case"=":u=new RegExp("^"+s+"$")
break
case"~=":if(/\s/.test(r)){n.match=function(e){return!1}
return n}u=new RegExp("(^|\\s)"+s+"(\\s|$)")
break
case"|=":u=new RegExp("^"+s+"(-|$)")}if(u){n.match=function(e){return u.test(e[t]+"")}
return n}n.match=function(e){return!1}
return n}t.prototype.toString=function(){return"["+this.attribute+p(this.test)+(this.test&&this.value||"")+"]"+p(this.combinator)}
t.prototype.match=function(e){return!1}
t.prototype.mayMatch=function(e){return!0}
t.prototype.trackChanges=function(e,t){t.addAttribute(e,this.attribute)}
t=__decorate([l(256,0,n.Dynamic)],t)
return t}(d)
t.AttributeSelector=v
var b=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.cssPseudoClass=t
return o}t.prototype.toString=function(){return":"+this.cssPseudoClass+p(this.combinator)}
t.prototype.match=function(e){return e.cssPseudoClasses&&e.cssPseudoClasses.has(this.cssPseudoClass)}
t.prototype.mayMatch=function(e){return!0}
t.prototype.trackChanges=function(e,t){t.addPseudoClass(e,this.cssPseudoClass)}
t=__decorate([l(256,0,n.Dynamic)],t)
return t}(d)
t.PseudoClassSelector=b
var _=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.selectors=t
o.specificity=t.reduce(function(e,t){return t.specificity+e},0)
o.head=o.selectors.reduce(function(e,t){return!e||t.rarity>e.rarity?t:e},null)
o.dynamic=t.some(function(e){return e.dynamic})
return o}t.prototype.toString=function(){return""+this.selectors.join("")+p(this.combinator)}
t.prototype.match=function(e){return this.selectors.every(function(t){return t.match(e)})}
t.prototype.mayMatch=function(e){return this.selectors.every(function(t){return t.mayMatch(e)})}
t.prototype.trackChanges=function(e,t){this.selectors.forEach(function(o){return o.trackChanges(e,t)})}
t.prototype.lookupSort=function(e,t){this.head.lookupSort(e,t||this)}
return t}(d)
t.SimpleSelectorSequence=_
var w=function(e){__extends(t,e)
function t(o){var r=e.call(this)||this
r.selectors=o
var n,i,a=[void 0," ",">","+"],s=[]
o.reverse().forEach(function(e){if(-1===a.indexOf(e.combinator))throw new Error('Unsupported combinator "'+e.combinator+'".')
void 0!==e.combinator&&" "!==e.combinator||s.push(i=[n=[]])
">"===e.combinator&&i.push(n=[])
n.push(e)})
r.groups=s.map(function(e){return new t.ChildGroup(e.map(function(e){return new t.SiblingGroup(e)}))})
r.last=o[0]
r.specificity=o.reduce(function(e,t){return t.specificity+e},0)
r.dynamic=o.some(function(e){return e.dynamic})
return r}t.prototype.toString=function(){return this.selectors.join("")}
t.prototype.match=function(e){return this.groups.every(function(t,o){if(0===o){e=t.match(e)
return!!e}for(var r=e;r=r.parent;)if(e=t.match(r))return!0
return!1})}
t.prototype.lookupSort=function(e,t){this.last.lookupSort(e,this)}
t.prototype.accumulateChanges=function(e,t){if(!this.dynamic)return this.match(e)
var o=[],r=this.groups.every(function(t,r){if(0===r){var n=t.mayMatch(e)
o.push({left:e,right:e})
e=n
return!!e}for(var i=e;i=i.parent;){n=t.mayMatch(i)
if(n){o.push({left:i,right:null})
e=n
return!0}}return!1})
if(!r)return!1
if(!t)return r
for(var n=0;n<this.groups.length;n++){var i=this.groups[n]
if(i.dynamic){var a=o[n],s=a.left
do{i.mayMatch(s)&&i.trackChanges(s,t)}while(s!==a.right&&(s=s.parent))}}return r}
return t}(c)
t.Selector=w
!function(e){var t=function(){function e(e){this.selectors=e
this.dynamic=e.some(function(e){return e.dynamic})}e.prototype.match=function(e){return this.selectors.every(function(t,o){return(0===o?e:e=e.parent)&&!!t.match(e)})?e:null}
e.prototype.mayMatch=function(e){return this.selectors.every(function(t,o){return(0===o?e:e=e.parent)&&!!t.mayMatch(e)})?e:null}
e.prototype.trackChanges=function(e,t){this.selectors.forEach(function(o,r){return(0===r?e:e=e.parent)&&o.trackChanges(e,t)})}
return e}()
e.ChildGroup=t
var o=function(){function e(e){this.selectors=e
this.dynamic=e.some(function(e){return e.dynamic})}e.prototype.match=function(e){return this.selectors.every(function(t,o){return(0===o?e:e=u(e))&&t.match(e)})?e:null}
e.prototype.mayMatch=function(e){return this.selectors.every(function(t,o){return(0===o?e:e=u(e))&&t.mayMatch(e)})?e:null}
e.prototype.trackChanges=function(e,t){this.selectors.forEach(function(o,r){return(0===r?e:e=u(e))&&o.trackChanges(e,t)})}
return e}()
e.SiblingGroup=o}(w=t.Selector||(t.Selector={}))
t.Selector=w
var P=function(){function e(e,t){var o=this
this.selectors=e
this.declarations=t
this.selectors.forEach(function(e){return e.ruleset=o})}e.prototype.toString=function(){return this.selectors.join(", ")+" {"+this.declarations.map(function(e,t){return(0===t?" ":"")+e.property+": "+e.value}).join("; ")+" }"}
e.prototype.lookupSort=function(e){this.selectors.forEach(function(t){return t.lookupSort(e)})}
return e}()
t.RuleSet=P
t.fromAstNodes=function(e){return e.filter(I).map(function(e){var t=e.declarations.filter(j).map(C),o=e.selectors.map(x),r=new P(o,t)
return r})}
function C(e){return{property:e.property.toLowerCase(),value:e.value}}function S(e){switch(e.type){case"*":return new h
case"#":return new m(e.identifier)
case"":return new y(e.identifier.replace(/-/,"").toLowerCase())
case".":return new g(e.identifier)
case":":return new b(e.identifier)
case"[]":return e.test?new v(e.property,e.test,e.value):new v(e.property)}}function T(e){return 0===e.length?new f(new Error("Empty simple selector sequence.")):1===e.length?S(e[0]):new _(e.map(S))}function x(e){try{var t=s.parseSelector(e)
return t?function(e){if(0===e.length)return new f(new Error("Empty selector."))
if(1===e.length)return T(e[0][0])
for(var t=[],o=void 0,r=void 0,n=0;n<e.length;n++){o=T(e[n][0])
r=e[n][1]
r&&(o.combinator=r)
t.push(o)}return new w(t)}(t.value):new f(new Error("Empty selector"))}catch(e){return new f(e)}}t.createSelector=x
function I(e){return"rule"===e.type}function j(e){return"declaration"===e.type}var L=function(){function e(e){var t=this
this.id={}
this.class={}
this.type={}
this.universal=[]
this.position=0
e.forEach(function(e){return e.lookupSort(t)})}e.prototype.query=function(e){var t=this,o=[this.universal,this.id[e.id],this.type[e.cssType]]
e.cssClasses&&e.cssClasses.forEach(function(e){return o.push(t.class[e])})
var r=o.filter(function(e){return!!e}).reduce(function(e,t){return e.concat(t)},[]),n=new E
n.selectors=r.filter(function(t){return t.sel.accumulateChanges(e,n)}).sort(function(e,t){return e.sel.specificity-t.sel.specificity||e.pos-t.pos}).map(function(e){return e.sel})
return n}
e.prototype.sortById=function(e,t){this.addToMap(this.id,e,t)}
e.prototype.sortByClass=function(e,t){this.addToMap(this.class,e,t)}
e.prototype.sortByType=function(e,t){this.addToMap(this.type,e,t)}
e.prototype.sortAsUniversal=function(e){this.universal.push(this.makeDocSelector(e))}
e.prototype.addToMap=function(e,t,o){this.position++
var r=e[t]
r?r.push(this.makeDocSelector(o)):e[t]=[this.makeDocSelector(o)]}
e.prototype.makeDocSelector=function(e){return{sel:e,pos:this.position++}}
return e}()
t.SelectorsMap=L
var E=function(){function e(){this.changeMap=new Map}e.prototype.addAttribute=function(e,t){var o=this.properties(e)
o.attributes||(o.attributes=new Set)
o.attributes.add(t)}
e.prototype.addPseudoClass=function(e,t){var o=this.properties(e)
o.pseudoClasses||(o.pseudoClasses=new Set)
o.pseudoClasses.add(t)}
e.prototype.properties=function(e){var t=this.changeMap.get(e)
t||this.changeMap.set(e,t={})
return t}
return e}()
t.SelectorsMatch=E
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/css-selector/css-selector.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/css-selector/css-selector.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/styling/font-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i,a=o("../node_modules/tns-core-modules/ui/core/properties/properties.js"),s=function(){function e(e,t,o,r){this.fontFamily=e
this.fontSize=t
this.fontStyle=o
this.fontWeight=r}Object.defineProperty(e.prototype,"isItalic",{get:function(){return this.fontStyle===n.ITALIC},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"isBold",{get:function(){return this.fontWeight===i.SEMI_BOLD||this.fontWeight===i.BOLD||"700"===this.fontWeight||this.fontWeight===i.EXTRA_BOLD||this.fontWeight===i.BLACK},enumerable:!0,configurable:!0})
e.equals=function(e,t){return!e&&!t||!(!e||!t)&&(e.fontFamily===t.fontFamily&&e.fontSize===t.fontSize&&e.fontStyle===t.fontStyle&&e.fontWeight===t.fontWeight)}
e.default=void 0
return e}()
t.Font=s
!function(e){e.NORMAL="normal"
e.ITALIC="italic"
e.isValid=a.makeValidator(e.NORMAL,e.ITALIC)
e.parse=a.makeParser(e.isValid)}(n=t.FontStyle||(t.FontStyle={}))
!function(e){e.THIN="100"
e.EXTRA_LIGHT="200"
e.LIGHT="300"
e.NORMAL="normal"
e.MEDIUM="500"
e.SEMI_BOLD="600"
e.BOLD="bold"
e.EXTRA_BOLD="800"
e.BLACK="900"
e.isValid=a.makeValidator(e.THIN,e.EXTRA_LIGHT,e.LIGHT,e.NORMAL,"400",e.MEDIUM,e.SEMI_BOLD,e.BOLD,"700",e.EXTRA_BOLD,e.BLACK)
e.parse=a.makeParser(e.isValid)}(i=t.FontWeight||(t.FontWeight={}))
t.parseFontFamily=function(e){var t=new Array
if(!e)return t
for(var o=e.split(","),r=0;r<o.length;r++){var n=o[r].trim().replace(/['"]+/g,"")
n&&t.push(n)}return t}
!function(e){e.serif="serif"
e.sansSerif="sans-serif"
e.monospace="monospace"
e.system="system"}(t.genericFontFamilies||(t.genericFontFamilies={}))
var u=new Set;[n.NORMAL,n.ITALIC].forEach(function(e,t,o){return u.add(e)})
var l=new Set;[i.THIN,i.EXTRA_LIGHT,i.LIGHT,i.NORMAL,"400",i.MEDIUM,i.SEMI_BOLD,i.BOLD,"700",i.EXTRA_BOLD,i.BLACK].forEach(function(e,t,o){return l.add(e)})
t.parseFont=function(e){for(var t,o={fontStyle:"normal",fontVariant:"normal",fontWeight:"normal"},r=e.split(/\s+/);t=r.shift();)if("normal"===t);else if("small-caps"===t)o.fontVariant=t
else if(u.has(t))o.fontStyle=t
else if(l.has(t))o.fontWeight=t
else{if(o.fontSize){o.fontFamily=t
r.length&&(o.fontFamily+=" "+r.join(" "))
break}var n=t.split("/")
o.fontSize=n[0]
o.lineHeight=n.length>1?n[1]:void 0}return o}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/font-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/font-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/styling/font.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/styling/font-common.js"),i=o("../node_modules/tns-core-modules/trace/trace.js"),a=o("../node_modules/tns-core-modules/application/application.js"),s=o("../node_modules/tns-core-modules/file-system/file-system.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/styling/font-common.js"))
var u,l="/fonts/",c=new Map,d=function(e){__extends(t,e)
function t(t,o,r,n){return e.call(this,t,o,r,n)||this}t.prototype.withFontFamily=function(e){return new t(e,this.fontSize,this.fontStyle,this.fontWeight)}
t.prototype.withFontStyle=function(e){return new t(this.fontFamily,this.fontSize,e,this.fontWeight)}
t.prototype.withFontWeight=function(e){return new t(this.fontFamily,this.fontSize,this.fontStyle,e)}
t.prototype.withFontSize=function(e){return new t(this.fontFamily,e,this.fontStyle,this.fontWeight)}
t.prototype.getAndroidTypeface=function(){this._typeface||(this._typeface=function(e){var t=0
e.isBold&&(t|=android.graphics.Typeface.BOLD)
e.isItalic&&(t|=android.graphics.Typeface.ITALIC)
for(var o=n.parseFontFamily(e.fontFamily),r=null,i=0;i<o.length;i++){switch(o[i].toLowerCase()){case n.genericFontFamilies.serif:r=android.graphics.Typeface.create("serif"+f(e.fontWeight),t)
break
case n.genericFontFamilies.sansSerif:case n.genericFontFamilies.system:r=android.graphics.Typeface.create("sans-serif"+f(e.fontWeight),t)
break
case n.genericFontFamilies.monospace:r=android.graphics.Typeface.create("monospace"+f(e.fontWeight),t)
break
default:r=p(o[i])
r&&t&&(r=android.graphics.Typeface.create(r,t))}if(r)break}r||(r=android.graphics.Typeface.create("sans-serif"+f(e.fontWeight),t))
return r}(this))
return this._typeface}
t.prototype.getUIFont=function(e){}
t.default=new t(void 0,void 0,"normal","normal")
return t}(n.Font)
t.Font=d
function p(e){u=u||a.android.context.getAssets()
if(!u)return null
var t=c.get(e)
if(void 0===t){t=null
var o=void 0,r=s.path.join(s.knownFolders.currentApp().path,"fonts",e)
s.File.exists(r+".ttf")?o=l+e+".ttf":s.File.exists(r+".otf")?o=l+e+".otf":i.isEnabled()&&i.write("Could not find font file for "+e,i.categories.Error,i.messageType.error)
if(o)try{o=s.path.join(s.knownFolders.currentApp().path,o)
t=android.graphics.Typeface.createFromFile(o)}catch(e){i.isEnabled()&&i.write("Error loading font asset: "+o,i.categories.Error,i.messageType.error)}c.set(e,t)}return t}function f(e){switch(e){case n.FontWeight.THIN:return android.os.Build.VERSION.SDK_INT>=16?"-thin":""
case n.FontWeight.EXTRA_LIGHT:case n.FontWeight.LIGHT:return android.os.Build.VERSION.SDK_INT>=16?"-light":""
case n.FontWeight.NORMAL:case"400":case void 0:case null:return""
case n.FontWeight.MEDIUM:case n.FontWeight.SEMI_BOLD:return android.os.Build.VERSION.SDK_INT>=21?"-medium":""
case n.FontWeight.BOLD:case"700":case n.FontWeight.EXTRA_BOLD:return""
case n.FontWeight.BLACK:return android.os.Build.VERSION.SDK_INT>=21?"-black":""
default:throw new Error('Invalid font weight: "'+e+'"')}}if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/font.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/font.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/styling/linear-gradient.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/color/color.js"),i=function(){function e(){}e.parse=function(t){var o=new e
o.angle=t.angle
o.colorStops=t.colors.map(function(e){var t,o=e.offset||null
o&&"%"===o.unit&&(t={unit:"%",value:o.value})
return{color:new n.Color(e.argb),offset:t}})
return o}
e.equals=function(e,t){if(!e&&!t)return!0
if(!e||!t)return!1
if(e.angle!==t.angle)return!1
if(e.colorStops.length!==t.colorStops.length)return!1
for(var o=0;o<e.colorStops.length;o++){var r=e.colorStops[o],i=t.colorStops[o]
if(r.offset!==i.offset)return!1
if(!n.Color.equals(r.color,i.color))return!1}return!0}
return e}()
t.LinearGradient=i
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/linear-gradient.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/linear-gradient.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/styling/style-properties.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i,a=o("../node_modules/tns-core-modules/ui/core/properties/properties.js"),s=o("../node_modules/tns-core-modules/color/color.js"),u=o("../node_modules/tns-core-modules/ui/styling/font.js"),l=o("../node_modules/tns-core-modules/utils/utils.js"),c=o("../node_modules/tns-core-modules/ui/styling/background.js"),d=o("../node_modules/tns-core-modules/platform/platform.js"),p=o("../node_modules/tns-core-modules/utils/number-utils.js"),f=o("../node_modules/tns-core-modules/matrix/matrix.js"),h=o("../node_modules/tns-core-modules/trace/trace.js"),m=o("../node_modules/tns-core-modules/css/parser.js"),y=o("../node_modules/tns-core-modules/ui/styling/linear-gradient.js")
function g(e,t){return"auto"==e?"auto"==t:"number"==typeof e?"auto"!=t&&("number"==typeof t?e==t:!!t&&("dip"==t.unit&&e==t.value)):"auto"!=t&&("number"==typeof t?!!e&&("dip"==e.unit&&e.value==t):!(!e||!t)&&(e.value==t.value&&e.unit==t.unit))}function v(e){if("auto"==e)return"auto"
if("number"==typeof e)return e.toString()
var t=e.value
"%"===e.unit&&(t*=100)
return t+e.unit}function b(e,t,o){void 0===t&&(t=Number.NaN)
void 0===o&&(o=Number.NaN)
if("auto"==e)return t
if("number"==typeof e)return l.layout.round(l.layout.toDevicePixels(e))
if(!e)return t
switch(e.unit){case"px":return l.layout.round(e.value)
case"%":return l.layout.round(o*e.value)
case"dip":default:return l.layout.round(l.layout.toDevicePixels(e.value))}}!function(e){e.parse=function(e){if("auto"==e)return"auto"
if("string"==typeof e){var t=e.trim(),o=t.indexOf("%")
if(-1!==o){var r=void 0
r=o!==t.length-1||0===o?Number.NaN:parseFloat(t.substring(0,t.length-1).trim())/100
if(isNaN(r)||!isFinite(r))throw new Error("Invalid value: "+e)
return{unit:"%",value:r}}if(-1!==t.indexOf("px")){t=t.replace("px","").trim()
r=parseFloat(t)
if(isNaN(r)||!isFinite(r))throw new Error("Invalid value: "+e)
return{unit:"px",value:r}}r=parseFloat(t)
if(isNaN(r)||!isFinite(r))throw new Error("Invalid value: "+e)
return r}return e}
e.equals=g
e.toDevicePixels=b
e.convertToString=v}(n=t.PercentLength||(t.PercentLength={}))
!function(e){e.parse=function(e){if("auto"==e)return"auto"
if("string"==typeof e){var t=e.trim()
if(-1!==t.indexOf("px")){t=t.replace("px","").trim()
var o=parseFloat(t)
if(isNaN(o)||!isFinite(o))throw new Error("Invalid value: "+t)
return{unit:"px",value:o}}o=parseFloat(t)
if(isNaN(o)||!isFinite(o))throw new Error("Invalid value: "+t)
return o}return e}
e.equals=g
e.toDevicePixels=b
e.convertToString=v}(i=t.Length||(t.Length={}))
t.zeroLength={value:0,unit:"px"}
t.minWidthProperty=new a.CssProperty({name:"minWidth",cssName:"min-width",defaultValue:t.zeroLength,affectsLayout:d.isIOS,equalityComparer:i.equals,valueChanged:function(e,t,o){var r=e.viewRef.get()
r?r.effectiveMinWidth=i.toDevicePixels(o,0):h.write(o+' not set to view\'s property because ".viewRef" is cleared',h.categories.Style,h.messageType.warn)},valueConverter:i.parse})
t.minWidthProperty.register(a.Style)
t.minHeightProperty=new a.CssProperty({name:"minHeight",cssName:"min-height",defaultValue:t.zeroLength,affectsLayout:d.isIOS,equalityComparer:i.equals,valueChanged:function(e,t,o){var r=e.viewRef.get()
r?r.effectiveMinHeight=i.toDevicePixels(o,0):h.write(o+' not set to view\'s property because ".viewRef" is cleared',h.categories.Style,h.messageType.warn)},valueConverter:i.parse})
t.minHeightProperty.register(a.Style)
t.widthProperty=new a.CssAnimationProperty({name:"width",cssName:"width",defaultValue:"auto",equalityComparer:i.equals,valueChanged:function(e,t,o){if(d.isIOS){var r=e.viewRef.get()
r&&r.requestLayout()}},valueConverter:n.parse})
t.widthProperty.register(a.Style)
t.heightProperty=new a.CssAnimationProperty({name:"height",cssName:"height",defaultValue:"auto",equalityComparer:i.equals,valueChanged:function(e,t,o){if(d.isIOS){var r=e.viewRef.get()
r&&r.requestLayout()}},valueConverter:n.parse})
t.heightProperty.register(a.Style)
var _=new a.ShorthandProperty({name:"margin",cssName:"margin",getter:function(){return n.equals(this.marginTop,this.marginRight)&&n.equals(this.marginTop,this.marginBottom)&&n.equals(this.marginTop,this.marginLeft)?this.marginTop:n.convertToString(this.marginTop)+" "+n.convertToString(this.marginRight)+" "+n.convertToString(this.marginBottom)+" "+n.convertToString(this.marginLeft)},converter:function(e){if("string"==typeof e&&"auto"!==e){var o=S(e)
return[[t.marginTopProperty,n.parse(o.top)],[t.marginRightProperty,n.parse(o.right)],[t.marginBottomProperty,n.parse(o.bottom)],[t.marginLeftProperty,n.parse(o.left)]]}return[[t.marginTopProperty,e],[t.marginRightProperty,e],[t.marginBottomProperty,e],[t.marginLeftProperty,e]]}})
_.register(a.Style)
t.marginLeftProperty=new a.CssProperty({name:"marginLeft",cssName:"margin-left",defaultValue:t.zeroLength,affectsLayout:d.isIOS,equalityComparer:i.equals,valueConverter:n.parse})
t.marginLeftProperty.register(a.Style)
t.marginRightProperty=new a.CssProperty({name:"marginRight",cssName:"margin-right",defaultValue:t.zeroLength,affectsLayout:d.isIOS,equalityComparer:i.equals,valueConverter:n.parse})
t.marginRightProperty.register(a.Style)
t.marginTopProperty=new a.CssProperty({name:"marginTop",cssName:"margin-top",defaultValue:t.zeroLength,affectsLayout:d.isIOS,equalityComparer:i.equals,valueConverter:n.parse})
t.marginTopProperty.register(a.Style)
t.marginBottomProperty=new a.CssProperty({name:"marginBottom",cssName:"margin-bottom",defaultValue:t.zeroLength,affectsLayout:d.isIOS,equalityComparer:i.equals,valueConverter:n.parse})
t.marginBottomProperty.register(a.Style)
var w,P,C=new a.ShorthandProperty({name:"padding",cssName:"padding",getter:function(){return i.equals(this.paddingTop,this.paddingRight)&&i.equals(this.paddingTop,this.paddingBottom)&&i.equals(this.paddingTop,this.paddingLeft)?this.paddingTop:i.convertToString(this.paddingTop)+" "+i.convertToString(this.paddingRight)+" "+i.convertToString(this.paddingBottom)+" "+i.convertToString(this.paddingLeft)},converter:function(e){if("string"==typeof e&&"auto"!==e){var o=S(e)
return[[t.paddingTopProperty,i.parse(o.top)],[t.paddingRightProperty,i.parse(o.right)],[t.paddingBottomProperty,i.parse(o.bottom)],[t.paddingLeftProperty,i.parse(o.left)]]}return[[t.paddingTopProperty,e],[t.paddingRightProperty,e],[t.paddingBottomProperty,e],[t.paddingLeftProperty,e]]}})
C.register(a.Style)
t.paddingLeftProperty=new a.CssProperty({name:"paddingLeft",cssName:"padding-left",defaultValue:t.zeroLength,affectsLayout:d.isIOS,equalityComparer:i.equals,valueChanged:function(e,t,o){var r=e.viewRef.get()
r?r.effectivePaddingLeft=i.toDevicePixels(o,0):h.write(o+' not set to view\'s property because ".viewRef" is cleared',h.categories.Style,h.messageType.warn)},valueConverter:i.parse})
t.paddingLeftProperty.register(a.Style)
t.paddingRightProperty=new a.CssProperty({name:"paddingRight",cssName:"padding-right",defaultValue:t.zeroLength,affectsLayout:d.isIOS,equalityComparer:i.equals,valueChanged:function(e,t,o){var r=e.viewRef.get()
r?r.effectivePaddingRight=i.toDevicePixels(o,0):h.write(o+' not set to view\'s property because ".viewRef" is cleared',h.categories.Style,h.messageType.warn)},valueConverter:i.parse})
t.paddingRightProperty.register(a.Style)
t.paddingTopProperty=new a.CssProperty({name:"paddingTop",cssName:"padding-top",defaultValue:t.zeroLength,affectsLayout:d.isIOS,equalityComparer:i.equals,valueChanged:function(e,t,o){var r=e.viewRef.get()
r?r.effectivePaddingTop=i.toDevicePixels(o,0):h.write(o+' not set to view\'s property because ".viewRef" is cleared',h.categories.Style,h.messageType.warn)},valueConverter:i.parse})
t.paddingTopProperty.register(a.Style)
t.paddingBottomProperty=new a.CssProperty({name:"paddingBottom",cssName:"padding-bottom",defaultValue:t.zeroLength,affectsLayout:d.isIOS,equalityComparer:i.equals,valueChanged:function(e,t,o){var r=e.viewRef.get()
r?r.effectivePaddingBottom=i.toDevicePixels(o,0):h.write(o+' not set to view\'s property because ".viewRef" is cleared',h.categories.Style,h.messageType.warn)},valueConverter:i.parse})
t.paddingBottomProperty.register(a.Style)
!function(e){e.LEFT="left"
e.CENTER="center"
e.RIGHT="right"
e.STRETCH="stretch"
e.isValid=a.makeValidator(e.LEFT,e.CENTER,e.RIGHT,e.STRETCH)
e.parse=a.makeParser(e.isValid)}(w=t.HorizontalAlignment||(t.HorizontalAlignment={}))
t.horizontalAlignmentProperty=new a.CssProperty({name:"horizontalAlignment",cssName:"horizontal-align",defaultValue:w.STRETCH,affectsLayout:d.isIOS,valueConverter:w.parse})
t.horizontalAlignmentProperty.register(a.Style)
!function(e){e.TOP="top"
e.MIDDLE="middle"
e.BOTTOM="bottom"
e.STRETCH="stretch"
e.isValid=a.makeValidator(e.TOP,e.MIDDLE,e.BOTTOM,e.STRETCH)
e.parse=function(o){return"center"===o.toLowerCase()?e.MIDDLE:t(o)}
var t=a.makeParser(e.isValid)}(P=t.VerticalAlignment||(t.VerticalAlignment={}))
t.verticalAlignmentProperty=new a.CssProperty({name:"verticalAlignment",cssName:"vertical-align",defaultValue:P.STRETCH,affectsLayout:d.isIOS,valueConverter:P.parse})
t.verticalAlignmentProperty.register(a.Style)
function S(e){if("string"==typeof e){var t,o=e.split(/[ ,]+/),r=void 0,n=void 0,i=void 0
if(1===o.length){t=o[0]
r=o[0]
n=o[0]
i=o[0]}else if(2===o.length){t=o[0]
n=o[0]
r=o[1]
i=o[1]}else if(3===o.length){t=o[0]
r=o[1]
i=o[1]
n=o[2]}else{if(4!==o.length)throw new Error("Expected 1, 2, 3 or 4 parameters. Actual: "+e)
t=o[0]
r=o[1]
n=o[2]
i=o[3]}return{top:t,right:r,bottom:n,left:i}}return e}t.rotateProperty=new a.CssAnimationProperty({name:"rotate",cssName:"rotate",defaultValue:0,valueConverter:parseFloat})
t.rotateProperty.register(a.Style)
t.scaleXProperty=new a.CssAnimationProperty({name:"scaleX",cssName:"scaleX",defaultValue:1,valueConverter:parseFloat})
t.scaleXProperty.register(a.Style)
t.scaleYProperty=new a.CssAnimationProperty({name:"scaleY",cssName:"scaleY",defaultValue:1,valueConverter:parseFloat})
t.scaleYProperty.register(a.Style)
function T(e){return-1!==e.indexOf("px")?l.layout.toDeviceIndependentPixels(parseFloat(e.replace("px","").trim())):parseFloat(e.replace("dip","").trim())}t.translateXProperty=new a.CssAnimationProperty({name:"translateX",cssName:"translateX",defaultValue:0,valueConverter:T})
t.translateXProperty.register(a.Style)
t.translateYProperty=new a.CssAnimationProperty({name:"translateY",cssName:"translateY",defaultValue:0,valueConverter:T})
t.translateYProperty.register(a.Style)
var x=new a.ShorthandProperty({name:"transform",cssName:"transform",getter:function(){var e=this.scaleX,t=this.scaleY,o=this.translateX,r=this.translateY,n=this.rotate,i=""
0===o&&0===r||(i+="translate("+o+", "+r+") ")
1===e&&1===t||(i+="scale("+e+", "+t+") ")
0!==n&&(i+="rotate ("+n+")")
return i.trim()},converter:function(e){e===a.unsetValue&&(e="none")
var o=V(e),r=o.translate,n=o.rotate,i=o.scale
return[[t.translateXProperty,r.x],[t.translateYProperty,r.y],[t.scaleXProperty,i.x],[t.scaleYProperty,i.y],[t.rotateProperty,n]]}})
x.register(a.Style)
var I={translate:{x:0,y:0},rotate:0,scale:{x:1,y:1}},j=new RegExp(/\s*(.+?)\((.*?)\)/g),L=Object.freeze(["rotate","translate","translate3d","translateX","translateY","scale","scale3d","scaleX","scaleY"]),E=Object.freeze({scale:function(e){return{property:"scale",value:e}},scale3d:function(e){return{property:"scale",value:e}},scaleX:function(e){var t=e.x
return{property:"scale",value:{x:t,y:I.scale.y}}},scaleY:function(e){var t=e.y
return{property:"scale",value:{y:t,x:I.scale.x}}},translate:function(e){return{property:"translate",value:e}},translate3d:function(e){return{property:"translate",value:e}},translateX:function(e){var t=e.x
return{property:"translate",value:{x:t,y:I.translate.y}}},translateY:function(e){var t=e.y
return{property:"translate",value:{y:t,x:I.translate.x}}},rotate:function(e){return{property:"rotate",value:e}}})
function V(e){var t=function(e){var t,o=[]
for(;null!==(t=j.exec(e));){var r=t[1],n=A(r,t[2]);-1!==L.indexOf(r)&&o.push(N({property:r,value:n}))}return o}(e)
if("none"===e||""===e||!t.length)return I
var o=t.map(function(e){return e.property})
if(!l.hasDuplicates(o)){var r=__assign({},I)
t.forEach(function(e){r[e.property]=e.value})
return r}var n=t.map(f.getTransformMatrix).reduce(f.multiplyAffine2d),i=f.matrixArrayToCssMatrix(n)
return f.decompose2DTransformMatrix(i)}t.transformConverter=V
function N(e){var t=e.property,o=e.value
return E[t](o)}function A(e,t){var o=t.split(",").map(parseFloat),r=o[0],n=o[1],i=void 0===n?r:n
return"rotate"===e?"rad"===t.slice(-3)?p.radiansToDegrees(r):r:{x:r,y:i}}var k,F=new a.ShorthandProperty({name:"background",cssName:"background",getter:function(){return this.backgroundColor+" "+this.backgroundImage+" "+this.backgroundRepeat+" "+this.backgroundPosition},converter:function(e){if("string"==typeof e){var o=m.parseBackground(e).value,r=o.color?new s.Color(o.color):a.unsetValue,n=void 0
n="object"==typeof o.image&&o.image?y.LinearGradient.parse(o.image):o.image||a.unsetValue
var i=o.repeat||a.unsetValue,u=o.position?o.position.text:a.unsetValue
return[[t.backgroundColorProperty,r],[t.backgroundImageProperty,n],[t.backgroundRepeatProperty,i],[t.backgroundPositionProperty,u]]}return[[t.backgroundColorProperty,a.unsetValue],[t.backgroundImageProperty,a.unsetValue],[t.backgroundRepeatProperty,a.unsetValue],[t.backgroundPositionProperty,a.unsetValue]]}})
F.register(a.Style)
t.backgroundInternalProperty=new a.CssProperty({name:"backgroundInternal",cssName:"_backgroundInternal",defaultValue:c.Background.default})
t.backgroundInternalProperty.register(a.Style)
t.backgroundImageProperty=new a.CssProperty({name:"backgroundImage",cssName:"background-image",valueChanged:function(e,t,o){var r=e.backgroundInternal.withImage(o)
e.backgroundInternal=r},equalityComparer:function(e,t){return e instanceof y.LinearGradient&&t instanceof y.LinearGradient?y.LinearGradient.equals(e,t):e===t},valueConverter:function(e){if("string"==typeof e){var t=m.parseBackground(e)
if(t){var o=t.value
e="object"==typeof o.image?y.LinearGradient.parse(o.image):e}}return e}})
t.backgroundImageProperty.register(a.Style)
t.backgroundColorProperty=new a.CssAnimationProperty({name:"backgroundColor",cssName:"background-color",valueChanged:function(e,t,o){var r=e.backgroundInternal.withColor(o)
e.backgroundInternal=r},equalityComparer:s.Color.equals,valueConverter:function(e){return new s.Color(e)}})
t.backgroundColorProperty.register(a.Style)
!function(e){e.REPEAT="repeat"
e.REPEAT_X="repeat-x"
e.REPEAT_Y="repeat-y"
e.NO_REPEAT="no-repeat"
e.isValid=a.makeValidator(e.REPEAT,e.REPEAT_X,e.REPEAT_Y,e.NO_REPEAT)
e.parse=a.makeParser(e.isValid)}(k=t.BackgroundRepeat||(t.BackgroundRepeat={}))
t.backgroundRepeatProperty=new a.CssProperty({name:"backgroundRepeat",cssName:"background-repeat",valueConverter:k.parse,valueChanged:function(e,t,o){var r=e.backgroundInternal.withRepeat(o)
e.backgroundInternal=r}})
t.backgroundRepeatProperty.register(a.Style)
t.backgroundSizeProperty=new a.CssProperty({name:"backgroundSize",cssName:"background-size",valueChanged:function(e,t,o){var r=e.backgroundInternal.withSize(o)
e.backgroundInternal=r}})
t.backgroundSizeProperty.register(a.Style)
t.backgroundPositionProperty=new a.CssProperty({name:"backgroundPosition",cssName:"background-position",valueChanged:function(e,t,o){var r=e.backgroundInternal.withPosition(o)
e.backgroundInternal=r}})
t.backgroundPositionProperty.register(a.Style)
var O=new a.ShorthandProperty({name:"borderColor",cssName:"border-color",getter:function(){return s.Color.equals(this.borderTopColor,this.borderRightColor)&&s.Color.equals(this.borderTopColor,this.borderBottomColor)&&s.Color.equals(this.borderTopColor,this.borderLeftColor)?this.borderTopColor:this.borderTopColor+" "+this.borderRightColor+" "+this.borderBottomColor+" "+this.borderLeftColor},converter:function(e){if("string"==typeof e){var o=function(e){var t={top:void 0,right:void 0,bottom:void 0,left:void 0}
if(0===e.indexOf("rgb")){t.top=t.right=t.bottom=t.left=new s.Color(e)
return t}var o=e.split(/[ ,]+/)
if(1===o.length){var r=new s.Color(o[0])
t.top=r
t.right=r
t.bottom=r
t.left=r}else if(2===o.length){r=new s.Color(o[0])
var n=new s.Color(o[1])
t.top=r
t.right=n
t.bottom=r
t.left=n}else if(3===o.length){r=new s.Color(o[0]),n=new s.Color(o[1])
var i=new s.Color(o[2])
t.top=r
t.right=n
t.bottom=i
t.left=n}else{if(4!==o.length)throw new Error("Expected 1, 2, 3 or 4 parameters. Actual: "+e)
r=new s.Color(o[0]),n=new s.Color(o[1]),i=new s.Color(o[2])
var a=new s.Color(o[3])
t.top=r
t.right=n
t.bottom=i
t.left=a}return t}(e)
return[[t.borderTopColorProperty,o.top],[t.borderRightColorProperty,o.right],[t.borderBottomColorProperty,o.bottom],[t.borderLeftColorProperty,o.left]]}return[[t.borderTopColorProperty,e],[t.borderRightColorProperty,e],[t.borderBottomColorProperty,e],[t.borderLeftColorProperty,e]]}})
O.register(a.Style)
t.borderTopColorProperty=new a.CssProperty({name:"borderTopColor",cssName:"border-top-color",valueChanged:function(e,t,o){var r=e.backgroundInternal.withBorderTopColor(o)
e.backgroundInternal=r},equalityComparer:s.Color.equals,valueConverter:function(e){return new s.Color(e)}})
t.borderTopColorProperty.register(a.Style)
t.borderRightColorProperty=new a.CssProperty({name:"borderRightColor",cssName:"border-right-color",valueChanged:function(e,t,o){var r=e.backgroundInternal.withBorderRightColor(o)
e.backgroundInternal=r},equalityComparer:s.Color.equals,valueConverter:function(e){return new s.Color(e)}})
t.borderRightColorProperty.register(a.Style)
t.borderBottomColorProperty=new a.CssProperty({name:"borderBottomColor",cssName:"border-bottom-color",valueChanged:function(e,t,o){var r=e.backgroundInternal.withBorderBottomColor(o)
e.backgroundInternal=r},equalityComparer:s.Color.equals,valueConverter:function(e){return new s.Color(e)}})
t.borderBottomColorProperty.register(a.Style)
t.borderLeftColorProperty=new a.CssProperty({name:"borderLeftColor",cssName:"border-left-color",valueChanged:function(e,t,o){var r=e.backgroundInternal.withBorderLeftColor(o)
e.backgroundInternal=r},equalityComparer:s.Color.equals,valueConverter:function(e){return new s.Color(e)}})
t.borderLeftColorProperty.register(a.Style)
var M=new a.ShorthandProperty({name:"borderWidth",cssName:"border-width",getter:function(){return i.equals(this.borderTopWidth,this.borderRightWidth)&&i.equals(this.borderTopWidth,this.borderBottomWidth)&&i.equals(this.borderTopWidth,this.borderLeftWidth)?this.borderTopWidth:i.convertToString(this.borderTopWidth)+" "+i.convertToString(this.borderRightWidth)+" "+i.convertToString(this.borderBottomWidth)+" "+i.convertToString(this.borderLeftWidth)},converter:function(e){if("string"==typeof e&&"auto"!==e){var o=S(e)
return[[t.borderTopWidthProperty,o.top],[t.borderRightWidthProperty,o.right],[t.borderBottomWidthProperty,o.bottom],[t.borderLeftWidthProperty,o.left]]}return[[t.borderTopWidthProperty,e],[t.borderRightWidthProperty,e],[t.borderBottomWidthProperty,e],[t.borderLeftWidthProperty,e]]}})
M.register(a.Style)
t.borderTopWidthProperty=new a.CssProperty({name:"borderTopWidth",cssName:"border-top-width",defaultValue:t.zeroLength,affectsLayout:d.isIOS,equalityComparer:i.equals,valueChanged:function(e,t,o){var r=i.toDevicePixels(o,0)
if(!D(r))throw new Error("border-top-width should be Non-Negative Finite number. Value: "+r)
var n=e.viewRef.get()
n?n.effectiveBorderTopWidth=r:h.write(o+' not set to view\'s property because ".viewRef" is cleared',h.categories.Style,h.messageType.warn)
var a=e.backgroundInternal.withBorderTopWidth(r)
e.backgroundInternal=a},valueConverter:i.parse})
t.borderTopWidthProperty.register(a.Style)
t.borderRightWidthProperty=new a.CssProperty({name:"borderRightWidth",cssName:"border-right-width",defaultValue:t.zeroLength,affectsLayout:d.isIOS,equalityComparer:i.equals,valueChanged:function(e,t,o){var r=i.toDevicePixels(o,0)
if(!D(r))throw new Error("border-right-width should be Non-Negative Finite number. Value: "+r)
var n=e.viewRef.get()
n?n.effectiveBorderRightWidth=r:h.write(o+' not set to view\'s property because ".viewRef" is cleared',h.categories.Style,h.messageType.warn)
var a=e.backgroundInternal.withBorderRightWidth(r)
e.backgroundInternal=a},valueConverter:i.parse})
t.borderRightWidthProperty.register(a.Style)
t.borderBottomWidthProperty=new a.CssProperty({name:"borderBottomWidth",cssName:"border-bottom-width",defaultValue:t.zeroLength,affectsLayout:d.isIOS,equalityComparer:i.equals,valueChanged:function(e,t,o){var r=i.toDevicePixels(o,0)
if(!D(r))throw new Error("border-bottom-width should be Non-Negative Finite number. Value: "+r)
var n=e.viewRef.get()
n?n.effectiveBorderBottomWidth=r:h.write(o+' not set to view\'s property because ".viewRef" is cleared',h.categories.Style,h.messageType.warn)
var a=e.backgroundInternal.withBorderBottomWidth(r)
e.backgroundInternal=a},valueConverter:i.parse})
t.borderBottomWidthProperty.register(a.Style)
t.borderLeftWidthProperty=new a.CssProperty({name:"borderLeftWidth",cssName:"border-left-width",defaultValue:t.zeroLength,affectsLayout:d.isIOS,equalityComparer:i.equals,valueChanged:function(e,t,o){var r=i.toDevicePixels(o,0)
if(!D(r))throw new Error("border-left-width should be Non-Negative Finite number. Value: "+r)
var n=e.viewRef.get()
n?n.effectiveBorderLeftWidth=r:h.write(o+' not set to view\'s property because ".viewRef" is cleared',h.categories.Style,h.messageType.warn)
var a=e.backgroundInternal.withBorderLeftWidth(r)
e.backgroundInternal=a},valueConverter:i.parse})
t.borderLeftWidthProperty.register(a.Style)
var R=new a.ShorthandProperty({name:"borderRadius",cssName:"border-radius",getter:function(){return i.equals(this.borderTopLeftRadius,this.borderTopRightRadius)&&i.equals(this.borderTopLeftRadius,this.borderBottomRightRadius)&&i.equals(this.borderTopLeftRadius,this.borderBottomLeftRadius)?this.borderTopLeftRadius:i.convertToString(this.borderTopLeftRadius)+" "+i.convertToString(this.borderTopRightRadius)+" "+i.convertToString(this.borderBottomRightRadius)+" "+i.convertToString(this.borderBottomLeftRadius)},converter:function(e){if("string"==typeof e){var o=S(e)
return[[t.borderTopLeftRadiusProperty,o.top],[t.borderTopRightRadiusProperty,o.right],[t.borderBottomRightRadiusProperty,o.bottom],[t.borderBottomLeftRadiusProperty,o.left]]}return[[t.borderTopLeftRadiusProperty,e],[t.borderTopRightRadiusProperty,e],[t.borderBottomRightRadiusProperty,e],[t.borderBottomLeftRadiusProperty,e]]}})
R.register(a.Style)
t.borderTopLeftRadiusProperty=new a.CssProperty({name:"borderTopLeftRadius",cssName:"border-top-left-radius",defaultValue:0,affectsLayout:d.isIOS,valueChanged:function(e,t,o){var r=i.toDevicePixels(o,0)
if(!D(r))throw new Error("border-top-left-radius should be Non-Negative Finite number. Value: "+r)
var n=e.backgroundInternal.withBorderTopLeftRadius(r)
e.backgroundInternal=n},valueConverter:i.parse})
t.borderTopLeftRadiusProperty.register(a.Style)
t.borderTopRightRadiusProperty=new a.CssProperty({name:"borderTopRightRadius",cssName:"border-top-right-radius",defaultValue:0,affectsLayout:d.isIOS,valueChanged:function(e,t,o){var r=i.toDevicePixels(o,0)
if(!D(r))throw new Error("border-top-right-radius should be Non-Negative Finite number. Value: "+r)
var n=e.backgroundInternal.withBorderTopRightRadius(r)
e.backgroundInternal=n},valueConverter:i.parse})
t.borderTopRightRadiusProperty.register(a.Style)
t.borderBottomRightRadiusProperty=new a.CssProperty({name:"borderBottomRightRadius",cssName:"border-bottom-right-radius",defaultValue:0,affectsLayout:d.isIOS,valueChanged:function(e,t,o){var r=i.toDevicePixels(o,0)
if(!D(r))throw new Error("border-bottom-right-radius should be Non-Negative Finite number. Value: "+r)
var n=e.backgroundInternal.withBorderBottomRightRadius(r)
e.backgroundInternal=n},valueConverter:i.parse})
t.borderBottomRightRadiusProperty.register(a.Style)
t.borderBottomLeftRadiusProperty=new a.CssProperty({name:"borderBottomLeftRadius",cssName:"border-bottom-left-radius",defaultValue:0,affectsLayout:d.isIOS,valueChanged:function(e,t,o){var r=i.toDevicePixels(o,0)
if(!D(r))throw new Error("border-bottom-left-radius should be Non-Negative Finite number. Value: "+r)
var n=e.backgroundInternal.withBorderBottomLeftRadius(r)
e.backgroundInternal=n},valueConverter:i.parse})
t.borderBottomLeftRadiusProperty.register(a.Style)
function D(e){return isFinite(e)&&!isNaN(e)&&e>=0}var B=["rect","circle","ellipse","polygon","inset"]
t.clipPathProperty=new a.CssProperty({name:"clipPath",cssName:"clip-path",valueChanged:function(e,t,o){if(!function(e){if(!e)return!0
var t=e.substring(0,e.indexOf("(")).trim()
return-1!==B.indexOf(t)}(o))throw new Error("clip-path is not valid.")
var r=e.backgroundInternal.withClipPath(o)
e.backgroundInternal=r}})
t.clipPathProperty.register(a.Style)
t.zIndexProperty=new a.CssProperty({name:"zIndex",cssName:"z-index",valueConverter:function(e){var t=parseFloat(e)
if(isNaN(t))throw new Error("Invalid value: "+t)
return t}})
t.zIndexProperty.register(a.Style)
t.opacityProperty=new a.CssAnimationProperty({name:"opacity",cssName:"opacity",defaultValue:1,valueConverter:function(e){var t=parseFloat(e)
if(!isNaN(t)&&0<=t&&t<=1)return t
throw new Error("Opacity should be between [0, 1]. Value: "+t)}})
t.opacityProperty.register(a.Style)
t.colorProperty=new a.InheritedCssProperty({name:"color",cssName:"color",equalityComparer:s.Color.equals,valueConverter:function(e){return new s.Color(e)}})
t.colorProperty.register(a.Style)
t.fontInternalProperty=new a.CssProperty({name:"fontInternal",cssName:"_fontInternal",defaultValue:u.Font.default})
t.fontInternalProperty.register(a.Style)
t.fontFamilyProperty=new a.InheritedCssProperty({name:"fontFamily",cssName:"font-family",affectsLayout:d.isIOS,valueChanged:function(e,t,o){var r=e.fontInternal
if(r.fontFamily!==o){var n=r.withFontFamily(o)
e.fontInternal=u.Font.equals(u.Font.default,n)?a.unsetValue:n}}})
t.fontFamilyProperty.register(a.Style)
t.fontSizeProperty=new a.InheritedCssProperty({name:"fontSize",cssName:"font-size",affectsLayout:d.isIOS,valueChanged:function(e,t,o){var r=e.fontInternal
if(r.fontSize!==o){var n=r.withFontSize(o)
e.fontInternal=u.Font.equals(u.Font.default,n)?a.unsetValue:n}},valueConverter:function(e){return parseFloat(e)}})
t.fontSizeProperty.register(a.Style)
t.fontStyleProperty=new a.InheritedCssProperty({name:"fontStyle",cssName:"font-style",affectsLayout:d.isIOS,defaultValue:u.FontStyle.NORMAL,valueConverter:u.FontStyle.parse,valueChanged:function(e,t,o){var r=e.fontInternal
if(r.fontStyle!==o){var n=r.withFontStyle(o)
e.fontInternal=u.Font.equals(u.Font.default,n)?a.unsetValue:n}}})
t.fontStyleProperty.register(a.Style)
t.fontWeightProperty=new a.InheritedCssProperty({name:"fontWeight",cssName:"font-weight",affectsLayout:d.isIOS,defaultValue:u.FontWeight.NORMAL,valueConverter:u.FontWeight.parse,valueChanged:function(e,t,o){var r=e.fontInternal
if(r.fontWeight!==o){var n=r.withFontWeight(o)
e.fontInternal=u.Font.equals(u.Font.default,n)?a.unsetValue:n}}})
t.fontWeightProperty.register(a.Style)
var U,W=new a.ShorthandProperty({name:"font",cssName:"font",getter:function(){return this.fontStyle+" "+this.fontWeight+" "+this.fontSize+" "+this.fontFamily},converter:function(e){if(e===a.unsetValue)return[[t.fontStyleProperty,a.unsetValue],[t.fontWeightProperty,a.unsetValue],[t.fontSizeProperty,a.unsetValue],[t.fontFamilyProperty,a.unsetValue]]
var o=u.parseFont(e),r=parseFloat(o.fontSize)
return[[t.fontStyleProperty,o.fontStyle],[t.fontWeightProperty,o.fontWeight],[t.fontSizeProperty,r],[t.fontFamilyProperty,o.fontFamily]]}})
W.register(a.Style)
!function(e){e.VISIBLE="visible"
e.HIDDEN="hidden"
e.COLLAPSE="collapse"
e.isValid=a.makeValidator(e.VISIBLE,e.HIDDEN,e.COLLAPSE)
e.parse=function(o){return"collapsed"===o.toLowerCase()?e.COLLAPSE:t(o)}
var t=a.makeParser(e.isValid)}(U=t.Visibility||(t.Visibility={}))
t.visibilityProperty=new a.CssProperty({name:"visibility",cssName:"visibility",defaultValue:U.VISIBLE,affectsLayout:d.isIOS,valueConverter:U.parse,valueChanged:function(e,t,o){var r=e.viewRef.get()
r?r.isCollapsed=o===U.COLLAPSE:h.write(o+' not set to view\'s property because ".viewRef" is cleared',h.categories.Style,h.messageType.warn)}})
t.visibilityProperty.register(a.Style)
t.androidElevationProperty=new a.CssProperty({name:"androidElevation",cssName:"android-elevation",valueConverter:parseFloat})
t.androidElevationProperty.register(a.Style)
t.androidDynamicElevationOffsetProperty=new a.CssProperty({name:"androidDynamicElevationOffset",cssName:"android-dynamic-elevation-offset",valueConverter:parseFloat})
t.androidDynamicElevationOffsetProperty.register(a.Style)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/style-properties.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/style-properties.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/styling/style-scope.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i,a=o("../node_modules/tns-core-modules/ui/core/properties/properties.js"),s=o("../node_modules/tns-core-modules/css/index.js"),u=o("../node_modules/tns-core-modules/css/parser.js"),l=o("../node_modules/tns-core-modules/ui/styling/css-selector/css-selector.js"),c=o("../node_modules/tns-core-modules/trace/trace.js"),d=o("../node_modules/tns-core-modules/file-system/file-system.js"),p=o("../node_modules/tns-core-modules/application/application-common.js"),f=o("../node_modules/tns-core-modules/profiling/profiling.js")
function h(){n||(n=o("../node_modules/tns-core-modules/ui/animation/keyframe-animation.js"))}function m(){i||(i=o("../node_modules/tns-core-modules/ui/styling/css-animation-parser.js"))}var y="rework"
try{var g=o("./package.json")
g&&"nativescript"===g.cssParser&&(y="nativescript")}catch(e){}function v(){b=w.slice()
b.push.apply(b,P)
_++}t.mergeCssSelectors=v
var b=[],_=0,w=[],P=[],C={},S=Symbol("animations"),T=/('|")(.*?)\1/,x=function(){function e(e,t,o,r,n){this._ast=e
this._url=t
this._file=o
this._keyframes=r
this._source=n
this._selectors=[]
this.parse()}e.fromURI=function(t,o){var n=e.pathRelativeToApp(t)
try{var i=r.loadModule(n,!0)
if(i)return"string"==typeof i?e.fromSource(i,o,n):"object"==typeof i&&"stylesheet"===i.type&&i.stylesheet&&i.stylesheet.rules?e.fromAST(i,o,n):e.fromSource(i.toString(),o,n)}catch(e){}return e.fromFile(n,o)}
e.pathRelativeToApp=function(e){if(!e.startsWith("/"))return e
var t=d.knownFolders.currentApp().path
if(!e.startsWith(t)){c.write(e+" does not start with "+t,c.categories.Error,c.messageType.error)
return e}var o="."+e.substr(t.length)
return o}
e.fromFile=function(t,o){var r=t.replace(/\..\w+$/,".css")
if(r!==t){var n=e.resolveCSSPathFromURL(r)
if(n)return new e(void 0,t,n,o,void 0)}var i=e.resolveCSSPathFromURL(t)
return new e(void 0,t,i,o,void 0)}
e.fromFileImport=function(t,o,r){var n=e.resolveCSSPathFromURL(t,r)
return new e(void 0,t,n,o,void 0)}
e.resolveCSSPathFromURL=function(e,t){var o=d.knownFolders.currentApp().path,r=V(e,o,d.File.exists,t)
return r}
e.fromSource=function(t,o,r){return new e(void 0,r,void 0,o,t)}
e.fromAST=function(t,o,r){return new e(t,r,void 0,o,void 0)}
Object.defineProperty(e.prototype,"selectors",{get:function(){return this._selectors},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"source",{get:function(){return this._source},enumerable:!0,configurable:!0})
e.prototype.load=function(){var e=d.File.fromPath(this._file)
this._source=e.readTextSync()}
e.prototype.parse=function(){try{if(!this._ast){!this._source&&this._file&&this.load()
this._source&&"[object Object]"!==this.source&&this.parseCSSAst()}this._ast?this.createSelectors():this._selectors=[]}catch(e){c.write("Css styling failed: "+e,c.categories.Error,c.messageType.error)
this._selectors=[]}}
e.prototype.parseCSSAst=function(){if(this._source)switch(y){case"nativescript":var e=new u.CSS3Parser(this._source),t=e.parseAStylesheet(),o=new u.CSSNativeScript
this._ast=o.parseStylesheet(t)
return
case"rework":this._ast=s.parse(this._source,{source:this._file})
return}}
e.prototype.createSelectors=function(){this._ast&&(this._selectors=this.createSelectorsFromImports().concat(this.createSelectorsFromSyntaxTree()))}
e.prototype.createSelectorsFromImports=function(){var t=this,o=this._ast.stylesheet.rules.filter(function(e){return"import"===e.type}),r=function(e){var t=e.import,o=t&&t.match(T)
return o&&o[2]},n=function(e){return e.position&&e.position.source},i=o.map(function(e){return{url:r(e),source:n(e)}}).filter(function(e){var t=e.url
return!!t}).map(function(o){var r=o.url,n=o.source
return n?e.fromFileImport(r,t._keyframes,n):e.fromURI(r,t._keyframes)}),a=i.map(function(e){return e&&e.selectors||[]})
return a.reduce(function(e,t){return e.concat(t)},[])}
e.prototype.createSelectorsFromSyntaxTree=function(){var e=this,t=this._ast.stylesheet.rules
t.filter(N).forEach(function(t){return e._keyframes[t.name]=t})
var o=l.fromAstNodes(t)
if(o&&o.length){m()
o.forEach(function(e){e[S]=i.CssAnimationParser.keyframeAnimationsFromCSSDeclarations(e.declarations)})}return o}
e.prototype.toString=function(){return this._file||this._url||"(in-memory)"}
__decorate([f.profile],e.prototype,"load",null)
__decorate([f.profile],e.prototype,"parse",null)
__decorate([f.profile],e.prototype,"parseCSSAst",null)
__decorate([f.profile],e.prototype,"createSelectors",null)
__decorate([f.profile],e,"resolveCSSPathFromURL",null)
return e}()
t.removeTaggedAdditionalCSS=function(e){for(var t=!1,o=0;o<P.length;o++)if(P[o].tag===e){P.splice(o,1)
o--
t=!0}t&&v()
return t}
t.addTaggedAdditionalCSS=function(e,t){var o=x.fromSource(e,C,void 0).selectors,r=!1
if(o&&o.length){r=!0
if(null!=t)for(var n=0;n<o.length;n++)o[n].tag=t
P.push.apply(P,o)
v()}return r}
var I=f.profile('"style-scope".onCssChanged',function(e){if(e.cssText){var t=x.fromSource(e.cssText,C,e.cssFile).selectors
if(t){P.push.apply(P,t)
v()}}else e.cssFile&&j(e.cssFile)})
var j=f.profile('"style-scope".loadCss',function(e){if(e){var t=x.fromURI(e,C).selectors
if(t.length>0){w=t
v()}}})
p.on("cssChanged",I)
p.on("livesync",function(e){j(p.getCssFileName())})
t.loadAppCSS=f.profile('"style-scope".loadAppCSS',function(e){j(e.cssFile)
p.off("loadAppCss",t.loadAppCSS)})
p.hasLaunched()?t.loadAppCSS({eventName:"loadAppCss",object:p,cssFile:p.getCssFileName()}):p.on("loadAppCss",t.loadAppCSS)
var L=function(){function e(e){var t=this
this.viewRef=e
this._onDynamicStateChangeHandler=function(){return t.updateDynamicState()}}e.prototype.onChange=function(){var e=this.viewRef.get()
if(e&&e.isLoaded){this.unsubscribeFromDynamicUpdates()
this.updateMatch()
this.subscribeForDynamicUpdates()
this.updateDynamicState()}else this._matchInvalid=!0}
e.prototype.isSelectorsLatestVersionApplied=function(){var e=this.viewRef.get()
if(!e){c.write('isSelectorsLatestVersionApplied returns default value "false" because "this.viewRef" cleared.',c.categories.Style,c.messageType.warn)
return!1}return this.viewRef.get()._styleScope._getSelectorsVersion()===this._appliedSelectorsVersion}
e.prototype.onLoaded=function(){this._matchInvalid&&this.updateMatch()
this.subscribeForDynamicUpdates()
this.updateDynamicState()}
e.prototype.onUnloaded=function(){this.unsubscribeFromDynamicUpdates()}
e.prototype.updateMatch=function(){var t=this.viewRef.get()
if(t&&t._styleScope){this._match=t._styleScope.matchSelectors(t)
this._appliedSelectorsVersion=t._styleScope._getSelectorsVersion()}else this._match=e.emptyMatch
this._matchInvalid=!1}
e.prototype.updateDynamicState=function(){var e=this,t=this.viewRef.get()
if(t){var o=this._match.selectors.filter(function(e){return!e.dynamic||e.match(t)})
t._batchUpdate(function(){e.stopKeyframeAnimations()
e.setPropertyValues(o)
e.playKeyframeAnimations(o)})}else c.write('updateDynamicState not executed to view because ".viewRef" is cleared',c.categories.Style,c.messageType.warn)}
e.prototype.playKeyframeAnimations=function(e){var t=[]
e.forEach(function(e){var o=e.ruleset[S]
if(o){h()
for(var r=0,i=o;r<i.length;r++){var a=i[r],s=n.KeyframeAnimation.keyframeAnimationFromInfo(a)
s&&t.push(s)}}})
if(this._playsKeyframeAnimations=t.length>0){var o=this.viewRef.get()
if(!o){c.write('KeyframeAnimations cannot play because ".viewRef" is cleared',c.categories.Animation,c.messageType.warn)
return}t.map(function(e){return e.play(o)})
Object.freeze(t)
this._appliedAnimations=t}}
e.prototype.stopKeyframeAnimations=function(){if(this._playsKeyframeAnimations){this._appliedAnimations.filter(function(e){return e.isPlaying}).forEach(function(e){return e.cancel()})
this._appliedAnimations=e.emptyAnimationArray
var t=this.viewRef.get()
if(t){t.style["keyframe:rotate"]=a.unsetValue
t.style["keyframe:scaleX"]=a.unsetValue
t.style["keyframe:scaleY"]=a.unsetValue
t.style["keyframe:translateX"]=a.unsetValue
t.style["keyframe:translateY"]=a.unsetValue
t.style["keyframe:backgroundColor"]=a.unsetValue
t.style["keyframe:opacity"]=a.unsetValue}else c.write('KeyframeAnimations cannot be stopped because ".viewRef" is cleared',c.categories.Animation,c.messageType.warn)
this._playsKeyframeAnimations=!1}}
e.prototype.setPropertyValues=function(e){var t=this.viewRef.get()
if(t){var o=new t.style.PropertyBag
e.forEach(function(e){return e.ruleset.declarations.forEach(function(e){return o[e.property]=e.value})})
Object.freeze(o)
var r=this._appliedPropertyValues
for(var n in r)n in o||n in t.style&&(t.style["css:"+n]=a.unsetValue)
for(var i in o)if(!(r&&i in r&&r[i]===o[i])){var s=o[i]
try{if(i in t.style)t.style["css:"+i]=s
else{var u=i.replace(/-([a-z])/g,function(e){return e[1].toUpperCase()})
t[u]=s}}catch(e){c.write("Failed to apply property ["+i+"] with value ["+s+"] to "+t+". "+e,c.categories.Error,c.messageType.error)}}this._appliedPropertyValues=o}else c.write(e+' not set to view\'s property because ".viewRef" is cleared',c.categories.Style,c.messageType.warn)}
e.prototype.subscribeForDynamicUpdates=function(){var e=this,t=this._match.changeMap
t.forEach(function(t,o){t.attributes&&t.attributes.forEach(function(t){o.addEventListener(t+"Change",e._onDynamicStateChangeHandler)})
t.pseudoClasses&&t.pseudoClasses.forEach(function(t){var r=":"+t
o.addEventListener(":"+t,e._onDynamicStateChangeHandler)
o[r]&&o[r](1)})})
this._appliedChangeMap=t}
e.prototype.unsubscribeFromDynamicUpdates=function(){var t=this
this._appliedChangeMap.forEach(function(e,o){e.attributes&&e.attributes.forEach(function(e){o.removeEventListener(e+"Change",t._onDynamicStateChangeHandler)})
e.pseudoClasses&&e.pseudoClasses.forEach(function(e){var r=":"+e
o.removeEventListener(r,t._onDynamicStateChangeHandler)
o[r]&&o[r](-1)})})
this._appliedChangeMap=e.emptyChangeMap}
e.prototype.toString=function(){var e=this.viewRef.get()
if(!e){c.write('toString() of CssState cannot execute correctly because ".viewRef" is cleared',c.categories.Animation,c.messageType.warn)
return""}return e+"._cssState"}
e.emptyChangeMap=Object.freeze(new Map)
e.emptyPropertyBag=Object.freeze({})
e.emptyAnimationArray=Object.freeze([])
e.emptyMatch={selectors:[],changeMap:new Map}
__decorate([f.profile],e.prototype,"updateMatch",null)
__decorate([f.profile],e.prototype,"updateDynamicState",null)
return e}()
t.CssState=L
L.prototype._appliedChangeMap=L.emptyChangeMap
L.prototype._appliedPropertyValues=L.emptyPropertyBag
L.prototype._appliedAnimations=L.emptyAnimationArray
L.prototype._matchInvalid=!0
var E=function(){function e(){this._css=""
this._localCssSelectors=[]
this._localCssSelectorVersion=0
this._localCssSelectorsAppliedVersion=0
this._applicationCssSelectorsAppliedVersion=0
this._keyframes=new Map}Object.defineProperty(e.prototype,"css",{get:function(){return this._css},set:function(e){this.setCss(e)},enumerable:!0,configurable:!0})
e.prototype.addCss=function(e,t){this.appendCss(e,t)}
e.prototype.addCssFile=function(e){this.appendCss(null,e)}
e.prototype.changeCssFile=function(e){if(e){var t=x.fromURI(e,this._keyframes)
this._css=t.source
this._localCssSelectors=t.selectors
this._localCssSelectorVersion++
this.ensureSelectors()}}
e.prototype.setCss=function(e,t){this._css=e
var o=x.fromSource(e,this._keyframes,t)
this._localCssSelectors=o.selectors
this._localCssSelectorVersion++
this.ensureSelectors()}
e.prototype.appendCss=function(e,t){if(e||t){var o=e?x.fromSource(e,this._keyframes,t):x.fromURI(t,this._keyframes)
this._css=this._css+o.source
this._localCssSelectors.push.apply(this._localCssSelectors,o.selectors)
this._localCssSelectorVersion++
this.ensureSelectors()}}
e.prototype.getKeyframeAnimationWithName=function(e){var t=this._keyframes[e]
if(t){h()
var o=new n.KeyframeAnimationInfo
m()
o.keyframes=i.CssAnimationParser.keyframesArrayFromCSS(t.keyframes)
return o}}
e.prototype.ensureSelectors=function(){this.isApplicationCssSelectorsLatestVersionApplied()&&this.isLocalCssSelectorsLatestVersionApplied()&&this._mergedCssSelectors||this._createSelectors()
return this._getSelectorsVersion()}
e.prototype.isApplicationCssSelectorsLatestVersionApplied=function(){return this._applicationCssSelectorsAppliedVersion===_}
e.prototype.isLocalCssSelectorsLatestVersionApplied=function(){return this._localCssSelectorsAppliedVersion===this._localCssSelectorVersion}
e.prototype._createSelectors=function(){var e=[]
e.push(b)
this._applicationCssSelectorsAppliedVersion=_
e.push(this._localCssSelectors)
this._localCssSelectorsAppliedVersion=this._localCssSelectorVersion
for(var t in C)this._keyframes[t]=C[t]
if(e.length>0){this._mergedCssSelectors=e.filter(function(e){return!!e}).reduce(function(e,t){return e.concat(t)},[])
this._applyKeyframesOnSelectors()
this._selectors=new l.SelectorsMap(this._mergedCssSelectors)}}
e.prototype.matchSelectors=function(e){this.ensureSelectors()
return this._selectors.query(e)}
e.prototype.query=function(e){this.ensureSelectors()
return this._selectors.query(e).selectors}
e.prototype._getSelectorsVersion=function(){return 1e5*this._applicationCssSelectorsAppliedVersion+this._localCssSelectorsAppliedVersion}
e.prototype._applyKeyframesOnSelectors=function(){for(var e=this._mergedCssSelectors.length-1;e>=0;e--){var t=this._mergedCssSelectors[e],o=t[S]
if(void 0!==o&&o.length){m()
for(var r=0,n=o;r<n.length;r++){var a=n[r],s=this._keyframes[a.name]
void 0!==s&&(a.keyframes=i.CssAnimationParser.keyframesArrayFromCSS(s.keyframes))}}}}
e.prototype.getAnimations=function(e){return e[S]}
__decorate([f.profile],e.prototype,"setCss",null)
__decorate([f.profile],e.prototype,"appendCss",null)
__decorate([f.profile],e.prototype,"_createSelectors",null)
__decorate([f.profile],e.prototype,"matchSelectors",null)
return e}()
t.StyleScope=E
function V(e,t,o,r){var n="string"==typeof e?e.trim():""
0===n.indexOf("~/")&&(n=n.replace("~/",""))
var i=0===n.indexOf("/"),a=i?n:d.path.join(t,n)
if(o(a))return a
if(!i){"~"===n[0]&&"/"!==n[1]&&'"'!==n[1]&&(n=n.substr(1))
if(r){var s=function(e,t){var o=e.split(d.path.separator),r=t.split(d.path.separator).filter(function(e){return!(t=e,"."===t)
var t})
o.pop()
r.forEach(function(e){return t=e,".."===t?o.pop():o.push(e)
var t})
return o.join(d.path.separator)}(r,n)
if(o(s))return s}var u=d.path.join(t,"tns_modules",n)
if(o(u))return u}return null}t.resolveFileNameFromUrl=V
t.applyInlineStyle=f.profile(function(e,t){var o="local { "+t+" }",r=x.fromSource(o,new Map).selectors,n=e.style
r[0].declarations.forEach(function(t){var o=t.property
try{o in n?n[o]=t.value:e[o]=t.value}catch(o){c.write("Failed to apply property ["+t.property+"] with value ["+t.value+"] to "+e+". "+o,c.categories.Error,c.messageType.error)}})})
function N(e){return"keyframes"===e.type}if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/style-scope.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/style-scope.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/styling/style/style.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/data/observable/observable.js"),i=o("../node_modules/tns-core-modules/trace/trace.js"),a=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this;-1!==t.constructor.toString().indexOf("[native code]")?o.viewRef=t:o.viewRef=new WeakRef(t)
return o}t.prototype.toString=function(){var e=this.viewRef.get()
if(!e){i.write('toString() of Style cannot execute correctly because ".viewRef" is cleared',i.categories.Animation,i.messageType.warn)
return""}return e+".style"}
Object.defineProperty(t.prototype,"view",{get:function(){if(this.viewRef)return this.viewRef.get()},enumerable:!0,configurable:!0})
return t}(n.Observable)
t.Style=a
a.prototype.PropertyBag=function(){return function(){}}()
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/style/style.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/styling/style/style.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/switch/switch-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js"),i=o("../node_modules/tns-core-modules/color/color.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
var a=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype._onCheckedPropertyChanged=function(e){}
t.checkedChangeEvent="checkedChange"
t=__decorate([n.CSSType("Switch")],t)
return t}(n.View)
t.SwitchBase=a
a.prototype.recycleNativeView="auto"
t.checkedProperty=new n.Property({name:"checked",defaultValue:!1,valueConverter:n.booleanConverter,valueChanged:function(e,t,o){e._onCheckedPropertyChanged(o)}})
t.checkedProperty.register(a)
t.offBackgroundColorProperty=new n.Property({name:"offBackgroundColor",equalityComparer:i.Color.equals,valueConverter:function(e){return new i.Color(e)}})
t.offBackgroundColorProperty.register(a)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/switch/switch-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/switch/switch-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/switch/switch.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/ui/switch/switch-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/switch/switch-common.js"))
var a=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){return new android.widget.Switch(this._context)}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
var t=this.nativeViewProtected
!function(){if(!n){var e=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}t.prototype.onCheckedChanged=function(e,t){var o=this.owner
i.checkedProperty.nativeValueChange(o,t)}
t=__decorate([Interfaces([android.widget.CompoundButton.OnCheckedChangeListener])],t)
return t}(java.lang.Object)
n=e}}()
var o=new n(this)
t.setOnCheckedChangeListener(o)
t.listener=o}
t.prototype.disposeNativeView=function(){var t=this.nativeViewProtected
t.listener.owner=null
e.prototype.disposeNativeView.call(this)}
t.prototype.setNativeBackgroundColor=function(e){e instanceof i.Color?this.nativeViewProtected.getTrackDrawable().setColorFilter(e.android,android.graphics.PorterDuff.Mode.SRC_IN):this.nativeViewProtected.getTrackDrawable().clearColorFilter()}
t.prototype._onCheckedPropertyChanged=function(e){this.offBackgroundColor&&(e?this.setNativeBackgroundColor(this.backgroundColor):this.setNativeBackgroundColor(this.offBackgroundColor))}
t.prototype[i.checkedProperty.getDefault]=function(){return!1}
t.prototype[i.checkedProperty.setNative]=function(e){this.nativeViewProtected.setChecked(e)}
t.prototype[i.colorProperty.getDefault]=function(){return-1}
t.prototype[i.colorProperty.setNative]=function(e){e instanceof i.Color?this.nativeViewProtected.getThumbDrawable().setColorFilter(e.android,android.graphics.PorterDuff.Mode.SRC_IN):this.nativeViewProtected.getThumbDrawable().clearColorFilter()}
t.prototype[i.backgroundColorProperty.getDefault]=function(){return-1}
t.prototype[i.backgroundColorProperty.setNative]=function(e){this.offBackgroundColor&&!this.checked||this.setNativeBackgroundColor(e)}
t.prototype[i.backgroundInternalProperty.getDefault]=function(){return null}
t.prototype[i.backgroundInternalProperty.setNative]=function(e){}
t.prototype[i.offBackgroundColorProperty.getDefault]=function(){return-1}
t.prototype[i.offBackgroundColorProperty.setNative]=function(e){this.checked||this.setNativeBackgroundColor(e)}
return t}(i.SwitchBase)
t.Switch=a
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/switch/switch.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/switch/switch.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/tab-navigation-base/tab-content-item/tab-content-item-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js")
t.traceCategory="TabView"
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype._addChildFromBuilder=function(e,t){t instanceof n.View&&(this.view=t)}
Object.defineProperty(t.prototype,"view",{get:function(){return this._view},set:function(e){if(this._view!==e){if(this._view)throw new Error("Changing the view of an already loaded TabContentItem is not currently supported.")
this._view=e
this._addView(e)}},enumerable:!0,configurable:!0})
t.prototype.eachChild=function(e){var t=this._view
t&&e(t)}
t.prototype.loadView=function(t){var o=this.parent
o&&o.items&&this.canBeLoaded&&e.prototype.loadView.call(this,t)}
t=__decorate([n.CSSType("TabContentItem")],t)
return t}(n.ViewBase)
t.TabContentItemBase=i
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tab-navigation-base/tab-content-item/tab-content-item-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tab-navigation-base/tab-content-item/tab-content-item-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/tab-navigation-base/tab-content-item/tab-content-item.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-content-item/tab-content-item-common.js"),i=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-content-item/tab-content-item-common.js"))
var a=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}Object.defineProperty(t.prototype,"_hasFragments",{get:function(){return!0},enumerable:!0,configurable:!0})
t.prototype.disposeNativeView=function(){e.prototype.disposeNativeView.call(this)
this.canBeLoaded=!1}
t.prototype._getChildFragmentManager=function(){var e=this.parent,t=null,o=e._getFragmentManager()
void 0===this.index&&i.traceWrite("Current TabContentItem index is not set",n.traceCategory,i.traceMessageType.error)
for(var r=0,a=o.getFragments().toArray();r<a.length;r++){var s=a[r]
if(s.index===this.index){t=s
break}}return t?t.getChildFragmentManager():e._getRootFragmentManager()}
return t}(n.TabContentItemBase)
t.TabContentItem=a
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tab-navigation-base/tab-content-item/tab-content-item.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tab-navigation-base/tab-content-item/tab-content-item.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/tab-navigation-base/tab-navigation-base/tab-navigation-base.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){e.items="items"}(t.knownCollections||(t.knownCollections={}))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype._addArrayFromBuilder=function(e,t){"items"===e&&(this.items=t)}
t.prototype._addChildFromBuilder=function(e,t){if("TabContentItem"===e){this.items||(this.items=new Array)
this.items.push(t)
this._addView(t)}else if("TabStrip"===e){this.tabStrip=t
this._addView(t)}}
Object.defineProperty(t.prototype,"_selectedView",{get:function(){var e=this.selectedIndex
return e>-1?this.items[e].view:null},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"_childrenCount",{get:function(){var e=this.items
return e?e.length:0},enumerable:!0,configurable:!0})
t.prototype.eachChild=function(e){var t=this.items
t&&t.forEach(function(t,o){e(t)})
var o=this.tabStrip
o&&e(o)}
t.prototype.eachChildView=function(e){var t=this.items
t&&t.forEach(function(t,o){e(t.view)})}
t.prototype.onItemsChanged=function(e,t){var o=this
e&&e.forEach(function(e){return o._removeView(e)})
t&&t.forEach(function(e){if(!e.view)throw new Error("TabContentItem must have a view.")
o._addView(e)})}
t.prototype.onTabStripChanged=function(e,t){var o=this
e&&e.items&&e.items.length&&e.items.forEach(function(e){return o._removeView(e)})
t&&t.items&&t.items.length&&t.items.forEach(function(e){o._addView(e)})}
t.prototype.onSelectedIndexChanged=function(e,o){this.notify({eventName:t.selectedIndexChangedEvent,object:this,oldIndex:e,newIndex:o})}
t.prototype.getTabBarBackgroundColor=function(){return null}
t.prototype.setTabBarBackgroundColor=function(e){}
t.prototype.getTabBarFontInternal=function(){return null}
t.prototype.setTabBarFontInternal=function(e){}
t.prototype.getTabBarTextTransform=function(){return null}
t.prototype.setTabBarTextTransform=function(e){}
t.prototype.getTabBarHighlightColor=function(){}
t.prototype.setTabBarHighlightColor=function(e){}
t.prototype.getTabBarColor=function(){return null}
t.prototype.setTabBarColor=function(e){}
t.prototype.getTabBarItemBackgroundColor=function(e){return null}
t.prototype.setTabBarItemBackgroundColor=function(e,t){}
t.prototype.getTabBarItemColor=function(e){return null}
t.prototype.setTabBarItemColor=function(e,t){}
t.prototype.getTabBarItemFontSize=function(e){return null}
t.prototype.setTabBarItemFontSize=function(e,t){}
t.prototype.getTabBarItemFontInternal=function(e){return null}
t.prototype.setTabBarItemFontInternal=function(e,t){}
t.prototype.getTabBarItemTextTransform=function(e){return null}
t.prototype.setTabBarItemTextTransform=function(e,t){}
t.selectedIndexChangedEvent="selectedIndexChanged"
return t}(n.View)
t.TabNavigationBase=i
t.selectedIndexProperty=new n.CoercibleProperty({name:"selectedIndex",defaultValue:-1,affectsLayout:n.isIOS,valueChanged:function(e,t,o){e.onSelectedIndexChanged(t,o)},coerceValue:function(e,t){var o=e.items
if(o){var r=o.length-1
t<0&&(t=0)
t>r&&(t=r)}else t=-1
return t},valueConverter:function(e){return parseInt(e)}})
t.selectedIndexProperty.register(i)
t.itemsProperty=new n.Property({name:"items",valueChanged:function(e,t,o){e.onItemsChanged(t,o)}})
t.itemsProperty.register(i)
t.tabStripProperty=new n.Property({name:"tabStrip",valueChanged:function(e,t,o){e.onTabStripChanged(t,o)}})
t.tabStripProperty.register(i)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tab-navigation-base/tab-navigation-base/tab-navigation-base.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tab-navigation-base/tab-navigation-base/tab-navigation-base.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/tab-navigation-base/tab-strip-item/tab-strip-item.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js"),i=o("../node_modules/tns-core-modules/ui/text-base/text-base.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
t.traceCategory="TabView"
var a=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}o=t
t.prototype._addChildFromBuilder=function(e,t){if("Image"===e){this.image=t
this.iconSource=t.src
this._addView(t)}if("Label"===e){this.label=t
this.title=t.text
this._addView(t)}}
t.prototype.requestLayout=function(){var e=this.parent
e&&e.requestLayout()}
t.prototype._updateTabStateChangeHandler=function(e){var t=this
if(e){this._highlightedHandler=this._highlightedHandler||function(){t._goToVisualState("highlighted")}
this._normalHandler=this._normalHandler||function(){t._goToVisualState("normal")}
this.on(o.selectEvent,this._highlightedHandler)
this.on(o.unselectEvent,this._normalHandler)
var r=this.parent,n=r&&r.parent
this.index===n.selectedIndex&&this._goToVisualState("highlighted")}else{this.off(o.selectEvent,this._highlightedHandler)
this.off(o.unselectEvent,this._normalHandler)}}
t.prototype[n.backgroundColorProperty.getDefault]=function(){var e=this.parent,t=e&&e.parent
return t&&t.getTabBarBackgroundColor()}
t.prototype[n.backgroundColorProperty.setNative]=function(e){var t=this.parent,o=t&&t.parent
return o&&o.setTabBarItemBackgroundColor(this,e)}
t.prototype[n.backgroundInternalProperty.getDefault]=function(){return null}
t.prototype[n.backgroundInternalProperty.setNative]=function(e){}
t.prototype[n.colorProperty.getDefault]=function(){var e=this.parent,t=e&&e.parent
return t&&t.getTabBarItemColor(this)}
t.prototype[n.colorProperty.setNative]=function(e){var t=this.parent,o=t&&t.parent
return o&&o.setTabBarItemColor(this,e)}
t.prototype[n.fontSizeProperty.getDefault]=function(){var e=this.parent,t=e&&e.parent
return t&&t.getTabBarItemFontSize(this)}
t.prototype[n.fontSizeProperty.setNative]=function(e){var t=this.parent,o=t&&t.parent
return o&&o.setTabBarItemFontSize(this,e)}
t.prototype[n.fontInternalProperty.getDefault]=function(){var e=this.parent,t=e&&e.parent
return t&&t.getTabBarItemFontInternal(this)}
t.prototype[n.fontInternalProperty.setNative]=function(e){var t=this.parent,o=t&&t.parent
return o&&o.setTabBarItemFontInternal(this,e)}
t.prototype[i.textTransformProperty.getDefault]=function(){var e=this.parent,t=e&&e.parent
return t&&t.getTabBarItemTextTransform(this)}
t.prototype[i.textTransformProperty.setNative]=function(e){var t=this.parent,o=t&&t.parent
return o&&o.setTabBarItemTextTransform(this,e)}
var o
t.tapEvent="tap"
t.selectEvent="select"
t.unselectEvent="unselect"
__decorate([n.PseudoClassHandler("normal","highlighted","pressed","active")],t.prototype,"_updateTabStateChangeHandler",null)
t=o=__decorate([n.CSSType("TabStripItem")],t)
return t}(n.View)
t.TabStripItem=a
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tab-navigation-base/tab-strip-item/tab-strip-item.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tab-navigation-base/tab-strip-item/tab-strip-item.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/tab-navigation-base/tab-strip/tab-strip.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/color/color.js"),i=o("../node_modules/tns-core-modules/ui/core/view/view.js"),a=o("../node_modules/tns-core-modules/ui/text-base/text-base.js")
t.traceCategory="TabView"
t.highlightColorProperty=new i.Property({name:"highlightColor",equalityComparer:n.Color.equals,valueConverter:function(e){return new n.Color(e)}})
var s=function(e){__extends(o,e)
function o(){return null!==e&&e.apply(this,arguments)||this}o.prototype.eachChild=function(e){var t=this.items
t&&t.forEach(function(t,o){e(t)})}
o.prototype._addArrayFromBuilder=function(e,t){"items"===e&&(this.items=t)}
o.prototype._addChildFromBuilder=function(e,t){if("TabStripItem"===e){this.items||(this.items=new Array)
this.items.push(t)
this._addView(t)}}
o.prototype[i.backgroundColorProperty.getDefault]=function(){var e=this.parent
return e&&e.getTabBarBackgroundColor()}
o.prototype[i.backgroundColorProperty.setNative]=function(e){var t=this.parent
return t&&t.setTabBarBackgroundColor(e)}
o.prototype[i.backgroundInternalProperty.getDefault]=function(){return null}
o.prototype[i.backgroundInternalProperty.setNative]=function(e){}
o.prototype[i.colorProperty.getDefault]=function(){var e=this.parent
return e&&e.getTabBarColor()}
o.prototype[i.colorProperty.setNative]=function(e){var t=this.parent
return t&&t.setTabBarColor(e)}
o.prototype[i.fontInternalProperty.getDefault]=function(){var e=this.parent
return e&&e.getTabBarFontInternal()}
o.prototype[i.fontInternalProperty.setNative]=function(e){var t=this.parent
return t&&t.setTabBarFontInternal(e)}
o.prototype[a.textTransformProperty.getDefault]=function(){var e=this.parent
return e&&e.getTabBarTextTransform()}
o.prototype[a.textTransformProperty.setNative]=function(e){var t=this.parent
return t&&t.setTabBarTextTransform(e)}
o.prototype[t.highlightColorProperty.getDefault]=function(){var e=this.parent
return e&&e.getTabBarHighlightColor()}
o.prototype[t.highlightColorProperty.setNative]=function(e){var t=this.parent
return t&&t.setTabBarHighlightColor(e)}
o=__decorate([i.CSSType("TabStrip")],o)
return o}(i.View)
t.TabStrip=s
t.iosIconRenderingModeProperty=new i.Property({name:"iosIconRenderingMode",defaultValue:"automatic"})
t.iosIconRenderingModeProperty.register(s)
t.highlightColorProperty.register(s)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tab-navigation-base/tab-strip/tab-strip.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tab-navigation-base/tab-strip/tab-strip.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/tab-view/tab-view-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
t.traceCategory="TabView"
var i=function(e){__extends(t,e)
function t(){var t=null!==e&&e.apply(this,arguments)||this
t._title=""
return t}Object.defineProperty(t.prototype,"textTransform",{get:function(){return this.style.textTransform},set:function(e){this.style.textTransform=e},enumerable:!0,configurable:!0})
t.prototype._addChildFromBuilder=function(e,t){t instanceof n.View&&(this.view=t)}
Object.defineProperty(t.prototype,"title",{get:function(){return this._title},set:function(e){if(this._title!==e){this._title=e
this._update()}},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"view",{get:function(){return this._view},set:function(e){if(this._view!==e){if(this._view)throw new Error("Changing the view of an already loaded TabViewItem is not currently supported.")
this._view=e
this._addView(e)}},enumerable:!0,configurable:!0})
Object.defineProperty(t.prototype,"iconSource",{get:function(){return this._iconSource},set:function(e){if(this._iconSource!==e){this._iconSource=e
this._update()}},enumerable:!0,configurable:!0})
t.prototype.eachChild=function(e){var t=this._view
t&&e(t)}
t.prototype.loadView=function(t){var o=this.parent
o&&o.items&&this.canBeLoaded&&e.prototype.loadView.call(this,t)}
t=__decorate([n.CSSType("TabViewItem")],t)
return t}(n.ViewBase)
t.TabViewItemBase=i
!function(e){e.items="items"}(t.knownCollections||(t.knownCollections={}))
var a=function(e){__extends(o,e)
function o(){return null!==e&&e.apply(this,arguments)||this}r=o
Object.defineProperty(o.prototype,"androidSelectedTabHighlightColor",{get:function(){return this.style.androidSelectedTabHighlightColor},set:function(e){this.style.androidSelectedTabHighlightColor=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"tabTextFontSize",{get:function(){return this.style.tabTextFontSize},set:function(e){this.style.tabTextFontSize=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"tabTextColor",{get:function(){return this.style.tabTextColor},set:function(e){this.style.tabTextColor=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"tabBackgroundColor",{get:function(){return this.style.tabBackgroundColor},set:function(e){this.style.tabBackgroundColor=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"selectedTabTextColor",{get:function(){return this.style.selectedTabTextColor},set:function(e){this.style.selectedTabTextColor=e},enumerable:!0,configurable:!0})
o.prototype._addArrayFromBuilder=function(e,t){"items"===e&&(this.items=t)}
o.prototype._addChildFromBuilder=function(e,o){if("TabViewItem"===e){this.items||(this.items=new Array)
this.items.push(o)
this._addView(o)
t.selectedIndexProperty.coerce(this)}}
Object.defineProperty(o.prototype,"_selectedView",{get:function(){var e=this.selectedIndex
return e>-1?this.items[e].view:null},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"_childrenCount",{get:function(){var e=this.items
return e?e.length:0},enumerable:!0,configurable:!0})
o.prototype.eachChild=function(e){var t=this.items
t&&t.forEach(function(t,o){e(t)})}
o.prototype.eachChildView=function(e){var t=this.items
t&&t.forEach(function(t,o){e(t.view)})}
o.prototype.onItemsChanged=function(e,t){var o=this
e&&e.forEach(function(e){return o._removeView(e)})
t&&t.forEach(function(e){if(!e.view)throw new Error("TabViewItem must have a view.")
o._addView(e)})}
o.prototype.onSelectedIndexChanged=function(e,t){this.notify({eventName:r.selectedIndexChangedEvent,object:this,oldIndex:e,newIndex:t})}
var r
o.selectedIndexChangedEvent="selectedIndexChanged"
o=r=__decorate([n.CSSType("TabView")],o)
return o}(n.View)
t.TabViewBase=a
t.traceMissingIcon=function(e){n.traceWrite("Could not load tab bar icon: "+e,n.traceCategories.Error,n.traceMessageType.error)}
t.selectedIndexProperty=new n.CoercibleProperty({name:"selectedIndex",defaultValue:-1,affectsLayout:n.isIOS,valueChanged:function(e,t,o){e.onSelectedIndexChanged(t,o)},coerceValue:function(e,t){var o=e.items
if(o){var r=o.length-1
t<0&&(t=0)
t>r&&(t=r)}else t=-1
return t},valueConverter:function(e){return parseInt(e)}})
t.selectedIndexProperty.register(a)
t.itemsProperty=new n.Property({name:"items",valueChanged:function(e,t,o){e.onItemsChanged(t,o)}})
t.itemsProperty.register(a)
t.iosIconRenderingModeProperty=new n.Property({name:"iosIconRenderingMode",defaultValue:"automatic"})
t.iosIconRenderingModeProperty.register(a)
t.androidOffscreenTabLimitProperty=new n.Property({name:"androidOffscreenTabLimit",defaultValue:1,affectsLayout:n.isIOS,valueConverter:function(e){return parseInt(e)}})
t.androidOffscreenTabLimitProperty.register(a)
t.androidTabsPositionProperty=new n.Property({name:"androidTabsPosition",defaultValue:"top"})
t.androidTabsPositionProperty.register(a)
t.androidSwipeEnabledProperty=new n.Property({name:"androidSwipeEnabled",defaultValue:!0,valueConverter:n.booleanConverter})
t.androidSwipeEnabledProperty.register(a)
t.tabTextFontSizeProperty=new n.CssProperty({name:"tabTextFontSize",cssName:"tab-text-font-size",valueConverter:function(e){return parseFloat(e)}})
t.tabTextFontSizeProperty.register(n.Style)
t.tabTextColorProperty=new n.CssProperty({name:"tabTextColor",cssName:"tab-text-color",equalityComparer:n.Color.equals,valueConverter:function(e){return new n.Color(e)}})
t.tabTextColorProperty.register(n.Style)
t.tabBackgroundColorProperty=new n.CssProperty({name:"tabBackgroundColor",cssName:"tab-background-color",equalityComparer:n.Color.equals,valueConverter:function(e){return new n.Color(e)}})
t.tabBackgroundColorProperty.register(n.Style)
t.selectedTabTextColorProperty=new n.CssProperty({name:"selectedTabTextColor",cssName:"selected-tab-text-color",equalityComparer:n.Color.equals,valueConverter:function(e){return new n.Color(e)}})
t.selectedTabTextColorProperty.register(n.Style)
t.androidSelectedTabHighlightColorProperty=new n.CssProperty({name:"androidSelectedTabHighlightColor",cssName:"android-selected-tab-highlight-color",equalityComparer:n.Color.equals,valueConverter:function(e){return new n.Color(e)}})
t.androidSelectedTabHighlightColorProperty.register(n.Style)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tab-view/tab-view-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tab-view/tab-view-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/tab-view/tab-view.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/styling/font.js"),i=o("../node_modules/tns-core-modules/ui/tab-view/tab-view-common.js"),a=o("../node_modules/tns-core-modules/ui/text-base/text-base.js"),s=o("../node_modules/tns-core-modules/image-source/image-source.js"),u=o("../node_modules/tns-core-modules/utils/utils.js"),l=o("../node_modules/tns-core-modules/ui/frame/frame.js"),c=o("../node_modules/tns-core-modules/application/application.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/tab-view/tab-view-common.js"))
var d,p="colorAccent",f=4,h="_tabId",m="_index"
function y(){if(!d){var e=function(e){__extends(o,e)
function o(){var t=e.call(this)||this
return r.__native(t)}o.newInstance=function(e,t){var r=new android.os.Bundle
r.putInt(h,e)
r.putInt(m,t)
var n=new o
n.setArguments(r)
return n}
o.prototype.onCreate=function(o){e.prototype.onCreate.call(this,o)
var r,n,i=this.getArguments()
this.tab=(r=i.getInt(h),n=t.tabs.find(function(e){var t=e.get()
return t&&t._domId===r}),n&&n.get())
this.index=i.getInt(m)
if(!this.tab)throw new Error("Cannot find TabView")}
o.prototype.onCreateView=function(e,t,o){var r=this.tab.items[this.index]
return r.view.nativeViewProtected}
return o}(org.nativescript.widgets.FragmentBase),o=function(t){__extends(o,t)
function o(e){var o=t.call(this)||this
o.owner=e
return r.__native(o)}o.prototype.getCount=function(){var e=this.items
return e?e.length:0}
o.prototype.getPageTitle=function(e){var t=this.items
return e<0||e>=t.length?"":t[e].title}
o.prototype.startUpdate=function(e){if(e.getId()===android.view.View.NO_ID)throw new Error("ViewPager with adapter "+this+" requires a view containerId")}
o.prototype.instantiateItem=function(t,o){var r=this.owner._getFragmentManager()
this.mCurTransaction||(this.mCurTransaction=r.beginTransaction())
var n,i,a=this.getItemId(o),s=(n=t.getId(),i=a,"android:viewpager:"+n+":"+i),u=r.findFragmentByTag(s)
if(null!=u)this.mCurTransaction.attach(u)
else{u=e.newInstance(this.owner._domId,o)
this.mCurTransaction.add(t.getId(),u,s)}if(u!==this.mCurrentPrimaryItem){u.setMenuVisibility(!1)
u.setUserVisibleHint(!1)}var l=this.owner.items,c=l?l[o]:null
c&&(c.canBeLoaded=!0)
return u}
o.prototype.getItemPosition=function(e){return this.items?-1:-2}
o.prototype.destroyItem=function(e,t,o){if(!this.mCurTransaction){var r=this.owner._getFragmentManager()
this.mCurTransaction=r.beginTransaction()}var n=o
this.mCurTransaction.detach(n)
this.mCurrentPrimaryItem===n&&(this.mCurrentPrimaryItem=null)
var i=this.owner.items,a=i?i[t]:null
a&&(a.canBeLoaded=!1)}
o.prototype.setPrimaryItem=function(e,t,o){var r=o
if(r!==this.mCurrentPrimaryItem){if(null!=this.mCurrentPrimaryItem){this.mCurrentPrimaryItem.setMenuVisibility(!1)
this.mCurrentPrimaryItem.setUserVisibleHint(!1)}if(null!=r){r.setMenuVisibility(!0)
r.setUserVisibleHint(!0)}this.mCurrentPrimaryItem=r
this.owner.selectedIndex=t
var n=this.owner,i=n.items,a=i?i[t]:null
a&&n._loadUnloadTabItems(n.selectedIndex)}}
o.prototype.finishUpdate=function(e){this._commitCurrentTransaction()}
o.prototype.isViewFromObject=function(e,t){return t.getView()===e}
o.prototype.saveState=function(){this._commitCurrentTransaction()
return null}
o.prototype.restoreState=function(e,t){}
o.prototype.getItemId=function(e){return e}
o.prototype._commitCurrentTransaction=function(){if(null!=this.mCurTransaction){this.mCurTransaction.commitNowAllowingStateLoss()
this.mCurTransaction=null}}
return o}(androidx.viewpager.widget.PagerAdapter)
d=o}}function g(e){var t=new org.nativescript.widgets.TabItemSpec
t.title=e.title
if(e.iconSource)if(0===e.iconSource.indexOf(u.RESOURCE_PREFIX)){t.iconId=u.ad.resources.getDrawableId(e.iconSource.substr(u.RESOURCE_PREFIX.length))
0===t.iconId&&i.traceMissingIcon(e.iconSource)}else{var o=s.fromFileOrResource(e.iconSource)
o?t.iconDrawable=new android.graphics.drawable.BitmapDrawable(c.android.context.getResources(),o.android):i.traceMissingIcon(e.iconSource)}return t}var v=void 0
function b(e){void 0===v&&(v=u.ad.resources.getPaletteColor(p,e)||4281578981)
return v}var _=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}Object.defineProperty(t.prototype,"_hasFragments",{get:function(){return!0},enumerable:!0,configurable:!0})
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
this.nativeViewProtected&&(this._defaultTransformationMethod=this.nativeViewProtected.getTransformationMethod())}
t.prototype.onLoaded=function(){e.prototype.onLoaded.call(this)}
t.prototype.resetNativeView=function(){e.prototype.resetNativeView.call(this)
this.nativeViewProtected&&this.nativeViewProtected.setTransformationMethod(this._defaultTransformationMethod)}
t.prototype.disposeNativeView=function(){e.prototype.disposeNativeView.call(this)
this.canBeLoaded=!1}
t.prototype.createNativeView=function(){return this.nativeViewProtected}
t.prototype._update=function(){var e=this.nativeViewProtected,t=this.parent
if(e&&t){this.tabItemSpec=g(this)
t.updateAndroidItemAt(this.index,this.tabItemSpec)}}
t.prototype._getChildFragmentManager=function(){for(var e=this.parent,t=null,o=e._getFragmentManager(),r=0,n=o.getFragments().toArray();r<n.length;r++){var a=n[r]
if(a.index===this.index){t=a
break}}if(!t){i.traceEnabled()&&i.traceWrite("Could not get child fragment manager for tab item with index "+this.index,i.traceCategory)
return e._getRootFragmentManager()}return t.getChildFragmentManager()}
t.prototype[i.fontSizeProperty.getDefault]=function(){return{nativeSize:this.nativeViewProtected.getTextSize()}}
t.prototype[i.fontSizeProperty.setNative]=function(e){"number"==typeof e?this.nativeViewProtected.setTextSize(e):this.nativeViewProtected.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX,e.nativeSize)}
t.prototype[i.fontInternalProperty.getDefault]=function(){return this.nativeViewProtected.getTypeface()}
t.prototype[i.fontInternalProperty.setNative]=function(e){this.nativeViewProtected.setTypeface(e instanceof n.Font?e.getAndroidTypeface():e)}
t.prototype[a.textTransformProperty.getDefault]=function(){return"default"}
t.prototype[a.textTransformProperty.setNative]=function(e){var t=this.nativeViewProtected
if("default"===e){t.setTransformationMethod(this._defaultTransformationMethod)
t.setText(this.title)}else{var o=a.getTransformedText(this.title,e)
t.setText(o)
t.setTransformationMethod(null)}}
return t}(i.TabViewItemBase)
t.TabViewItem=_
t.tabs=new Array
var w=function(e){__extends(o,e)
function o(){var o=e.call(this)||this
o._androidViewId=-1
t.tabs.push(new WeakRef(o))
return o}Object.defineProperty(o.prototype,"_hasFragments",{get:function(){return!0},enumerable:!0,configurable:!0})
o.prototype.onItemsChanged=function(t,o){e.prototype.onItemsChanged.call(this,t,o)
t&&t.forEach(function(e,t,o){e.index=0
e.tabItemSpec=null
e.setNativeView(null)})}
o.prototype.createNativeView=function(){y()
i.traceEnabled()&&i.traceWrite("TabView._createUI("+this+");",i.traceCategory)
var e=this._context,t=new org.nativescript.widgets.GridLayout(e),o=new org.nativescript.widgets.TabViewPager(e),r=new org.nativescript.widgets.TabLayout(e),n=new org.nativescript.widgets.CommonLayoutParams,a=u.ad.resources.getPaletteColor("colorPrimary",e),s=b(e)
n.row=1
if("top"===this.androidTabsPosition){t.addRow(new org.nativescript.widgets.ItemSpec(1,org.nativescript.widgets.GridUnitType.auto))
t.addRow(new org.nativescript.widgets.ItemSpec(1,org.nativescript.widgets.GridUnitType.star))
o.setLayoutParams(n)
this.androidSwipeEnabled||o.setSwipePageEnabled(!1)}else{t.addRow(new org.nativescript.widgets.ItemSpec(1,org.nativescript.widgets.GridUnitType.star))
t.addRow(new org.nativescript.widgets.ItemSpec(1,org.nativescript.widgets.GridUnitType.auto))
r.setLayoutParams(n)
o.setSwipePageEnabled(!1)
s=16777215}t.addView(o)
t.viewPager=o
var l=new d(this)
o.setAdapter(l)
o.adapter=l
t.addView(r)
t.tabLayout=r
!function(e,t){var o=androidx.core.view.ViewCompat
if(o.setElevation){var r=f*i.layout.getDisplayDensity()
o.setElevation(e,r)
o.setElevation(t,r)}}(t,r)
s&&r.setSelectedIndicatorColors([s])
a&&r.setBackgroundColor(a)
return t}
o.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
this._androidViewId<0&&(this._androidViewId=android.view.View.generateViewId())
var t=this.nativeViewProtected
this._tabLayout=t.tabLayout
var o=t.viewPager
o.setId(this._androidViewId)
this._viewPager=o
this._pagerAdapter=o.adapter
this._pagerAdapter.owner=this}
o.prototype._loadUnloadTabItems=function(e){var t=this,o=this.items,r=this.items.length-1,n="top"===this.androidTabsPosition?this.androidOffscreenTabLimit:1,i=[],a=[]
!function(e,t,o,r){for(var n=Math.max(0,e-t),i=Math.min(e+t,o),a=n;a<=i;a++)r(a)}(e,n,r,function(e){return a.push(e)})
o.forEach(function(e,t){var o=a.indexOf(t)
o<0&&i.push(t)})
i.forEach(function(e){var t=o[e]
o[e]&&t.unloadView(t.view)})
var s=o[e],u=s&&s.view
u instanceof l.Frame&&u._pushInFrameStackRecursive()
a.forEach(function(e){var r=o[e]
t.isLoaded&&o[e]&&r.loadView(r.view)})}
o.prototype.onLoaded=function(){e.prototype.onLoaded.call(this)
this.setAdapterItems(this.items)}
o.prototype.onUnloaded=function(){e.prototype.onUnloaded.call(this)
this.setAdapterItems(null)}
o.prototype.disposeNativeView=function(){this._tabLayout.setItems(null,null)
this._pagerAdapter.owner=null
this._pagerAdapter=null
this._tabLayout=null
this._viewPager=null
e.prototype.disposeNativeView.call(this)}
o.prototype._onRootViewReset=function(){e.prototype._onRootViewReset.call(this)
this.disposeCurrentFragments()}
o.prototype.disposeCurrentFragments=function(){for(var e=this._getFragmentManager(),t=e.beginTransaction(),o=0,r=e.getFragments().toArray();o<r.length;o++){var n=r[o]
t.remove(n)}t.commitNowAllowingStateLoss()}
o.prototype.shouldUpdateAdapter=function(e){if(!this._pagerAdapter)return!1
var t=this._pagerAdapter.items
if(!e&&!t)return!1
if(!e||!t)return!0
if(e.length!==t.length)return!0
var o=t.filter(function(t){return!!e.filter(function(e){return e._domId===t._domId})[0]})
return o.length!==e.length}
o.prototype.setAdapterItems=function(e){if(this.shouldUpdateAdapter(e)){this._pagerAdapter.items=e
var t=e?e.length:0
if(0===t){this._tabLayout.setItems(null,null)
this._pagerAdapter.notifyDataSetChanged()
return}var o=new Array
e.forEach(function(e,t,r){var n=g(e)
e.index=t
e.tabItemSpec=n
o.push(n)})
var r=this._tabLayout
r.setItems(o,this._viewPager)
e.forEach(function(e,t,o){var n=r.getTextViewForItemAt(t)
e.setNativeView(n)})
this._pagerAdapter.notifyDataSetChanged()}}
o.prototype.updateAndroidItemAt=function(e,t){this._tabLayout.updateItemAt(e,t)}
o.prototype[i.androidOffscreenTabLimitProperty.getDefault]=function(){return this._viewPager.getOffscreenPageLimit()}
o.prototype[i.androidOffscreenTabLimitProperty.setNative]=function(e){this._viewPager.setOffscreenPageLimit(e)}
o.prototype[i.selectedIndexProperty.setNative]=function(e){var t="top"===this.androidTabsPosition
i.traceEnabled()&&i.traceWrite("TabView this._viewPager.setCurrentItem("+e+", "+t+");",i.traceCategory)
this._viewPager.setCurrentItem(e,t)}
o.prototype[i.itemsProperty.getDefault]=function(){return null}
o.prototype[i.itemsProperty.setNative]=function(e){this.setAdapterItems(e)
i.selectedIndexProperty.coerce(this)}
o.prototype[i.tabBackgroundColorProperty.getDefault]=function(){return this._tabLayout.getBackground()}
o.prototype[i.tabBackgroundColorProperty.setNative]=function(e){e instanceof i.Color?this._tabLayout.setBackgroundColor(e.android):this._tabLayout.setBackground(function(e,t){if(e){var o=e.getConstantState()
if(o)return o.newDrawable(t)}return e}(e,this.nativeViewProtected.getResources))}
o.prototype[i.tabTextFontSizeProperty.getDefault]=function(){return this._tabLayout.getTabTextFontSize()}
o.prototype[i.tabTextFontSizeProperty.setNative]=function(e){"number"==typeof e?this._tabLayout.setTabTextFontSize(e):this._tabLayout.setTabTextFontSize(e.nativeSize)}
o.prototype[i.tabTextColorProperty.getDefault]=function(){return this._tabLayout.getTabTextColor()}
o.prototype[i.tabTextColorProperty.setNative]=function(e){var t=e instanceof i.Color?e.android:e
this._tabLayout.setTabTextColor(t)}
o.prototype[i.selectedTabTextColorProperty.getDefault]=function(){return this._tabLayout.getSelectedTabTextColor()}
o.prototype[i.selectedTabTextColorProperty.setNative]=function(e){var t=e instanceof i.Color?e.android:e
this._tabLayout.setSelectedTabTextColor(t)}
o.prototype[i.androidSelectedTabHighlightColorProperty.getDefault]=function(){return b(this._context)}
o.prototype[i.androidSelectedTabHighlightColorProperty.setNative]=function(e){var t=this._tabLayout,o=e instanceof i.Color?e.android:e
t.setSelectedIndicatorColors([o])}
return o}(i.TabViewBase)
t.TabView=w
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tab-view/tab-view.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tab-view/tab-view.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/tabs/tabs-common.js":function(e,t,o){(function(r){function n(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}Object.defineProperty(t,"__esModule",{value:!0})
var i=o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-navigation-base/tab-navigation-base.js"),a=o("../node_modules/tns-core-modules/ui/core/view/view.js"),s=o("../node_modules/tns-core-modules/ui/core/properties/properties.js")
n(o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-content-item/tab-content-item.js"))
n(o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-navigation-base/tab-navigation-base.js"))
n(o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-strip/tab-strip.js"))
n(o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-strip-item/tab-strip-item.js"))
t.traceCategory="TabView"
!function(e){e.items="items"}(t.knownCollections||(t.knownCollections={}))
var u=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t=__decorate([a.CSSType("Tabs")],t)
return t}(i.TabNavigationBase)
t.TabsBase=u
t.swipeEnabledProperty=new s.Property({name:"swipeEnabled",defaultValue:!0,valueConverter:a.booleanConverter})
t.swipeEnabledProperty.register(u)
t.offscreenTabLimitProperty=new s.Property({name:"offscreenTabLimit",defaultValue:1,valueConverter:function(e){return parseInt(e)}})
t.offscreenTabLimitProperty.register(u)
t.tabsPositionProperty=new s.Property({name:"tabsPosition",defaultValue:"top"})
t.tabsPositionProperty.register(u)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tabs/tabs-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tabs/tabs-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/tabs/tabs.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-strip-item/tab-strip-item.js"),i=o("../node_modules/tns-core-modules/ui/tab-navigation-base/tab-navigation-base/tab-navigation-base.js"),a=o("../node_modules/tns-core-modules/ui/tabs/tabs-common.js"),s=o("../node_modules/tns-core-modules/ui/styling/font.js"),u=o("../node_modules/tns-core-modules/ui/text-base/text-base.js"),l=o("../node_modules/tns-core-modules/ui/frame/frame.js"),c=o("../node_modules/tns-core-modules/ui/core/view/view.js"),d=o("../node_modules/tns-core-modules/image-source/image-source.js"),p=o("../node_modules/tns-core-modules/utils/utils.js"),f=o("../node_modules/tns-core-modules/application/application.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/tabs/tabs-common.js"))
var h,m,y="colorAccent",g=4,v="_tabId",b="_index"
function _(){if(!h){var e=function(e){__extends(o,e)
function o(){var t=e.call(this)||this
return r.__native(t)}o.newInstance=function(e,t){var r=new android.os.Bundle
r.putInt(v,e)
r.putInt(b,t)
var n=new o
n.setArguments(r)
return n}
o.prototype.onCreate=function(o){e.prototype.onCreate.call(this,o)
var r,n,i=this.getArguments()
this.tab=(r=i.getInt(v),n=t.tabs.find(function(e){var t=e.get()
return t&&t._domId===r}),n&&n.get())
this.index=i.getInt(b)
if(!this.tab)throw new Error("Cannot find TabView")}
o.prototype.onCreateView=function(e,t,o){var r=this.tab.items[this.index]
return r.view.nativeViewProtected}
return o}(org.nativescript.widgets.FragmentBase),o=function(t){__extends(o,t)
function o(e){var o=t.call(this)||this
o.owner=e
return r.__native(o)}o.prototype.getCount=function(){var e=this.items
return e?e.length:0}
o.prototype.getPageTitle=function(e){var t=this.items
return e<0||t.length,""}
o.prototype.startUpdate=function(e){if(e.getId()===android.view.View.NO_ID)throw new Error("ViewPager with adapter "+this+" requires a view containerId")}
o.prototype.instantiateItem=function(t,o){var r=this.owner._getFragmentManager()
this.mCurTransaction||(this.mCurTransaction=r.beginTransaction())
var n,i,a=this.getItemId(o),s=(n=t.getId(),i=a,"android:viewpager:"+n+":"+i),u=r.findFragmentByTag(s)
if(null!=u)this.mCurTransaction.attach(u)
else{u=e.newInstance(this.owner._domId,o)
this.mCurTransaction.add(t.getId(),u,s)}if(u!==this.mCurrentPrimaryItem){u.setMenuVisibility(!1)
u.setUserVisibleHint(!1)}var l=this.owner.items,c=l?l[o]:null
c&&(c.canBeLoaded=!0)
return u}
o.prototype.getItemPosition=function(e){return this.items?-1:-2}
o.prototype.destroyItem=function(e,t,o){if(!this.mCurTransaction){var r=this.owner._getFragmentManager()
this.mCurTransaction=r.beginTransaction()}var n=o
this.mCurTransaction.detach(n)
this.mCurrentPrimaryItem===n&&(this.mCurrentPrimaryItem=null)
var i=this.owner.items,a=i?i[t]:null
a&&(a.canBeLoaded=!1)}
o.prototype.setPrimaryItem=function(e,t,o){var r=o
if(r!==this.mCurrentPrimaryItem){if(null!=this.mCurrentPrimaryItem){this.mCurrentPrimaryItem.setMenuVisibility(!1)
this.mCurrentPrimaryItem.setUserVisibleHint(!1)}if(null!=r){r.setMenuVisibility(!0)
r.setUserVisibleHint(!0)}this.mCurrentPrimaryItem=r
this.owner.selectedIndex=t
var n=this.owner,i=n.items,a=i?i[t]:null
a&&n._loadUnloadTabItems(n.selectedIndex)}}
o.prototype.finishUpdate=function(e){this._commitCurrentTransaction()}
o.prototype.isViewFromObject=function(e,t){return t.getView()===e}
o.prototype.saveState=function(){this._commitCurrentTransaction()
return null}
o.prototype.restoreState=function(e,t){}
o.prototype.getItemId=function(e){return e}
o.prototype._commitCurrentTransaction=function(){if(null!=this.mCurTransaction){this.mCurTransaction.commitNowAllowingStateLoss()
this.mCurTransaction=null}}
return o}(androidx.viewpager.widget.PagerAdapter),i=function(e){__extends(t,e)
function t(t,o){var n=e.call(this,t)||this
n.owner=o
return r.__native(n)}t.prototype.onSelectedPositionChange=function(e,t){var o=this.owner
if(o&&e!==t){var r=o.tabStrip&&o.tabStrip.items
e>=0&&r&&r[e]&&r[e]._emit(n.TabStripItem.selectEvent)
t>=0&&r&&r[t]&&r[t]._emit(n.TabStripItem.unselectEvent)
o.selectedIndex=e}}
t.prototype.onTap=function(e){var t=this.owner
if(t){var o=t.tabStrip&&t.tabStrip.items
e>=0&&o[e]&&o[e]._emit(n.TabStripItem.tapEvent)}}
return t}(org.nativescript.widgets.TabLayout)
h=o
m=i}}function w(e){var t,o=new org.nativescript.widgets.TabItemSpec
e.backgroundColor instanceof c.Color&&(o.backgroundColor=e.backgroundColor.android)
t=e.image?e.image.src:e.iconSource
o.title=e.label?e.label.text:e.title
if(t)if(0===t.indexOf(p.RESOURCE_PREFIX)){o.iconId=p.ad.resources.getDrawableId(t.substr(p.RESOURCE_PREFIX.length))
o.iconId}else{var r=new d.ImageSource
if(p.isFontIconURI(e.iconSource)){var n=e.iconSource.split("//")[1],i=e.style.fontInternal,a=e.style.color
r=d.fromFontIconCode(n,i,a)}else r=d.fromFileOrResource(e.iconSource)
r&&(o.iconDrawable=new android.graphics.drawable.BitmapDrawable(f.android.context.getResources(),r.android))}return o}var P=void 0
function C(e){void 0===P&&(P=p.ad.resources.getPaletteColor(y,e)||4281578981)
return P}t.tabs=new Array
var S=function(e){__extends(o,e)
function o(){var o=e.call(this)||this
o._androidViewId=-1
t.tabs.push(new WeakRef(o))
return o}Object.defineProperty(o.prototype,"_hasFragments",{get:function(){return!0},enumerable:!0,configurable:!0})
o.prototype.onItemsChanged=function(t,o){e.prototype.onItemsChanged.call(this,t,o)
t&&t.forEach(function(e,t,o){e.index=0
e.tabItemSpec=null
e.setNativeView(null)})}
o.prototype.createNativeView=function(){_()
var e=this._context,t=new org.nativescript.widgets.GridLayout(e),o=new org.nativescript.widgets.TabViewPager(e),r=new m(e,this),n=new org.nativescript.widgets.CommonLayoutParams,i=p.ad.resources.getPaletteColor("colorPrimary",e),a=C(e)
n.row=1
if("top"===this.tabsPosition){t.addRow(new org.nativescript.widgets.ItemSpec(1,org.nativescript.widgets.GridUnitType.auto))
t.addRow(new org.nativescript.widgets.ItemSpec(1,org.nativescript.widgets.GridUnitType.star))
o.setLayoutParams(n)}else{t.addRow(new org.nativescript.widgets.ItemSpec(1,org.nativescript.widgets.GridUnitType.star))
t.addRow(new org.nativescript.widgets.ItemSpec(1,org.nativescript.widgets.GridUnitType.auto))
r.setLayoutParams(n)}t.addView(o)
t.viewPager=o
var s=new h(this)
o.setAdapter(s)
o.adapter=s
t.addView(r)
t.tabLayout=r
!function(e,t){var o=androidx.core.view.ViewCompat
if(o.setElevation){var r=g*p.layout.getDisplayDensity()
o.setElevation(e,r)
o.setElevation(t,r)}}(t,r)
a&&r.setSelectedIndicatorColors([a])
i&&r.setBackgroundColor(i)
return t}
o.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
this._androidViewId<0&&(this._androidViewId=android.view.View.generateViewId())
var t=this.nativeViewProtected
this._tabLayout=t.tabLayout
var o=t.viewPager
o.setId(this._androidViewId)
this._viewPager=o
this._pagerAdapter=o.adapter
this._pagerAdapter.owner=this}
o.prototype._loadUnloadTabItems=function(e){var t=this,o=this.items,r=this.items.length-1,n=this.offscreenTabLimit,i=[],a=[]
!function(e,t,o,r){for(var n=Math.max(0,e-t),i=Math.min(e+t,o),a=n;a<=i;a++)r(a)}(e,n,r,function(e){return a.push(e)})
o.forEach(function(e,t){var o=a.indexOf(t)
o<0&&i.push(t)})
i.forEach(function(e){var t=o[e]
o[e]&&t.unloadView(t.view)})
var s=o[e],u=s&&s.view
u instanceof l.Frame&&u._pushInFrameStackRecursive()
a.forEach(function(e){var r=o[e]
t.isLoaded&&o[e]&&r.loadView(r.view)})}
o.prototype.onLoaded=function(){e.prototype.onLoaded.call(this)
this.setItems(this.items)
this.setTabStripItems(this.tabStrip.items)}
o.prototype.onUnloaded=function(){e.prototype.onUnloaded.call(this)
this.setItems(null)
this.setTabStripItems(null)}
o.prototype.disposeNativeView=function(){this._tabLayout.setItems(null,null)
this._pagerAdapter.owner=null
this._pagerAdapter=null
this._tabLayout=null
this._viewPager=null
e.prototype.disposeNativeView.call(this)}
o.prototype._onRootViewReset=function(){e.prototype._onRootViewReset.call(this)
this.disposeCurrentFragments()}
o.prototype.disposeCurrentFragments=function(){for(var e=this._getFragmentManager(),t=e.beginTransaction(),o=0,r=e.getFragments().toArray();o<r.length;o++){var n=r[o]
t.remove(n)}t.commitNowAllowingStateLoss()}
o.prototype.shouldUpdateAdapter=function(e){if(!this._pagerAdapter)return!1
var t=this._pagerAdapter.items
if(!e&&!t)return!1
if(!e||!t)return!0
if(e.length!==t.length)return!0
var o=t.filter(function(t){return!!e.filter(function(e){return e._domId===t._domId})[0]})
return o.length!==e.length}
o.prototype.setItems=function(e){if(this.shouldUpdateAdapter(e)){this._pagerAdapter.items=e
e&&e.length&&e.forEach(function(e,t){e.index=t})
this._pagerAdapter.notifyDataSetChanged()}}
o.prototype.setTabStripItems=function(e){var t=e?e.length:0
if(0!==t){var o=new Array
e.forEach(function(e,t,r){e.index=t
var n=w(e)
e.tabItemSpec=n
o.push(n)})
var r=this._tabLayout
r.setItems(o,this._viewPager)
this.tabStrip.setNativeView(r)
e.forEach(function(e,t,o){var n=r.getTextViewForItemAt(t)
e.setNativeView(n)})}else this._tabLayout.setItems(null,null)}
o.prototype.updateAndroidItemAt=function(e,t){this._tabLayout.updateItemAt(e,t)}
o.prototype.getTabBarBackgroundColor=function(){return this._tabLayout.getBackground()}
o.prototype.setTabBarBackgroundColor=function(e){e instanceof c.Color?this._tabLayout.setBackgroundColor(e.android):this._tabLayout.setBackground(function(e,t){if(e){var o=e.getConstantState()
if(o)return o.newDrawable(t)}return e}(e,this.nativeViewProtected.getResources))}
o.prototype.getTabBarColor=function(){return this._tabLayout.getTabTextColor()}
o.prototype.setTabBarColor=function(e){if(e instanceof c.Color){this._tabLayout.setTabTextColor(e.android)
this._tabLayout.setSelectedTabTextColor(e.android)}else{this._tabLayout.setTabTextColor(e)
this._tabLayout.setSelectedTabTextColor(e)}}
o.prototype.getTabBarHighlightColor=function(){return C(this._context)}
o.prototype.setTabBarHighlightColor=function(e){var t=e instanceof c.Color?e.android:e
this._tabLayout.setSelectedIndicatorColors([t])}
o.prototype.setTabBarItemBackgroundColor=function(e,t){var o=this.tabStrip.items.indexOf(e),r=w(e)
this.updateAndroidItemAt(o,r)}
o.prototype.getTabBarItemColor=function(e){return e.nativeViewProtected.getCurrentTextColor()}
o.prototype.setTabBarItemColor=function(e,t){"number"==typeof t?e.nativeViewProtected.setTextColor(t):e.nativeViewProtected.setTextColor(t.android)}
o.prototype.getTabBarItemFontSize=function(e){return{nativeSize:e.nativeViewProtected.getTextSize()}}
o.prototype.setTabBarItemFontSize=function(e,t){"number"==typeof t?e.nativeViewProtected.setTextSize(t):e.nativeViewProtected.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX,t.nativeSize)}
o.prototype.getTabBarItemFontInternal=function(e){return e.nativeViewProtected.getTypeface()}
o.prototype.setTabBarItemFontInternal=function(e,t){e.nativeViewProtected.setTypeface(t instanceof s.Font?t.getAndroidTypeface():t)}
o.prototype.getTabBarItemTextTransform=function(e){return"default"}
o.prototype.setTabBarItemTextTransform=function(e,t){var o=e.nativeViewProtected
this._defaultTransformationMethod=this._defaultTransformationMethod||o.getTransformationMethod()
if("default"===t){o.setTransformationMethod(this._defaultTransformationMethod)
o.setText(e.title)}else{var r=u.getTransformedText(e.title,t)
o.setText(r)
o.setTransformationMethod(null)}}
o.prototype[i.selectedIndexProperty.setNative]=function(e){this._viewPager.setCurrentItem(e,!0)}
o.prototype[i.itemsProperty.getDefault]=function(){return null}
o.prototype[i.itemsProperty.setNative]=function(e){this.setItems(e)
i.selectedIndexProperty.coerce(this)}
o.prototype[i.tabStripProperty.getDefault]=function(){return null}
o.prototype[i.tabStripProperty.setNative]=function(e){this.setTabStripItems(e.items)}
o.prototype[a.swipeEnabledProperty.getDefault]=function(){return!0}
o.prototype[a.swipeEnabledProperty.setNative]=function(e){this._viewPager.setSwipePageEnabled(e)}
o.prototype[a.offscreenTabLimitProperty.getDefault]=function(){return this._viewPager.getOffscreenPageLimit()}
o.prototype[a.offscreenTabLimitProperty.setNative]=function(e){this._viewPager.setOffscreenPageLimit(e)}
return o}(a.TabsBase)
t.Tabs=S
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tabs/tabs.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/tabs/tabs.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/text-base/text-base-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js"),i=o("../node_modules/tns-core-modules/text/formatted-string.js")
t.FormattedString=i.FormattedString
t.Span=i.Span
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
var a=function(e){__extends(o,e)
function o(){return null!==e&&e.apply(this,arguments)||this}Object.defineProperty(o.prototype,"nativeTextViewProtected",{get:function(){return this.nativeViewProtected},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"fontFamily",{get:function(){return this.style.fontFamily},set:function(e){this.style.fontFamily=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"fontSize",{get:function(){return this.style.fontSize},set:function(e){this.style.fontSize=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"fontStyle",{get:function(){return this.style.fontStyle},set:function(e){this.style.fontStyle=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"fontWeight",{get:function(){return this.style.fontWeight},set:function(e){this.style.fontWeight=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"letterSpacing",{get:function(){return this.style.letterSpacing},set:function(e){this.style.letterSpacing=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"lineHeight",{get:function(){return this.style.lineHeight},set:function(e){this.style.lineHeight=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"textAlignment",{get:function(){return this.style.textAlignment},set:function(e){this.style.textAlignment=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"textDecoration",{get:function(){return this.style.textDecoration},set:function(e){this.style.textDecoration=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"textTransform",{get:function(){return this.style.textTransform},set:function(e){this.style.textTransform=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"whiteSpace",{get:function(){return this.style.whiteSpace},set:function(e){this.style.whiteSpace=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"padding",{get:function(){return this.style.padding},set:function(e){this.style.padding=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"paddingTop",{get:function(){return this.style.paddingTop},set:function(e){this.style.paddingTop=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"paddingRight",{get:function(){return this.style.paddingRight},set:function(e){this.style.paddingRight=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"paddingBottom",{get:function(){return this.style.paddingBottom},set:function(e){this.style.paddingBottom=e},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"paddingLeft",{get:function(){return this.style.paddingLeft},set:function(e){this.style.paddingLeft=e},enumerable:!0,configurable:!0})
o.prototype._onFormattedTextContentsChanged=function(e){this.nativeViewProtected&&this[t.formattedTextProperty.setNative](e.value)}
o.prototype._addChildFromBuilder=function(e,t){if("Span"===e)if(this.formattedText)this.formattedText.spans.push(t)
else{var o=new i.FormattedString
o.spans.push(t)
this.formattedText=o}else"formattedText"!==e&&"FormattedString"!==e||(this.formattedText=t)}
o.prototype._requestLayoutOnTextChanged=function(){this.requestLayout()}
o.prototype.eachChild=function(e){var t=this.formattedText
t&&e(t)}
o.prototype._setNativeText=function(e){void 0===e&&(e=!1)}
return o}(n.View)
t.TextBaseCommon=a
a.prototype._isSingleLine=!1
t.isBold=function(e){return"bold"===e||"700"===e||"800"===e||"900"===e}
t.textProperty=new n.Property({name:"text",defaultValue:"",affectsLayout:n.isAndroid})
t.textProperty.register(a)
t.formattedTextProperty=new n.Property({name:"formattedText",affectsLayout:!0,valueChanged:function(e,t,o){if(t){t.off(n.Observable.propertyChangeEvent,e._onFormattedTextContentsChanged,e)
e._removeView(t)}if(o){var r=o.parent
r&&r._removeView(o)
e._addView(o)
o.on(n.Observable.propertyChangeEvent,e._onFormattedTextContentsChanged,e)}}})
t.formattedTextProperty.register(a)
var s=n.makeParser(n.makeValidator("initial","left","center","right"))
t.textAlignmentProperty=new n.InheritedCssProperty({name:"textAlignment",cssName:"text-align",defaultValue:"initial",valueConverter:s})
t.textAlignmentProperty.register(n.Style)
var u=n.makeParser(n.makeValidator("initial","none","capitalize","uppercase","lowercase"))
t.textTransformProperty=new n.CssProperty({name:"textTransform",cssName:"text-transform",defaultValue:"initial",valueConverter:u})
t.textTransformProperty.register(n.Style)
var l=n.makeParser(n.makeValidator("initial","normal","nowrap"))
t.whiteSpaceProperty=new n.CssProperty({name:"whiteSpace",cssName:"white-space",defaultValue:"initial",affectsLayout:n.isIOS,valueConverter:l})
t.whiteSpaceProperty.register(n.Style)
var c=n.makeParser(n.makeValidator("none","underline","line-through","underline line-through"))
t.textDecorationProperty=new n.CssProperty({name:"textDecoration",cssName:"text-decoration",defaultValue:"none",valueConverter:c})
t.textDecorationProperty.register(n.Style)
t.letterSpacingProperty=new n.CssProperty({name:"letterSpacing",cssName:"letter-spacing",defaultValue:0,affectsLayout:n.isIOS,valueConverter:function(e){return parseFloat(e)}})
t.letterSpacingProperty.register(n.Style)
t.lineHeightProperty=new n.CssProperty({name:"lineHeight",cssName:"line-height",affectsLayout:n.isIOS,valueConverter:function(e){return parseFloat(e)}})
t.lineHeightProperty.register(n.Style)
t.resetSymbol=Symbol("textPropertyDefault")
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/text-base/text-base-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/text-base/text-base-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/text-base/text-base.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/ui/styling/font.js"),a=o("../node_modules/tns-core-modules/ui/styling/style-properties.js"),s=o("../node_modules/tns-core-modules/ui/text-base/text-base-common.js"),u=o("../node_modules/tns-core-modules/utils/types.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/text-base/text-base-common.js"))
var l=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
!function(){if(!n){var e=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.textBase=t
return r.__native(o)}t.prototype.getTransformation=function(e,t){var o=this.textBase.formattedText
if(o)return d(o)
var r=this.textBase.text,n=null==r?"":r.toString()
return c(n,this.textBase.textTransform)}
t.prototype.onFocusChanged=function(e,t,o,r,n){}
t=__decorate([Interfaces([android.text.method.TransformationMethod])],t)
return t}(java.lang.Object)
n=e}}()
var t=this.nativeTextViewProtected
this._defaultTransformationMethod=t.getTransformationMethod()
this._minHeight=t.getMinHeight()
this._maxHeight=t.getMaxHeight()
this._minLines=t.getMinLines()
this._maxLines=t.getMaxLines()}
t.prototype.resetNativeView=function(){e.prototype.resetNativeView.call(this)
var t=this.nativeTextViewProtected
t.setSingleLine(this._isSingleLine)
t.setTransformationMethod(this._defaultTransformationMethod)
this._defaultTransformationMethod=null
if(void 0!==this._paintFlags){t.setPaintFlags(this._paintFlags)
this._paintFlags=void 0}-1!==this._minLines?t.setMinLines(this._minLines):t.setMinHeight(this._minHeight)
this._minHeight=this._minLines=void 0;-1!==this._maxLines?t.setMaxLines(this._maxLines):t.setMaxHeight(this._maxHeight)
this._maxHeight=this._maxLines=void 0}
t.prototype[s.textProperty.getDefault]=function(){return s.resetSymbol}
t.prototype[s.textProperty.setNative]=function(e){var t=e===s.resetSymbol
!t&&this.formattedText||this._setNativeText(t)}
t.prototype[s.formattedTextProperty.setNative]=function(e){var t=this.nativeTextViewProtected
e||t instanceof android.widget.Button&&t.getTransformationMethod()instanceof n&&t.setTransformationMethod(this._defaultTransformationMethod)
if(!this.secure){var o=d(e)
t.setText(o)
s.textProperty.nativeValueChange(this,null==e?"":e.toString())
o&&t instanceof android.widget.Button&&!(t.getTransformationMethod()instanceof n)&&t.setTransformationMethod(new n(this))}}
t.prototype[s.textTransformProperty.setNative]=function(e){"initial"!==e?this.secure||this.nativeTextViewProtected.setTransformationMethod(new n(this)):this.nativeTextViewProtected.setTransformationMethod(this._defaultTransformationMethod)}
t.prototype[s.textAlignmentProperty.getDefault]=function(){return"initial"}
t.prototype[s.textAlignmentProperty.setNative]=function(e){var t=this.nativeTextViewProtected.getGravity()&android.view.Gravity.VERTICAL_GRAVITY_MASK
switch(e){case"initial":case"left":this.nativeTextViewProtected.setGravity(android.view.Gravity.START|t)
break
case"center":this.nativeTextViewProtected.setGravity(android.view.Gravity.CENTER_HORIZONTAL|t)
break
case"right":this.nativeTextViewProtected.setGravity(android.view.Gravity.END|t)}}
t.prototype[s.whiteSpaceProperty.setNative]=function(e){var t=this.nativeTextViewProtected
switch(e){case"initial":case"normal":t.setSingleLine(!1)
t.setEllipsize(null)
break
case"nowrap":t.setSingleLine(!0)
t.setEllipsize(android.text.TextUtils.TruncateAt.END)}}
t.prototype[s.colorProperty.getDefault]=function(){return this.nativeTextViewProtected.getTextColors()}
t.prototype[s.colorProperty.setNative]=function(e){this.formattedText&&e instanceof s.Color||(e instanceof s.Color?this.nativeTextViewProtected.setTextColor(e.android):this.nativeTextViewProtected.setTextColor(e))}
t.prototype[s.fontSizeProperty.getDefault]=function(){return{nativeSize:this.nativeTextViewProtected.getTextSize()}}
t.prototype[s.fontSizeProperty.setNative]=function(e){this.formattedText&&"number"==typeof e||("number"==typeof e?this.nativeTextViewProtected.setTextSize(e):this.nativeTextViewProtected.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX,e.nativeSize))}
t.prototype[s.lineHeightProperty.getDefault]=function(){return this.nativeTextViewProtected.getLineSpacingExtra()/s.layout.getDisplayDensity()}
t.prototype[s.lineHeightProperty.setNative]=function(e){this.nativeTextViewProtected.setLineSpacing(e*s.layout.getDisplayDensity(),1)}
t.prototype[s.fontInternalProperty.getDefault]=function(){return this.nativeTextViewProtected.getTypeface()}
t.prototype[s.fontInternalProperty.setNative]=function(e){this.formattedText&&e instanceof i.Font||this.nativeTextViewProtected.setTypeface(e instanceof i.Font?e.getAndroidTypeface():e)}
t.prototype[s.textDecorationProperty.getDefault]=function(e){return this._paintFlags=this.nativeTextViewProtected.getPaintFlags()}
t.prototype[s.textDecorationProperty.setNative]=function(e){switch(e){case"none":this.nativeTextViewProtected.setPaintFlags(0)
break
case"underline":this.nativeTextViewProtected.setPaintFlags(android.graphics.Paint.UNDERLINE_TEXT_FLAG)
break
case"line-through":this.nativeTextViewProtected.setPaintFlags(android.graphics.Paint.STRIKE_THRU_TEXT_FLAG)
break
case"underline line-through":this.nativeTextViewProtected.setPaintFlags(android.graphics.Paint.UNDERLINE_TEXT_FLAG|android.graphics.Paint.STRIKE_THRU_TEXT_FLAG)
break
default:this.nativeTextViewProtected.setPaintFlags(e)}}
t.prototype[s.letterSpacingProperty.getDefault]=function(){return org.nativescript.widgets.ViewHelper.getLetterspacing(this.nativeTextViewProtected)}
t.prototype[s.letterSpacingProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setLetterspacing(this.nativeTextViewProtected,e)}
t.prototype[s.paddingTopProperty.getDefault]=function(){return{value:this._defaultPaddingTop,unit:"px"}}
t.prototype[s.paddingTopProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setPaddingTop(this.nativeTextViewProtected,s.Length.toDevicePixels(e,0)+s.Length.toDevicePixels(this.style.borderTopWidth,0))}
t.prototype[s.paddingRightProperty.getDefault]=function(){return{value:this._defaultPaddingRight,unit:"px"}}
t.prototype[s.paddingRightProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setPaddingRight(this.nativeTextViewProtected,s.Length.toDevicePixels(e,0)+s.Length.toDevicePixels(this.style.borderRightWidth,0))}
t.prototype[s.paddingBottomProperty.getDefault]=function(){return{value:this._defaultPaddingBottom,unit:"px"}}
t.prototype[s.paddingBottomProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setPaddingBottom(this.nativeTextViewProtected,s.Length.toDevicePixels(e,0)+s.Length.toDevicePixels(this.style.borderBottomWidth,0))}
t.prototype[s.paddingLeftProperty.getDefault]=function(){return{value:this._defaultPaddingLeft,unit:"px"}}
t.prototype[s.paddingLeftProperty.setNative]=function(e){org.nativescript.widgets.ViewHelper.setPaddingLeft(this.nativeTextViewProtected,s.Length.toDevicePixels(e,0)+s.Length.toDevicePixels(this.style.borderLeftWidth,0))}
t.prototype._setNativeText=function(e){void 0===e&&(e=!1)
if(e)this.nativeTextViewProtected.setText(null)
else{var t
if(this.formattedText)t=d(this.formattedText)
else{var o=this.text,r=null==o?"":o.toString()
t=c(r,this.textTransform)}this.nativeTextViewProtected.setText(t)}}
return t}(s.TextBaseCommon)
t.TextBase=l
function c(e,t){if(!e||!u.isString(e))return""
switch(t){case"uppercase":return e.toUpperCase()
case"lowercase":return e.toLowerCase()
case"capitalize":return function(e){for(var t=e.split(" "),o=[],r=0,n=t.length;r<n;r++){var i=t[r].toLowerCase()
o.push(i.substr(0,1).toUpperCase()+i.substring(1))}return o.join(" ")}(e)
case"none":default:return e}}t.getTransformedText=c
function d(e){if(!e||!e.parent)return null
for(var t=new android.text.SpannableStringBuilder,o=0,r=0,n=0,i=e.spans.length;o<i;o++){var a=e.spans.getItem(o),s=a.text,u=e.parent.textTransform,l=null==s?"":s.toString()
u&&"none"!==u&&(l=c(l,u))
n=l.length
if(n>0){t.insert(r,l)
p(t,a,r,r+n)
r+=n}}return t}function p(e,t,o,r){var n=t.style,u=s.isBold(n.fontWeight),l="italic"===n.fontStyle
u&&l?e.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD_ITALIC),o,r,android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE):u?e.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD),o,r,android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE):l&&e.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.ITALIC),o,r,android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
var c=t.fontFamily
if(c){var d=new i.Font(c,0,l?"italic":"normal",u?"bold":"normal"),p=d.getAndroidTypeface()||android.graphics.Typeface.create(c,0),f=new org.nativescript.widgets.CustomTypefaceSpan(c,p)
e.setSpan(f,o,r,android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)}var h=t.fontSize
h&&e.setSpan(new android.text.style.AbsoluteSizeSpan(h*s.layout.getDisplayDensity()),o,r,android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
var m,y,g=t.color
g&&e.setSpan(new android.text.style.ForegroundColorSpan(g.android),o,r,android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
a.backgroundColorProperty.isSet(n)?m=n.backgroundColor:a.backgroundColorProperty.isSet(t.parent.style)?m=t.parent.style.backgroundColor:a.backgroundColorProperty.isSet(t.parent.parent.style)&&(m=t.parent.parent.style.backgroundColor)
m&&e.setSpan(new android.text.style.BackgroundColorSpan(m.android),o,r,android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
s.textDecorationProperty.isSet(n)?y=n:s.textDecorationProperty.isSet(t.parent.style)?y=t.parent.style:s.textDecorationProperty.isSet(t.parent.parent.style)&&(y=t.parent.parent.style)
if(y){var v=y.textDecoration,b=-1!==v.indexOf("underline")
b&&e.setSpan(new android.text.style.UnderlineSpan,o,r,android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
var _=-1!==v.indexOf("line-through")
_&&e.setSpan(new android.text.style.StrikethroughSpan,o,r,android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)}}if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/text-base/text-base.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/text-base/text-base.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/text-field/text-field-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.returnPressEvent="returnPress"
t=__decorate([n.CSSType("TextField")],t)
return t}(n.EditableTextBase)
t.TextFieldBase=i
i.prototype.recycleNativeView="auto"
t.secureProperty=new n.Property({name:"secure",defaultValue:!1,valueConverter:n.booleanConverter})
t.secureProperty.register(i)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/text-field/text-field-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/text-field/text-field-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/text-field/text-field.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/text-field/text-field-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/text-field/text-field-common.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype._configureEditText=function(e){e.setInputType(android.text.InputType.TYPE_CLASS_TEXT|android.text.InputType.TYPE_TEXT_VARIATION_NORMAL|android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES|android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS)
e.setLines(1)
e.setMaxLines(1)
e.setHorizontallyScrolling(!0)}
t.prototype._onReturnPress=function(){this.notify({eventName:t.returnPressEvent,object:this})}
t.prototype[n.secureProperty.setNative]=function(){this.setSecureAndKeyboardType()}
t.prototype[n.keyboardTypeProperty.setNative]=function(){this.setSecureAndKeyboardType()}
t.prototype.setSecureAndKeyboardType=function(){var e
if(this.secure)e="number"===this.keyboardType?android.text.InputType.TYPE_CLASS_NUMBER|android.text.InputType.TYPE_NUMBER_VARIATION_PASSWORD:android.text.InputType.TYPE_CLASS_TEXT|android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD
else{e=android.text.InputType.TYPE_CLASS_TEXT|android.text.InputType.TYPE_TEXT_VARIATION_NORMAL
if(this.autocorrect){e|=android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE
e|=android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT
e&=~android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS}switch(this.autocapitalizationType){case"words":e|=android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS
break
case"sentences":e|=android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES
break
case"allcharacters":e|=android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS}switch(this.keyboardType){case"datetime":e=android.text.InputType.TYPE_CLASS_DATETIME|android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL
break
case"phone":e=android.text.InputType.TYPE_CLASS_PHONE
break
case"number":e=android.text.InputType.TYPE_CLASS_NUMBER|android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL|android.text.InputType.TYPE_NUMBER_FLAG_SIGNED|android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL
break
case"url":e=android.text.InputType.TYPE_CLASS_TEXT|android.text.InputType.TYPE_TEXT_VARIATION_URI
break
case"email":e=android.text.InputType.TYPE_CLASS_TEXT|android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS}}this._setInputType(e)}
t.prototype[n.whiteSpaceProperty.getDefault]=function(){return"nowrap"}
t.prototype[n.whiteSpaceProperty.setNative]=function(e){}
return t}(n.TextFieldBase)
t.TextField=i
i.prototype._isSingleLine=!0
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/text-field/text-field.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/text-field/text-field.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/text-view/text-view.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/text-base/text-base.js"))
var i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype._configureEditText=function(e){e.setInputType(android.text.InputType.TYPE_CLASS_TEXT|android.text.InputType.TYPE_TEXT_VARIATION_NORMAL|android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES|android.text.InputType.TYPE_TEXT_FLAG_MULTI_LINE|android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS)
e.setGravity(android.view.Gravity.TOP|android.view.Gravity.START)}
t.prototype.resetNativeView=function(){e.prototype.resetNativeView.call(this)
this.nativeTextViewProtected.setGravity(android.view.Gravity.TOP|android.view.Gravity.START)}
t=__decorate([n.CSSType("TextView")],t)
return t}(n.EditableTextBase)
t.TextView=i
i.prototype.recycleNativeView="auto"
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/text-view/text-view.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/text-view/text-view.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/time-picker/time-picker-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
t.getValidTime=function(e,t,o){if(e.minuteInterval>1){var r=o-o%e.minuteInterval
o=r+(o===r+1?e.minuteInterval:0)
if(60===o){t++
o=0}}var n={hour:t,minute:o}
d(e,t,o)||(n={hour:e.maxHour,minute:e.maxMinute})
c(e,t,o)||(n={hour:e.minHour,minute:e.minMinute})
return n}
function i(e){return c(e)&&d(e)}function a(e){return"number"==typeof e&&e>=0&&e<=23}function s(e){return"number"==typeof e&&e>=0&&e<=59}function u(e){return 60*e}function l(e){return void 0!==e}t.isDefined=l
function c(e,t,o){return void 0===e.minHour||void 0===e.minMinute||u(void 0!==t?t:e.hour)+(void 0!==o?o:e.minute)>=u(e.minHour)+e.minMinute}function d(e,t,o){return!l(e.maxHour)||!l(e.maxMinute)||u(l(t)?t:e.hour)+(l(o)?o:e.minute)<=u(e.maxHour)+e.maxMinute}function p(e){return e instanceof Date?e+"":e<10?"0"+e:""+e}function f(e,t,o){return t+" property value ("+p(o)+":"+p(e.minute)+") is not valid. "+function(e){return"Min time: ("+p(e.minHour)+":"+p(e.minMinute)+"), max time: ("+p(e.maxHour)+":"+p(e.maxMinute)+")"}(e)+"."}var h=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t=__decorate([n.CSSType("TimePicker")],t)
return t}(n.View)
t.TimePickerBase=h
h.prototype.recycleNativeView="auto"
t.minHourProperty=new n.Property({name:"minHour",defaultValue:0,valueChanged:function(e,t,o){if(!a(o)||!i(e))throw new Error(f(e,"minHour",o))},valueConverter:function(e){return parseInt(e)}})
t.minHourProperty.register(h)
t.maxHourProperty=new n.Property({name:"maxHour",defaultValue:23,valueChanged:function(e,t,o){if(!a(o)||!i(e))throw new Error(f(e,"maxHour",o))},valueConverter:function(e){return parseInt(e)}})
t.maxHourProperty.register(h)
t.minMinuteProperty=new n.Property({name:"minMinute",defaultValue:0,valueChanged:function(e,t,o){if(!s(o)||!i(e))throw new Error(f(e,"minMinute",o))},valueConverter:function(e){return parseInt(e)}})
t.minMinuteProperty.register(h)
t.maxMinuteProperty=new n.Property({name:"maxMinute",defaultValue:59,valueChanged:function(e,t,o){if(!s(o)||!i(e))throw new Error(f(e,"maxMinute",o))},valueConverter:function(e){return parseInt(e)}})
t.maxMinuteProperty.register(h)
t.minuteIntervalProperty=new n.Property({name:"minuteInterval",defaultValue:1,valueChanged:function(e,t,o){if(!(r=o,"number"==typeof r&&r>=1&&r<=30&&60%r==0))throw new Error(f(e,"minuteInterval",o))
var r},valueConverter:function(e){return parseInt(e)}})
t.minuteIntervalProperty.register(h)
t.minuteProperty=new n.Property({name:"minute",defaultValue:0,valueChanged:function(e,t,o){if(!s(o)||!i(e))throw new Error(f(e,"minute",o))
e.time=new Date(0,0,0,e.hour,e.minute)},valueConverter:function(e){return parseInt(e)}})
t.minuteProperty.register(h)
t.hourProperty=new n.Property({name:"hour",defaultValue:0,valueChanged:function(e,t,o){if(!a(o)||!i(e))throw new Error(f(e,"Hour",o))
e.time=new Date(0,0,0,e.hour,e.minute)},valueConverter:function(e){return parseInt(e)}})
t.hourProperty.register(h)
t.timeProperty=new n.Property({name:"time",defaultValue:new Date,equalityComparer:function(e,t){return e<=t&&e>=t},valueChanged:function(e,t,o){if(!i(e))throw new Error(f(e,"time",o))
e.hour=o.getHours()
e.minute=o.getMinutes()}})
t.timeProperty.register(h)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/time-picker/time-picker-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/time-picker/time-picker-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/time-picker/time-picker.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i,a=o("../node_modules/tns-core-modules/ui/time-picker/time-picker-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/time-picker/time-picker-common.js"))
var s=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){return new android.widget.TimePicker(this._context)}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
var t=this.nativeViewProtected
!function(){if(!n){i=android.os.Build.VERSION.SDK_INT
var e=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}t.prototype.onTimeChanged=function(e,t,o){var r=this.owner
if(!r.updatingNativeValue){var n=a.getValidTime(r,t,o)
a.timeProperty.nativeValueChange(r,new Date(0,0,0,n.hour,n.minute))}}
t=__decorate([Interfaces([android.widget.TimePicker.OnTimeChangedListener])],t)
return t}(java.lang.Object)
n=e}}()
var o=new n(this)
t.setOnTimeChangedListener(o)
t.listener=o
var s=t.calendar=java.util.Calendar.getInstance(),u=a.hourProperty.isSet(this)?this.hour:s.get(java.util.Calendar.HOUR_OF_DAY),l=a.minuteProperty.isSet(this)?this.minute:s.get(java.util.Calendar.MINUTE),c=a.getValidTime(this,u,l)
a.timeProperty.isSet(this)||(this.time=new Date(0,0,0,c.hour,c.minute))}
t.prototype[a.minuteProperty.setNative]=function(e){this.updatingNativeValue=!0
try{i>=23?this.nativeViewProtected.setMinute(e):this.nativeViewProtected.setCurrentMinute(new java.lang.Integer(e))}finally{this.updatingNativeValue=!1}}
t.prototype[a.hourProperty.setNative]=function(e){this.updatingNativeValue=!0
try{i>=23?this.nativeViewProtected.setHour(e):this.nativeViewProtected.setCurrentHour(new java.lang.Integer(e))}finally{this.updatingNativeValue=!1}}
return t}(a.TimePickerBase)
t.TimePicker=s
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/time-picker/time-picker.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/time-picker/time-picker.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/transition/fade-transition.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/transition/transition.js"),i=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createAndroidAnimator=function(e){var t=Array.create("float",2)
switch(e){case n.AndroidTransitionType.enter:case n.AndroidTransitionType.popEnter:t[0]=0
t[1]=1
break
case n.AndroidTransitionType.exit:case n.AndroidTransitionType.popExit:t[0]=1
t[1]=0}var o=android.animation.ObjectAnimator.ofFloat(null,"alpha",t),r=this.getDuration()
void 0!==r&&o.setDuration(r)
o.setInterpolator(this.getCurve())
return o}
return t}(n.Transition)
t.FadeTransition=i
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/transition/fade-transition.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/transition/fade-transition.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/transition/flip-transition.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/transition/transition.js"),i=function(e){__extends(t,e)
function t(t,o,r){var n=e.call(this,o,r)||this
n._direction=t
return n}t.prototype.createAndroidAnimator=function(e){var t,o,r,i=new android.animation.AnimatorSet,a=this.getDuration()||300,s=this.getCurve(),u="right"===this._direction?180:-180
switch(e){case n.AndroidTransitionType.enter:t=Array.create(android.animation.Animator,3)
o=Array.create("float",2)
o[0]=1
o[1]=0
r=android.animation.ObjectAnimator.ofFloat(null,"alpha",o)
r.setDuration(0)
t[0]=r
o=Array.create("float",2)
o[0]=u
o[1]=0
r=android.animation.ObjectAnimator.ofFloat(null,"rotationY",o)
r.setInterpolator(s)
r.setDuration(a)
t[1]=r
o=Array.create("float",2)
o[0]=0
o[1]=1
r=android.animation.ObjectAnimator.ofFloat(null,"alpha",o)
r.setStartDelay(a/2)
r.setDuration(1)
t[2]=r
break
case n.AndroidTransitionType.exit:t=Array.create(android.animation.Animator,2)
o=Array.create("float",2)
o[0]=0
o[1]=-u
r=android.animation.ObjectAnimator.ofFloat(null,"rotationY",o)
r.setInterpolator(s)
r.setDuration(a)
t[0]=r
o=Array.create("float",2)
o[0]=1
o[1]=0
r=android.animation.ObjectAnimator.ofFloat(null,"alpha",o)
r.setStartDelay(a/2)
r.setDuration(1)
t[1]=r
break
case n.AndroidTransitionType.popEnter:t=Array.create(android.animation.Animator,3)
o=Array.create("float",2)
o[0]=1
o[1]=0
r=android.animation.ObjectAnimator.ofFloat(null,"alpha",o)
r.setDuration(0)
t[0]=r
o=Array.create("float",2)
o[0]=-u
o[1]=0
r=android.animation.ObjectAnimator.ofFloat(null,"rotationY",o)
r.setInterpolator(s)
r.setDuration(a)
t[1]=r
o=Array.create("float",2)
o[0]=0
o[1]=1
r=android.animation.ObjectAnimator.ofFloat(null,"alpha",o)
r.setStartDelay(a/2)
r.setDuration(1)
t[2]=r
break
case n.AndroidTransitionType.popExit:t=Array.create(android.animation.Animator,2)
o=Array.create("float",2)
o[0]=0
o[1]=u
r=android.animation.ObjectAnimator.ofFloat(null,"rotationY",o)
r.setInterpolator(s)
r.setDuration(a)
t[0]=r
o=Array.create("float",2)
o[0]=1
o[1]=0
r=android.animation.ObjectAnimator.ofFloat(null,"alpha",o)
r.setStartDelay(a/2)
r.setDuration(1)
t[1]=r}i.playTogether(t)
return i}
return t}(n.Transition)
t.FlipTransition=i
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/transition/flip-transition.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/transition/flip-transition.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/transition/slide-transition.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/transition/transition.js"),i=o("../node_modules/tns-core-modules/platform/platform.js"),a=o("../node_modules/tns-core-modules/utils/lazy.js"),s=a.default(function(){return i.screen.mainScreen.widthPixels}),u=a.default(function(){return i.screen.mainScreen.heightPixels}),l=function(e){__extends(t,e)
function t(t,o,r){var n=e.call(this,o,r)||this
n._direction=t
return n}t.prototype.createAndroidAnimator=function(e){var t,o=Array.create("float",2)
switch(this._direction){case"left":switch(e){case n.AndroidTransitionType.enter:o[0]=s()
o[1]=0
break
case n.AndroidTransitionType.exit:o[0]=0
o[1]=-s()
break
case n.AndroidTransitionType.popEnter:o[0]=-s()
o[1]=0
break
case n.AndroidTransitionType.popExit:o[0]=0
o[1]=s()}break
case"right":switch(e){case n.AndroidTransitionType.enter:o[0]=-s()
o[1]=0
break
case n.AndroidTransitionType.exit:o[0]=0
o[1]=s()
break
case n.AndroidTransitionType.popEnter:o[0]=s()
o[1]=0
break
case n.AndroidTransitionType.popExit:o[0]=0
o[1]=-s()}break
case"top":switch(e){case n.AndroidTransitionType.enter:o[0]=u()
o[1]=0
break
case n.AndroidTransitionType.exit:o[0]=0
o[1]=-u()
break
case n.AndroidTransitionType.popEnter:o[0]=-u()
o[1]=0
break
case n.AndroidTransitionType.popExit:o[0]=0
o[1]=u()}break
case"bottom":switch(e){case n.AndroidTransitionType.enter:o[0]=-u()
o[1]=0
break
case n.AndroidTransitionType.exit:o[0]=0
o[1]=u()
break
case n.AndroidTransitionType.popEnter:o[0]=u()
o[1]=0
break
case n.AndroidTransitionType.popExit:o[0]=0
o[1]=-u()}}t="left"===this._direction||"right"===this._direction?"translationX":"translationY"
var r=android.animation.ObjectAnimator.ofFloat(null,t,o),i=this.getDuration()
void 0!==i&&r.setDuration(i)
r.setInterpolator(this.getCurve())
return r}
t.prototype.toString=function(){return e.prototype.toString.call(this)+" "+this._direction}
return t}(n.Transition)
t.SlideTransition=l
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/transition/slide-transition.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/transition/slide-transition.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/transition/transition.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/animation/animation.js"),i=o("../node_modules/tns-core-modules/utils/lazy.js"),a=i.default(function(){return new android.view.animation.AccelerateDecelerateInterpolator})
!function(e){e.enter="enter"
e.exit="exit"
e.popEnter="popEnter"
e.popExit="popExit"}(t.AndroidTransitionType||(t.AndroidTransitionType={}))
var s=0,u=function(){function e(e,t){this._duration=e
this._interpolator=t?n._resolveAnimationCurve(t):a()
this._id=s++}e.prototype.getDuration=function(){return this._duration}
e.prototype.getCurve=function(){return this._interpolator}
e.prototype.animateIOSTransition=function(e,t,o,r,n){throw new Error("Abstract method call")}
e.prototype.createAndroidAnimator=function(e){throw new Error("Abstract method call")}
e.prototype.toString=function(){return"Transition@"+this._id}
return e}()
t.Transition=u
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/transition/transition.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/transition/transition.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/web-view/web-view-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/ui/core/view/view.js"),i=o("../node_modules/tns-core-modules/file-system/file-system.js")
t.File=i.File
t.knownFolders=i.knownFolders
t.path=i.path
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/core/view/view.js"))
t.srcProperty=new n.Property({name:"src"})
var a=function(e){__extends(o,e)
function o(){return null!==e&&e.apply(this,arguments)||this}r=o
o.prototype._onLoadFinished=function(e,t){var o={eventName:r.loadFinishedEvent,object:this,url:e,navigationType:void 0,error:t}
this.notify(o)}
o.prototype._onLoadStarted=function(e,t){var o={eventName:r.loadStartedEvent,object:this,url:e,navigationType:t,error:void 0}
this.notify(o)}
Object.defineProperty(o.prototype,"canGoBack",{get:function(){throw new Error("This member is abstract.")},enumerable:!0,configurable:!0})
Object.defineProperty(o.prototype,"canGoForward",{get:function(){throw new Error("This member is abstract.")},enumerable:!0,configurable:!0})
o.prototype[t.srcProperty.getDefault]=function(){return""}
o.prototype[t.srcProperty.setNative]=function(e){this.stopLoading()
0===e.indexOf("~/")?e="file:///"+i.knownFolders.currentApp().path+"/"+e.substr(2):0===e.indexOf("/")&&(e="file://"+e)
0===e.toLowerCase().indexOf("file:///")&&(e=encodeURI(e))
0===e.toLowerCase().indexOf("http://")||0===e.toLowerCase().indexOf("https://")||0===e.toLowerCase().indexOf("file:///")?this._loadUrl(e):this._loadData(e)}
var r
o.loadStartedEvent="loadStarted"
o.loadFinishedEvent="loadFinished"
o=r=__decorate([n.CSSType("WebView")],o)
return o}(n.ContainerView)
t.WebViewBase=a
t.srcProperty.register(a)
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/web-view/web-view-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/web-view/web-view-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/ui/web-view/web-view.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/ui/web-view/web-view-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/ui/web-view/web-view-common.js"))
var a=function(e){__extends(t,e)
function t(){return null!==e&&e.apply(this,arguments)||this}t.prototype.createNativeView=function(){var e=new android.webkit.WebView(this._context)
e.getSettings().setJavaScriptEnabled(!0)
e.getSettings().setBuiltInZoomControls(!0)
return e}
t.prototype.initNativeView=function(){e.prototype.initNativeView.call(this)
!function(){if(!n){var e=function(e){__extends(t,e)
function t(t){var o=e.call(this)||this
o.owner=t
return r.__native(o)}t.prototype.shouldOverrideUrlLoading=function(e,t){i.traceEnabled()&&i.traceWrite("WebViewClientClass.shouldOverrideUrlLoading("+t+")",i.traceCategories.Debug)
return!1}
t.prototype.onPageStarted=function(t,o,r){e.prototype.onPageStarted.call(this,t,o,r)
var n=this.owner
if(n){i.traceEnabled()&&i.traceWrite("WebViewClientClass.onPageStarted("+o+", "+r+")",i.traceCategories.Debug)
n._onLoadStarted(o,void 0)}}
t.prototype.onPageFinished=function(t,o){e.prototype.onPageFinished.call(this,t,o)
var r=this.owner
if(r){i.traceEnabled()&&i.traceWrite("WebViewClientClass.onPageFinished("+o+")",i.traceCategories.Debug)
r._onLoadFinished(o,void 0)}}
t.prototype.onReceivedError=function(){var t=arguments[0]
if(4===arguments.length){var o=arguments[1],r=arguments[2],n=arguments[3]
e.prototype.onReceivedError.call(this,t,o,r,n)
var a=this.owner
if(a){i.traceEnabled()&&i.traceWrite("WebViewClientClass.onReceivedError("+o+", "+r+", "+n+")",i.traceCategories.Debug)
a._onLoadFinished(n,r+"("+o+")")}}else{var s=arguments[1],u=arguments[2]
e.prototype.onReceivedError.call(this,t,s,u)
a=this.owner
if(a){i.traceEnabled()&&i.traceWrite("WebViewClientClass.onReceivedError("+u.getErrorCode()+", "+u.getDescription()+", "+(u.getUrl&&u.getUrl())+")",i.traceCategories.Debug)
a._onLoadFinished(u.getUrl&&u.getUrl(),u.getDescription()+"("+u.getErrorCode()+")")}}}
return t}(android.webkit.WebViewClient)
n=e}}()
var t=this.nativeViewProtected,o=new n(this)
t.setWebViewClient(o)
t.client=o}
t.prototype.disposeNativeView=function(){var t=this.nativeViewProtected
t&&t.destroy()
t.client.owner=null
e.prototype.disposeNativeView.call(this)}
t.prototype._loadUrl=function(e){var t=this.nativeViewProtected
t&&t.loadUrl(e)}
t.prototype._loadData=function(e){var t=this.nativeViewProtected
if(t){var o="file:///"+i.knownFolders.currentApp().path+"/"
t.loadDataWithBaseURL(o,e,"text/html","utf-8",null)}}
Object.defineProperty(t.prototype,"canGoBack",{get:function(){return this.nativeViewProtected.canGoBack()},enumerable:!0,configurable:!0})
t.prototype.stopLoading=function(){var e=this.nativeViewProtected
e&&e.stopLoading()}
Object.defineProperty(t.prototype,"canGoForward",{get:function(){var e=this.nativeViewProtected
return!!e&&e.canGoForward()},enumerable:!0,configurable:!0})
t.prototype.goBack=function(){var e=this.nativeViewProtected
if(e)return e.goBack()}
t.prototype.goForward=function(){var e=this.nativeViewProtected
if(e)return e.goForward()}
t.prototype.reload=function(){var e=this.nativeViewProtected
if(e)return e.reload()}
return t}(i.WebViewBase)
t.WebView=a
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/web-view/web-view.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/ui/web-view/web-view.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/utils/debug.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/file-system/file-system.js"),a=o("../node_modules/tns-core-modules/platform/platform.js")
t.debug=!0
var s=function(){function e(e,t,o){!function(){if(!n){n=i.knownFolders.currentApp().path
n=n.substr(0,n.length-"app/".length)}}()
e.length>n.length&&e.substr(0,n.length)===n?this._uri="file://"+e.substr(n.length):this._uri=e
this._line=t
this._column=o}Object.defineProperty(e.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"line",{get:function(){return this._line},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"column",{get:function(){return this._column},enumerable:!0,configurable:!0})
e.prototype.toString=function(){return this._uri+":"+this._line+":"+this._column}
e.get=function(t){return t[e._source]}
e.set=function(t,o){t[e._source]=o}
e._source=Symbol("source")
return e}()
t.Source=s
var u=function(e){__extends(t,e)
function t(t,o){var r,n=this
r=o&&t.message?o+"\n > "+t.message.replace("\n","\n  "):o||t.message||void 0
n=e.call(this,r)||this
n.stack=a.isAndroid?"Error: "+n.message+"\n"+t.stack.substr(t.stack.indexOf("\n")+1):t.stack
n.message=r
return n}return t}(Error)
t.ScopeError=u
var l=function(e){__extends(t,e)
function t(t,o,r){return e.call(this,t,r?r+" @"+o:o+"")||this}return t}(u)
t.SourceError=l
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/utils/debug.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/utils/debug.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/utils/lazy.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
t.default=function(e){var t
return function(){return t||(t=e())}}
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/utils/lazy.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/utils/lazy.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/utils/mainthread-helper.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
t.dispatchToMainThread=function(e){new android.os.Handler(android.os.Looper.getMainLooper()).post(new java.lang.Runnable({run:e}))}
t.isMainThread=function(){return android.os.Looper.myLooper()===android.os.Looper.getMainLooper()}
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/utils/mainthread-helper.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/utils/mainthread-helper.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/utils/number-utils.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
var r=1e-5
function n(e,t){return Math.abs(e-t)<r}t.areClose=n
t.greaterThanOrClose=function(e,t){return e>t||n(e,t)}
t.greaterThan=function(e,t){return e>t&&!n(e,t)}
t.lessThan=function(e,t){return e<t&&!n(e,t)}
t.isZero=function(e){return Math.abs(e)<r}
t.greaterThanZero=function(e){return e>0}
t.notNegative=function(e){return e>=0}
t.radiansToDegrees=function(e){return e*(180/Math.PI)}
t.degreesToRadians=function(e){return e*(Math.PI/180)}
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/utils/number-utils.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/utils/number-utils.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/utils/types.js":function(e,t,o){(function(o){Object.defineProperty(t,"__esModule",{value:!0})
t.isString=function(e){return"string"==typeof e||e instanceof String}
t.isNumber=function(e){return"number"==typeof e||e instanceof Number}
t.isBoolean=function(e){return"boolean"==typeof e||e instanceof Boolean}
function r(e){return!!e&&"function"==typeof e}t.isFunction=r
t.isObject=function(e){return!!e&&"object"==typeof e}
function n(e){return void 0===e}t.isUndefined=n
t.isDefined=function(e){return void 0!==e}
function i(e){return null==e}t.isNullOrUndefined=i
t.verifyCallback=function(e){if(e&&!r(e))throw new TypeError("Callback must be a valid function.")}
var a=new Map,s=/function ([_a-zA-Z0-9]{1,})\(/
t.getClass=function(e){return u(e).name}
function u(e){var t=e.constructor,o=a.get(t)
if(!o){o=new l(t)
a.set(t,o)}return o}t.getClassInfo=u
t.getBaseClasses=function(e){for(var t=[],o=u(e);o;){t.push(o.name)
o=o.baseClassInfo}return t}
var l=function(){function e(e){this._typeCosntructor=e}Object.defineProperty(e.prototype,"name",{get:function(){if(!this._name){var e=s.exec(this._typeCosntructor.toString())
this._name=e&&e.length>1?e[1]:""}return this._name},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"baseClassInfo",{get:function(){if(n(this._baseClassInfo)){this._baseClassInfo=e._getBase(this)
this._baseClassInfo&&this._baseClassInfo.name===this.name&&(this._baseClassInfo=e._getBase(this._baseClassInfo))}return this._baseClassInfo},enumerable:!0,configurable:!0})
e._getBase=function(e){var t=null,o=e._typeCosntructor.prototype
o.__proto__&&(t=u(o.__proto__))
return t}
return e}()
t.ClassInfo=l
t.toUIString=function(e){return i(e)?"":e+""}
if(o._isModuleLoadedForUI&&o._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/utils/types.js")){e.hot.accept()
e.hot.dispose(()=>{o.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/utils/types.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/utils/utils-common.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/utils/types.js"),i=o("../node_modules/tns-core-modules/utils/mainthread-helper.js"),a=o("../node_modules/tns-core-modules/ui/builder/module-name-sanitizer.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/utils/mainthread-helper.js"))
t.RESOURCE_PREFIX="res://"
t.FILE_PREFIX="file:///"
t.escapeRegexSymbols=function(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}
t.convertString=function(e){var t
if(n.isString(e)&&""!==e.trim()){var o=+e
t=isNaN(o)?!e||"true"!==e.toLowerCase()&&"false"!==e.toLowerCase()?e:"true"===e.toLowerCase():o}else t=e
return t}
t.getModuleName=function(e){var t=e.replace("./","")
return a.sanitizeModuleName(t)}
!function(e){var t=3<<30
e.UNSPECIFIED=0
e.EXACTLY=1<<30
e.AT_MOST=2<<30
e.MEASURED_HEIGHT_STATE_SHIFT=16
e.MEASURED_STATE_TOO_SMALL=16777216
e.MEASURED_STATE_MASK=4278190080
e.MEASURED_SIZE_MASK=16777215
e.getMode=function(t){switch(t){case e.EXACTLY:return"Exact"
case e.AT_MOST:return"AtMost"
default:return"Unspecified"}}
function o(e){return e&t}e.getMeasureSpecMode=o
function r(e){return e&~t}e.getMeasureSpecSize=r
e.measureSpecToString=function(t){var n=o(t),i=r(t),a="MeasureSpec: "
n===e.UNSPECIFIED?a+="UNSPECIFIED ":n===e.EXACTLY?a+="EXACTLY ":n===e.AT_MOST&&(a+="AT_MOST ")
a+=i
return a}
e.round=function(e){var t=Math.floor(e+.5)
return 0!==t?t:0===e?0:e>0?1:-1}}(t.layoutCommon||(t.layoutCommon={}))
t.isFileOrResourcePath=function(e){return!!n.isString(e)&&(0===e.indexOf("~/")||0===e.indexOf("/")||0===e.indexOf(t.RESOURCE_PREFIX))}
t.isFontIconURI=function(e){if(!n.isString(e))return!1
var t=e.trim().split("//")[0]
return t&&0===t.indexOf("font:")}
t.isDataURI=function(e){if(!n.isString(e))return!1
var t=e.trim().split(",")[0]
return t&&0===t.indexOf("data:")&&t.indexOf("base64")>=0}
t.mergeSort=function e(t,o){if(t.length<2)return t
var r=t.length/2,n=t.slice(0,r),i=t.slice(r,t.length)
return s(e(n,o),e(i,o),o)}
function s(e,t,o){for(var r=[];e.length&&t.length;)o(e[0],t[0])<=0?r.push(e.shift()):r.push(t.shift())
for(;e.length;)r.push(e.shift())
for(;t.length;)r.push(t.shift())
return r}t.merge=s
t.hasDuplicates=function(e){return e.length!==u(e).length}
function u(e){return Array.from(new Set(e))}t.eliminateDuplicates=u
function l(e){if(i.isMainThread())return e()
i.dispatchToMainThread(e)}t.executeOnMainThread=l
t.mainThreadify=function(e){return function(){var t=this,o=arguments
l(function(){return e.apply(t,o)})}}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/utils/utils-common.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/utils/utils-common.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/utils/utils.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/trace/trace.js"),i=o("../node_modules/tns-core-modules/utils/utils-common.js")
!function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o("../node_modules/tns-core-modules/utils/utils-common.js"))
var a,s,u=o("../node_modules/tns-core-modules/application/application.js"),l=o("../node_modules/tns-core-modules/platform/platform.js"),c=o("../node_modules/tns-core-modules/file-system/file-system-access.js"),d=24
!function(e){var t,o,r=3<<30,n=!1
function i(e,t){if(void 0===o){o=s.getApplicationContext().getApplicationInfo().targetSdkVersion
n=o<=android.os.Build.VERSION_CODES.JELLY_BEAN_MR1}return n?e+t:e&~r|t&r}e.makeMeasureSpec=i
function a(){void 0===t&&(t=s.getResources().getDisplayMetrics().density)
return t}e.getDisplayDensity=a
e.toDevicePixels=function(e){return e*a()}
e.toDeviceIndependentPixels=function(e){return e/a()}
e.measureNativeView=function(e,t,o,r,n){var a=e
a.measure(i(t,o),i(r,n))
return{width:a.getMeasuredWidth(),height:a.getMeasuredHeight()}}}(a=t.layout||(t.layout={}))
Object.assign(a,i.layoutCommon)
!function(e){var t,o,r,i,a
function s(){o||(o=l().getApplicationContext())
return o}e.getApplicationContext=s
function l(){t||(t=u.getNativeApplication())
return t}e.getApplication=l
function c(){r||(r=l().getResources())
return r}e.getResources=c
function d(){i||(i=s().getPackageName())
return i}function p(){a||(a=s().getSystemService(android.content.Context.INPUT_METHOD_SERVICE))
return a}e.getInputMethodManager=p
e.showSoftInput=function(e){var t=p()
t&&e instanceof android.view.View&&t.showSoftInput(e,android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT)}
e.dismissSoftInput=function(e){var t,o=p()
if(e instanceof android.view.View)t=e.getWindowToken()
else if(u.android.foregroundActivity instanceof androidx.appcompat.app.AppCompatActivity){var r=u.android.foregroundActivity.getWindow().getDecorView()
t=r?r.getWindowToken():null}o&&t&&o.hideSoftInputFromWindow(t,0)}
!function(e){e.stringArrayToStringSet=function(e){var t=new java.util.HashSet
if(void 0!==e)for(var o in e)t.add(""+e[o])
return t}
e.stringSetToStringArray=function(e){var t=[]
if(void 0!==e)for(var o=e.iterator();o.hasNext();){var r=""+o.next()
t.push(r)}return t}}(e.collections||(e.collections={}))
!function(e){var t,o=new Map
e.getDrawableId=function(e){return r(":drawable/"+e)}
e.getStringId=function(e){return r(":string/"+e)}
function r(e){var t=c(),o=d(),r=o+e
return t.getIdentifier(r,null,null)}e.getId=r
e.getPalleteColor=function(e,t){return i(e,t)}
function i(e,r){if(o.has(e))return o.get(e)
var i=0
try{t||(t=java.lang.Class.forName("androidx.appcompat.R$attr"))
var a=0,s=t.getField(e)
s&&(a=s.getInt(null))
if(a){var u=new android.util.TypedValue
r.getTheme().resolveAttribute(a,u,!0)
i=u.data}}catch(t){n.write("Cannot get pallete color: "+e,n.categories.Error,n.messageType.error)}o.set(e,i)
return i}e.getPaletteColor=i}(e.resources||(e.resources={}))}(s=t.ad||(t.ad={}))
t.GC=function(){gc()}
t.releaseNativeObject=function(e){__releaseNativeCounterpart(e)}
t.openUrl=function(e){var t=s.getApplicationContext()
try{var o=new android.content.Intent(android.content.Intent.ACTION_VIEW,android.net.Uri.parse(e.trim()))
o.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK)
t.startActivity(o)}catch(e){n.write("Error in OpenURL",n.categories.Error,n.messageType.error)
return!1}return!0}
t.openFile=function(e){var t,o=s.getApplicationContext()
try{if(!(t=android.os.Environment.getExternalStorageState(),android.os.Environment.MEDIA_MOUNTED===t)){n.write("\nExternal storage is unavailable (please check app permissions).\nApplications cannot access internal storage of other application on Android (see: https://developer.android.com/guide/topics/data/data-storage).\n",n.categories.Error,n.messageType.error)
return!1}if(function(){var e=android.os.Environment.getExternalStorageState()
return android.os.Environment.MEDIA_MOUNTED_READ_ONLY===e}()){n.write("External storage is read only",n.categories.Error,n.messageType.error)
return!1}var r=function(e){var t=android.webkit.MimeTypeMap.getSingleton(),o=(new c.FileSystemAccess).getFileExtension(e).replace(".","").toLowerCase()
return t.getMimeTypeFromExtension(o)}(e),i=new android.content.Intent(android.content.Intent.ACTION_VIEW),a=android.content.Intent.createChooser(i,"Open File...")
i.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK)
a.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK)
var u=parseInt(l.device.sdkVersion,10)
if(u&&u<d){n.write("detected sdk version "+u+" (< "+d+"), using simple openFile",n.categories.Debug)
i.setDataAndType(android.net.Uri.fromFile(new java.io.File(e)),r)
o.startActivity(a)
return!0}n.write("detected sdk version "+u+" (>= "+d+"), using URI openFile",n.categories.Debug)
var p=o.getPackageName()+".provider"
n.write("fully-qualified provider name ["+p+"]",n.categories.Debug)
var f=androidx.core.content.FileProvider.getUriForFile(o,p,new java.io.File(e))
i.addFlags(android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION)
a.addFlags(android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION)
i.setDataAndType(f,r)
o.startActivity(a)
return!0}catch(e){var h=e.message?": "+e.message:""
n.write("Error in openFile"+h,n.categories.Error,n.messageType.error)
h&&h.includes("Attempt to invoke virtual method")&&h.includes("android.content.pm.ProviderInfo.loadXmlMetaData")&&h.includes("on a null object reference")&&n.write("\nPlease ensure you have your manifest correctly configured with the FileProvider.\n(see: https://developer.android.com/reference/android/support/v4/content/FileProvider#ProviderDefinition)\n",n.categories.Error)
return!1}}
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/utils/utils.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/utils/utils.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/xhr/xhr.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n,i=o("../node_modules/tns-core-modules/http/http.js"),a=o("../node_modules/tns-core-modules/utils/types.js")
!function(e){e.empty=""
e.text="text"
e.json="json"}(n||(n={}))
var s=function(){function e(){this.UNSENT=0
this.OPENED=1
this.HEADERS_RECEIVED=2
this.LOADING=3
this.DONE=4
this._responseType=""
this.textTypes=["text/plain","application/xml","application/rss+xml","text/html","text/xml"]
this._listeners=new Map
this._readyState=this.UNSENT}e.prototype.open=function(e,t,o,r,n){if(a.isString(e)&&a.isString(t)){this._options={url:t,method:e}
this._options.headers={}
a.isString(r)&&(this._options.headers.user=r)
a.isString(n)&&(this._options.headers.password=n)
this._setReadyState(this.OPENED)}}
e.prototype.abort=function(){this._errorFlag=!0
this._response=null
this._responseTextReader=null
this._headers=null
this._status=null
this._readyState===this.UNSENT||this._readyState===this.OPENED||this._readyState===this.DONE?this._readyState=this.UNSENT:this._setReadyState(this.DONE)}
e.prototype.send=function(e){var t=this
this._errorFlag=!1
this._response=null
this._responseTextReader=null
this._headers=null
this._status=null
if(a.isDefined(this._options)){a.isString(e)&&"GET"!==this._options.method?this._options.content=e:e instanceof l&&(this._options.content=e.toString())
i.request(this._options).then(function(e){t._errorFlag||t._loadResponse(e)}).catch(function(e){t._errorFlag=!0
t._setReadyState(t.DONE,e)})}}
e.prototype._loadResponse=function(e){this._status=e.statusCode
this._response=e.content.raw+""
this._headers=e.headers
this._setReadyState(this.HEADERS_RECEIVED)
this._setReadyState(this.LOADING)
this._setResponseType()
this._responseTextReader=function(){return e.content.toString()}
this._addToStringOnResponse()
this.responseType===n.json?this._response=JSON.parse(this.responseText):this.responseType===n.text&&(this._response=this.responseText)
this._setReadyState(this.DONE)}
e.prototype._addToStringOnResponse=function(){var e=this
a.isObject(this.response)&&Object.defineProperty(this._response,"toString",{configurable:!0,enumerable:!1,writable:!0,value:function(){return e.responseText}})}
e.prototype.isTextContentType=function(e){for(var t=!1,o=0;o<this.textTypes.length;o++)if(e.toLowerCase().indexOf(this.textTypes[o])>=0){t=!0
break}return t}
e.prototype._setResponseType=function(){var e=this.getResponseHeader("Content-Type"),t=e&&e.toLowerCase()
t?t.indexOf("application/json")>=0||t.indexOf("+json")>=0?this.responseType=n.json:this.isTextContentType(t)&&(this.responseType=n.text):this.responseType=n.text}
e.prototype.addEventListener=function(e,t){if("load"!==e&&"error"!==e&&"progress"!==e)throw new Error("Event not supported: "+e)
var o=this._listeners.get(e)||[]
o.push(t)
this._listeners.set(e,o)}
e.prototype.removeEventListener=function(e,t){var o=this._listeners.get(e)||[]
o=o.filter(function(e){return e!==t})
this._listeners.set(e,o)}
e.prototype.emitEvent=function(e){for(var t=[],o=1;o<arguments.length;o++)t[o-1]=arguments[o]
var r=this._listeners.get(e)||[]
r.forEach(function(e){e.apply(void 0,t)})}
e.prototype.setRequestHeader=function(e,t){a.isDefined(this._options)&&a.isString(e)&&a.isString(t)&&(this._options.headers[e]=t)}
e.prototype.getAllResponseHeaders=function(){if(this._readyState<2||this._errorFlag)return""
var e=""
for(var t in this._headers)e+=t+": "+this._headers[t]+"\r\n"
return e.substr(0,e.length-2)}
e.prototype.getResponseHeader=function(e){if(a.isString(e)&&this._readyState>1&&this._headers&&!this._errorFlag){e=e.toLowerCase()
for(var t in this._headers)if(t.toLowerCase()===e)return this._headers[t]}return null}
e.prototype.overrideMimeType=function(e){}
Object.defineProperty(e.prototype,"readyState",{get:function(){return this._readyState},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"responseType",{get:function(){return this._responseType},set:function(e){if(!(e===n.empty||e in n))throw new Error("Response type of '"+e+"' not supported.")
this._responseType=e},enumerable:!0,configurable:!0})
e.prototype._setReadyState=function(e,t){if(this._readyState!==e){this._readyState=e
a.isFunction(this.onreadystatechange)&&this.onreadystatechange()}if(this._readyState===this.DONE)if(this._errorFlag){a.isFunction(this.onerror)&&this.onerror(t)
this.emitEvent("error",t)}else{a.isFunction(this.onload)&&this.onload()
this.emitEvent("load")}}
Object.defineProperty(e.prototype,"responseText",{get:function(){return a.isFunction(this._responseTextReader)?this._responseTextReader():""},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"response",{get:function(){return this._response},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"statusText",{get:function(){return this._readyState===this.UNSENT||this._readyState===this.OPENED||this._errorFlag?"":u[this._status]},enumerable:!0,configurable:!0})
return e}()
t.XMLHttpRequest=s
var u={100:"Continue",101:"Switching Protocols",200:"OK",201:"Created",202:"Accepted",203:"Non - Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Entity Too Large",414:"Request - URI Too Long",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported"},l=function(){function e(){this._data=new Map}e.prototype.append=function(e,t){this._data.set(e,t)}
e.prototype.toString=function(){var e=new Array
this._data.forEach(function(t,o,r){e.push(encodeURIComponent(o)+"="+encodeURIComponent(t))})
return e.join("&")}
return e}()
t.FormData=l
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/xhr/xhr.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/xhr/xhr.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tns-core-modules/xml/xml.js":function(e,t,o){(function(r){Object.defineProperty(t,"__esModule",{value:!0})
var n=o("../node_modules/tns-core-modules/js-libs/easysax/easysax.js"),i=function(){function e(){}e.StartElement="StartElement"
e.EndElement="EndElement"
e.Text="Text"
e.CDATA="CDATA"
e.Comment="Comment"
return e}()
t.ParserEventType=i
var a,s=function(){function e(e,t,o,r,n,i,a){this._eventType=e
this._position=t
this._prefix=o
this._namespace=r
this._elementName=n
this._attributes=i
this._data=a}e.prototype.toString=function(){return JSON.stringify({eventType:this.eventType,position:this.position,prefix:this.prefix,namespace:this.namespace,elementName:this.elementName,attributes:this.attributes,data:this.data})}
Object.defineProperty(e.prototype,"eventType",{get:function(){return this._eventType},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"position",{get:function(){return this._position},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"prefix",{get:function(){return this._prefix},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"namespace",{get:function(){return this._namespace},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"elementName",{get:function(){return this._elementName},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"attributes",{get:function(){return this._attributes},enumerable:!0,configurable:!0})
Object.defineProperty(e.prototype,"data",{get:function(){return this._data},enumerable:!0,configurable:!0})
return e}()
t.ParserEvent=s
var u=/&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/gi
function l(){var e={Tab:9,NewLine:10,excl:33,quot:34,QUOT:34,num:35,dollar:36,percent:37,amp:38,AMP:38,apos:39,lpar:40,rpar:41,ast:42,midast:42,plus:43,comma:44,period:46,sol:47,colon:58,semi:59,lt:60,LT:60,equals:61,gt:62,GT:62,quest:63,commat:64,lsqb:91,lbrack:91,bsol:92,rsqb:92,rbrack:92,Hat:94,lowbar:95,grave:96,DiacriticalGrave:96,lcub:123,lbrace:123,verbar:124,vert:124,VerticalLine:124,rcub:125,rbrace:125,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,brkbar:166,sect:167,uml:168,copy:169,ordf:170,laquo:171,not:172,shy:173,reg:174,macr:175,hibar:175,deg:176,plusmn:177,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,sup1:185,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,Agrave:192,Aacute:193,Acirc:194,Atilde:195,Auml:196,Aring:197,AElig:198,Ccedil:199,Egrave:200,Eacute:201,Ecirc:202,Euml:203,Igrave:204,Iacute:205,Icirc:206,Iuml:207,ETH:208,Dstrok:208,Ntilde:209,Ograve:210,Oacute:211,Ocirc:212,Otilde:213,Ouml:214,times:215,Oslash:216,Ugrave:217,Uacute:218,Ucirc:219,Uuml:220,Yacute:221,THORN:222,szlig:223,agrave:224,aacute:225,acirc:226,atilde:227,auml:228,aring:229,aelig:230,ccedil:231,egrave:232,eacute:233,ecirc:234,euml:235,igrave:236,iacute:237,icirc:238,iuml:239,eth:240,ntilde:241,ograve:242,oacute:243,ocirc:244,otilde:245,ouml:246,divide:247,oslash:248,ugrave:249,uacute:250,ucirc:251,uuml:252,yacute:253,thorn:254,yuml:255,fnof:402,imped:437,gacute:501,jmath:567,circ:710,caron:711,Hacek:711,breve:728,Breve:728,dot:729,DiacriticalDot:729,ring:730,ogon:731,tilde:732,DiacriticalTilde:732,dblac:733,DiacriticalDoubleAcute:733,DownBreve:785,UnderBar:818,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,epsiv:949,varepsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigmav:962,varsigma:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetav:977,vartheta:977,thetasym:977,Upsi:978,upsih:978,straightphi:981,piv:982,varpi:982,Gammad:988,gammad:989,digamma:989,kappav:1008,varkappa:1008,rhov:1009,varrho:1009,epsi:1013,straightepsilon:1013,bepsi:1014,backepsilon:1014,euro:8364,trade:8482,TRADE:8482,forall:8704,part:8706,larr:8592,rarr:8593,hyphen:8208,dash:8208,ndash:8211,mdash:8212,horbar:8213,Vert:8214,Verbar:8214,lsquo:8216,OpenCurlyQuote:8216,rsquo:8217,rsquor:8217,CloseCurlyQuote:8217,lsquor:8218,sbquo:8218,ldquo:8220,OpenCurlyDoubleQuote:8220,rdquo:8221,rdquor:8221,CloseCurlyDoubleQuote:8221,ldquor:8222,bdquo:8222,dagger:8224,Dagger:8225,ddagger:8225,bull:8226,bullet:8226,nldr:8229,hellip:8230,mldr:8230,hybull:8259,tdot:8411,TripleDot:8411,DotDot:8412,star:9734,phone:9742,spades:9824,clubs:9827,hearts:9829,diams:9830,female:9792,male:9794,check:10003,checkmark:10003,cross:10007,VerticalSeparator:10072,EmptySmallSquare:9723,FilledSmallSquare:9724,starf:9733,bigstar:9733,square:9633,squ:9633,Square:9633},t=new Map
for(var o in e)e.hasOwnProperty(o)&&t.set(o,e[o])
return t}r.__snapshot&&(a=l())
function c(e,t,o,r){if(r){a||(a=l())
var n=a.get(r)
return n?String.fromCharCode(n):e}return t?String.fromCharCode(parseInt(t,10)):String.fromCharCode(parseInt(o,16))}var d=function(){function e(t,o,r){this._processNamespaces=r
this._parser=new n.EasySAXParser
var a=this
this._parser.on("startNode",function(o,r,n,u,l,c){var d=r()
!0===d&&(d=void 0)
if(d)for(var p in d)d.hasOwnProperty(p)&&(d[p]=e._dereferenceEntities(d[p]))
var f=void 0,h=void 0,m=o
if(a._processNamespaces){var y=e._getNamespacesStackEntry(d)
a._namespaceStack.push(y)
var g=a._resolveNamespace(m)
f=g.prefix
h=g.namespace
m=g.name}t(new s(i.StartElement,c(),f,h,m,d,void 0))})
this._parser.on("textNode",function(o,r,n){var a=r(e._dereferenceEntities(o))
t(new s(i.Text,n(),void 0,void 0,void 0,void 0,a))})
this._parser.on("endNode",function(e,o,r,n,u){var l=void 0,c=void 0,d=e
if(a._processNamespaces){var p=a._resolveNamespace(d)
l=p.prefix
c=p.namespace
d=p.name}t(new s(i.EndElement,u(),l,c,d,void 0,void 0))
a._processNamespaces&&a._namespaceStack.pop()})
this._parser.on("cdata",function(e,o,r){t(new s(i.CDATA,r(),void 0,void 0,void 0,void 0,e))})
this._parser.on("comment",function(e,o,r){t(new s(i.Comment,r(),void 0,void 0,void 0,void 0,e))})
o&&this._parser.on("error",function(e,t){o(new Error(e),t())})}Object.defineProperty(e.prototype,"angularSyntax",{get:function(){return this._parser.angularSyntax},set:function(e){this._parser.angularSyntax=e},enumerable:!0,configurable:!0})
e.prototype.parse=function(e){this._processNamespaces&&(this._namespaceStack=[])
this._parser.parse(e)}
e._getNamespacesStackEntry=function(e){var t,o,r={}
if(!e)return r
for(var n in e)if(e.hasOwnProperty(n)){t=n
if(0===t.indexOf("xmlns")){o="";-1!==t.indexOf(":")&&(o=t.split(":")[1])
r[o]=e[n]}}return r}
e.prototype._resolveNamespace=function(e){var t,o={prefix:(void 0,""),namespace:void 0,name:void 0}
if(-1!==e.indexOf(":")){var r=e.split(":")
o.prefix=r[0]
o.name=r[1]}else o.name=e
for(var n=this._namespaceStack.length-1;n>=0;n--){t=this._namespaceStack[n]
for(var i in t)if(t.hasOwnProperty(i)&&o.prefix===i){o.namespace=t[i]
return o}}return o}
e._dereferenceEntities=function(e){e=String(e)
e.length>3&&-1!==e.indexOf("&")&&(e=e.replace(u,c))
return e}
return e}()
t.XmlParser=d
if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tns-core-modules/xml/xml.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tns-core-modules/xml/xml.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/tslib/tslib.es6.js":function(e,t,o){"use strict"
o.r(t);(function(r){o.d(t,"__extends",function(){return i})
o.d(t,"__assign",function(){return a})
o.d(t,"__rest",function(){return s})
o.d(t,"__decorate",function(){return u})
o.d(t,"__param",function(){return l})
o.d(t,"__metadata",function(){return c})
o.d(t,"__awaiter",function(){return d})
o.d(t,"__generator",function(){return p})
o.d(t,"__exportStar",function(){return f})
o.d(t,"__values",function(){return h})
o.d(t,"__read",function(){return m})
o.d(t,"__spread",function(){return y})
o.d(t,"__spreadArrays",function(){return g})
o.d(t,"__await",function(){return v})
o.d(t,"__asyncGenerator",function(){return b})
o.d(t,"__asyncDelegator",function(){return _})
o.d(t,"__asyncValues",function(){return w})
o.d(t,"__makeTemplateObject",function(){return P})
o.d(t,"__importStar",function(){return C})
o.d(t,"__importDefault",function(){return S})
var n=function(e,t){n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])}
return n(e,t)}
function i(e,t){n(e,t)
function o(){this.constructor=e}e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}var a=function(){a=Object.assign||function(e){for(var t,o=1,r=arguments.length;o<r;o++){t=arguments[o]
for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}
return a.apply(this,arguments)}
function s(e,t){var o={}
for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(o[r]=e[r])
if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0
for(r=Object.getOwnPropertySymbols(e);n<r.length;n++)t.indexOf(r[n])<0&&Object.prototype.propertyIsEnumerable.call(e,r[n])&&(o[r[n]]=e[r[n]])}return o}function u(e,t,o,r){var n,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,o):r
if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,o,r)
else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(a=(i<3?n(a):i>3?n(t,o,a):n(t,o))||a)
return i>3&&a&&Object.defineProperty(t,o,a),a}function l(e,t){return function(o,r){t(o,r,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function d(e,t,o,r){return new(o||(o=Promise))(function(n,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){e.done?n(e.value):new o(function(t){t(e.value)}).then(a,s)}u((r=r.apply(e,t||[])).next())})}function p(e,t){var o,r,n,i,a={label:0,sent:function(){if(1&n[0])throw n[1]
return n[1]},trys:[],ops:[]}
return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i
function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.")
for(;a;)try{if(o=1,r&&(n=2&i[0]?r.return:i[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,i[1])).done)return n;(r=0,n)&&(i=[2&i[0],n.value])
switch(i[0]){case 0:case 1:n=i
break
case 4:a.label++
return{value:i[1],done:!1}
case 5:a.label++
r=i[1]
i=[0]
continue
case 7:i=a.ops.pop()
a.trys.pop()
continue
default:if(!(n=a.trys,n=n.length>0&&n[n.length-1])&&(6===i[0]||2===i[0])){a=0
continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){a.label=i[1]
break}if(6===i[0]&&a.label<n[1]){a.label=n[1]
n=i
break}if(n&&a.label<n[2]){a.label=n[2]
a.ops.push(i)
break}n[2]&&a.ops.pop()
a.trys.pop()
continue}i=t.call(e,a)}catch(e){i=[6,e]
r=0}finally{o=n=0}if(5&i[0])throw i[1]
return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}function f(e,t){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}function h(e){var t="function"==typeof Symbol&&e[Symbol.iterator],o=0
return t?t.call(e):{next:function(){e&&o>=e.length&&(e=void 0)
return{value:e&&e[o++],done:!e}}}}function m(e,t){var o="function"==typeof Symbol&&e[Symbol.iterator]
if(!o)return e
var r,n,i=o.call(e),a=[]
try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){n={error:e}}finally{try{r&&!r.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}return a}function y(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]))
return e}function g(){for(var e=0,t=0,o=arguments.length;t<o;t++)e+=arguments[t].length
var r=Array(e),n=0
for(t=0;t<o;t++)for(var i=arguments[t],a=0,s=i.length;a<s;a++,n++)r[n]=i[a]
return r}function v(e){return this instanceof v?(this.v=e,this):new v(e)}function b(e,t,o){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.")
var r,n=o.apply(e,t||[]),i=[]
return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r
function a(e){n[e]&&(r[e]=function(t){return new Promise(function(o,r){i.push([e,t,o,r])>1||s(e,t)})})}function s(e,t){try{o=n[e](t),o.value instanceof v?Promise.resolve(o.value.v).then(u,l):c(i[0][2],o)}catch(e){c(i[0][3],e)}var o}function u(e){s("next",e)}function l(e){s("throw",e)}function c(e,t){(e(t),i.shift(),i.length)&&s(i[0][0],i[0][1])}}function _(e){var t,o
return t={},r("next"),r("throw",function(e){throw e}),r("return"),t[Symbol.iterator]=function(){return this},t
function r(r,n){t[r]=e[r]?function(t){return(o=!o)?{value:v(e[r](t)),done:"return"===r}:n?n(t):t}:n}}function w(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.")
var t,o=e[Symbol.asyncIterator]
return o?o.call(e):(e=h(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t)
function r(o){t[o]=e[o]&&function(t){return new Promise(function(r,n){t=e[o](t),function(e,t,o,r){Promise.resolve(r).then(function(t){e({value:t,done:o})},t)}(r,n,t.done,t.value)})}}}function P(e,t){Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t
return e}function C(e){if(e&&e.__esModule)return e
var t={}
if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o])
t.default=e
return t}function S(e){return e&&e.__esModule?e:{default:e}}if(r._isModuleLoadedForUI&&r._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/tslib/tslib.es6.js")){e.hot.accept()
e.hot.dispose(()=>{r.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/tslib/tslib.es6.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))},"../node_modules/webpack/buildin/global.js":function(e,t,o){(function(t){var o
o=function(){return this}()
try{o=o||new Function("return this")()}catch(e){"object"==typeof window&&(o=window)}e.exports=o
if(t._isModuleLoadedForUI&&t._isModuleLoadedForUI("D:/Project of Client/Native Script/github/node_modules/webpack/buildin/global.js")){e.hot.accept()
e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"D:/Project of Client/Native Script/github/node_modules/webpack/buildin/global.js"})})}}).call(this,o("../node_modules/webpack/buildin/global.js"))}}])

//# sourceMappingURL=data:application/json;charset=utf-8;base64,